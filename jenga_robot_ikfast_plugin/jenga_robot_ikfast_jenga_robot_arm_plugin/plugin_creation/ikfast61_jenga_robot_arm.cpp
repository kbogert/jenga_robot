/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2018-06-24 13:48:49.090462
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49;
x0=IKcos(j[3]);
x1=IKsin(j[2]);
x2=IKcos(j[2]);
x3=IKsin(j[3]);
x4=IKcos(j[0]);
x5=IKsin(j[1]);
x6=IKcos(j[1]);
x7=IKsin(j[0]);
x8=IKsin(j[5]);
x9=IKsin(j[4]);
x10=IKcos(j[4]);
x11=IKcos(j[5]);
x12=((1.0)*x1);
x13=((0.0715)*x1);
x14=((1.0)*x9);
x15=((1.0)*x10);
x16=(x5*x7);
x17=(x4*x5);
x18=(x2*x3);
x19=(x1*x3);
x20=(x4*x6);
x21=(x0*x2);
x22=(x0*x1);
x23=(x6*x7);
x24=((1.0)*x23);
x25=((0.14203)*x23);
x26=((0.14203)*x17);
x27=((((-1.0)*x24))+x17);
x28=(x16+x20);
x29=((((-1.0)*x12*x3))+x21);
x30=((((-1.0)*x17))+x24);
x31=((((-1.0)*x25))+x26);
x32=((((2.0e-7)*x17))+(((-2.0e-7)*x23)));
x33=((((1.0)*x16))+(((1.0)*x20)));
x34=((-1.0)*x33);
x35=((((0.14203)*x16))+(((0.14203)*x20)));
x36=((((-2.0e-7)*x20))+(((-2.0e-7)*x16)));
x37=((-1.0)*x35);
x38=((((-1.0)*x0*x12))+(((-1.0)*x18)));
x39=(((x0*x12))+(((1.0)*x18)));
x40=(x10*x29);
x41=(x0*x33);
x42=(((x19*x27))+((x21*x30)));
x43=(((x18*x30))+((x22*x30)));
x44=(x42*x9);
x45=(((x19*x34))+((x21*x33)));
x46=(((x18*x33))+((x22*x33)));
x47=(x10*x43);
x48=(x45*x9);
x49=(x10*x46);
eerot[0]=(((x27*x8))+((x11*((x48+x49)))));
eerot[1]=(((x8*(((((-1.0)*x15*x46))+(((-1.0)*x14*x45))))))+((x11*x27)));
eerot[2]=(((x46*x9))+((x10*(((((-1.0)*x21*x33))+(((-1.0)*x12*x3*x34)))))));
IkReal x50=((0.0715)*x33);
eetrans[0]=(((x19*x35))+((x18*x36))+((x2*(((((-0.04825)*x20))+(((-0.04825)*x16))))))+((x21*x37))+((x9*((((x18*x50))+((x13*x41))))))+((x22*x36))+((x10*(((((-1.0)*x21*x50))+(((-1.0)*x13*x3*x34))))))+((x1*x37))+(((0.11430032722332)*x4)));
eerot[3]=(((x11*((x47+x44))))+((x28*x8)));
eerot[4]=(((x11*x28))+((x8*(((((-1.0)*x15*x43))+(((-1.0)*x14*x42)))))));
eerot[5]=(((x10*(((((-1.0)*x21*x30))+(((-1.0)*x12*x27*x3))))))+((x43*x9)));
IkReal x51=((0.0715)*x30);
eetrans[1]=(((x18*x32))+((x9*((((x18*x51))+((x0*x13*x30))))))+((x10*(((((-0.0715)*x19*x27))+(((-1.0)*x21*x51))))))+((x21*x31))+((x22*x32))+((x19*(((((-1.0)*x26))+x25))))+((x2*(((((0.04825)*x17))+(((-0.04825)*x23))))))+((x1*x31))+(((0.11430032722332)*x7)));
eerot[6]=(x11*((x40+((x38*x9)))));
eerot[7]=(x8*(((((-1.0)*x15*x29))+(((-1.0)*x14*x38)))));
eerot[8]=(((x29*x9))+((x10*x39)));
eetrans[2]=((0.72907)+(((2.0e-7)*x19))+((x10*((((x0*x13))+(((0.0715)*x18))))))+(((0.14203)*x18))+((x9*(((((0.0715)*x21))+(((-1.0)*x13*x3))))))+(((0.14203)*x22))+(((0.04825)*x1))+(((-0.14203)*x2))+(((-2.0e-7)*x21)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.0715)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.0715)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.72907)+(((-0.0715)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x55=((0.22860065444664)*rxp0_0);
IkReal x56=((0.22860065444664)*rxp1_0);
IkReal x57=((0.11430032722332)*r10);
IkReal x58=((0.11430032722332)*r11);
IkReal x59=((2.0)*pz);
IkReal x60=((-1.0)*r20);
IkReal x61=((-0.11430032722332)*r20);
IkReal x62=((-1.0)*r21);
IkReal x63=((-0.11430032722332)*r21);
IkReal x64=((-0.22860065444664)*py);
IkReal x65=((-1.0)*px);
IkReal x66=((-0.11430032722332)*r00);
IkReal x67=((-0.11430032722332)*r10);
IkReal x68=((-1.0)*r00);
IkReal x69=((-1.0)*rxp0_0);
IkReal x70=((-0.11430032722332)*r01);
IkReal x71=((-0.11430032722332)*r11);
IkReal x72=((-1.0)*r01);
IkReal x73=((-1.0)*rxp1_0);
IkReal x74=((-0.22860065444664)*px);
IkReal x75=((-0.22860065444664)*rxp0_1);
IkReal x76=((-0.22860065444664)*rxp1_1);
IkReal x77=(((pp*r20))+(((-1.0)*npx*x59))+(((0.0130645648033581)*r20)));
IkReal x78=(((pp*r21))+(((-1.0)*npy*x59))+(((0.0130645648033581)*r21)));
matrixinvcoeffs[0]=x60;
matrixinvcoeffs[1]=0;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=rxp0_2;
matrixinvcoeffs[7]=npx;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=x61;
matrixinvcoeffs[13]=x77;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=0;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x60;
matrixinvcoeffs[19]=0;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=rxp0_2;
matrixinvcoeffs[25]=npx;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x61;
matrixinvcoeffs[31]=x77;
matrixinvcoeffs[32]=x62;
matrixinvcoeffs[33]=0;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=rxp1_2;
matrixinvcoeffs[39]=npy;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=x63;
matrixinvcoeffs[45]=x78;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x62;
matrixinvcoeffs[51]=0;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=rxp1_2;
matrixinvcoeffs[57]=npy;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x63;
matrixinvcoeffs[63]=x78;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=x64;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=x65;
matrixinvcoeffs[69]=((-1.0)*py);
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=0;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=0;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=x64;
matrixinvcoeffs[84]=py;
matrixinvcoeffs[85]=x65;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=0;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=0;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=0;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=x66;
matrixinvcoeffs[103]=x67;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=x68;
matrixinvcoeffs[107]=((-1.0)*r10);
matrixinvcoeffs[108]=x69;
matrixinvcoeffs[109]=x55;
matrixinvcoeffs[110]=((-1.0)*rxp0_1);
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=0;
matrixinvcoeffs[120]=x66;
matrixinvcoeffs[121]=x67;
matrixinvcoeffs[122]=r10;
matrixinvcoeffs[123]=x68;
matrixinvcoeffs[124]=rxp0_1;
matrixinvcoeffs[125]=0;
matrixinvcoeffs[126]=x69;
matrixinvcoeffs[127]=x55;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=x70;
matrixinvcoeffs[135]=x71;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=x72;
matrixinvcoeffs[139]=((-1.0)*r11);
matrixinvcoeffs[140]=x73;
matrixinvcoeffs[141]=x56;
matrixinvcoeffs[142]=((-1.0)*rxp1_1);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=0;
matrixinvcoeffs[152]=x70;
matrixinvcoeffs[153]=x71;
matrixinvcoeffs[154]=r11;
matrixinvcoeffs[155]=x72;
matrixinvcoeffs[156]=rxp1_1;
matrixinvcoeffs[157]=0;
matrixinvcoeffs[158]=x73;
matrixinvcoeffs[159]=x56;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=x74;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=py;
matrixinvcoeffs[165]=x65;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=0;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=0;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=x74;
matrixinvcoeffs[180]=px;
matrixinvcoeffs[181]=py;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=0;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=0;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=x57;
matrixinvcoeffs[199]=x66;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=r10;
matrixinvcoeffs[203]=x68;
matrixinvcoeffs[204]=rxp0_1;
matrixinvcoeffs[205]=x75;
matrixinvcoeffs[206]=x69;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=x57;
matrixinvcoeffs[217]=x66;
matrixinvcoeffs[218]=r00;
matrixinvcoeffs[219]=r10;
matrixinvcoeffs[220]=rxp0_0;
matrixinvcoeffs[221]=0;
matrixinvcoeffs[222]=rxp0_1;
matrixinvcoeffs[223]=x75;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=x58;
matrixinvcoeffs[231]=x70;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=r11;
matrixinvcoeffs[235]=x72;
matrixinvcoeffs[236]=rxp1_1;
matrixinvcoeffs[237]=x76;
matrixinvcoeffs[238]=x73;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=x58;
matrixinvcoeffs[249]=x70;
matrixinvcoeffs[250]=r01;
matrixinvcoeffs[251]=r11;
matrixinvcoeffs[252]=rxp1_0;
matrixinvcoeffs[253]=0;
matrixinvcoeffs[254]=rxp1_1;
matrixinvcoeffs[255]=x76;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_2=matrixinvcoeffs[32], gclwh0_6=matrixinvcoeffs[96], gclwh0_7=matrixinvcoeffs[112], gclwh0_8=matrixinvcoeffs[128], gclwh0_9=matrixinvcoeffs[144], gclwh0_10=matrixinvcoeffs[160], gclwh0_11=matrixinvcoeffs[176], gclwh0_13=matrixinvcoeffs[208], gclwh0_15=matrixinvcoeffs[240], gclwh1_0=matrixinvcoeffs[1], gclwh1_2=matrixinvcoeffs[33], gclwh1_6=matrixinvcoeffs[97], gclwh1_7=matrixinvcoeffs[113], gclwh1_8=matrixinvcoeffs[129], gclwh1_9=matrixinvcoeffs[145], gclwh1_10=matrixinvcoeffs[161], gclwh1_11=matrixinvcoeffs[177], gclwh1_13=matrixinvcoeffs[209], gclwh1_15=matrixinvcoeffs[241], gclwh2_0=matrixinvcoeffs[2], gclwh2_2=matrixinvcoeffs[34], gclwh2_6=matrixinvcoeffs[98], gclwh2_7=matrixinvcoeffs[114], gclwh2_8=matrixinvcoeffs[130], gclwh2_9=matrixinvcoeffs[146], gclwh2_10=matrixinvcoeffs[162], gclwh2_11=matrixinvcoeffs[178], gclwh2_13=matrixinvcoeffs[210], gclwh2_14=matrixinvcoeffs[226], gclwh2_15=matrixinvcoeffs[242], gclwh3_0=matrixinvcoeffs[3], gclwh3_2=matrixinvcoeffs[35], gclwh3_6=matrixinvcoeffs[99], gclwh3_7=matrixinvcoeffs[115], gclwh3_8=matrixinvcoeffs[131], gclwh3_9=matrixinvcoeffs[147], gclwh3_10=matrixinvcoeffs[163], gclwh3_11=matrixinvcoeffs[179], gclwh3_12=matrixinvcoeffs[195], gclwh3_13=matrixinvcoeffs[211], gclwh3_15=matrixinvcoeffs[243], gclwh4_1=matrixinvcoeffs[20], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh5_1=matrixinvcoeffs[21], gclwh5_3=matrixinvcoeffs[53], gclwh5_5=matrixinvcoeffs[85], gclwh6_0=matrixinvcoeffs[6], gclwh6_2=matrixinvcoeffs[38], gclwh6_6=matrixinvcoeffs[102], gclwh6_7=matrixinvcoeffs[118], gclwh6_8=matrixinvcoeffs[134], gclwh6_9=matrixinvcoeffs[150], gclwh6_10=matrixinvcoeffs[166], gclwh6_11=matrixinvcoeffs[182], gclwh6_13=matrixinvcoeffs[214], gclwh6_14=matrixinvcoeffs[230], gclwh6_15=matrixinvcoeffs[246], gclwh7_0=matrixinvcoeffs[7], gclwh7_2=matrixinvcoeffs[39], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_8=matrixinvcoeffs[135], gclwh7_9=matrixinvcoeffs[151], gclwh7_10=matrixinvcoeffs[167], gclwh7_11=matrixinvcoeffs[183], gclwh7_12=matrixinvcoeffs[199], gclwh7_13=matrixinvcoeffs[215], gclwh7_14=matrixinvcoeffs[231], gclwh7_15=matrixinvcoeffs[247], gclwh8_0=matrixinvcoeffs[8], gclwh8_2=matrixinvcoeffs[40], gclwh8_6=matrixinvcoeffs[104], gclwh8_7=matrixinvcoeffs[120], gclwh8_8=matrixinvcoeffs[136], gclwh8_9=matrixinvcoeffs[152], gclwh8_10=matrixinvcoeffs[168], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh8_13=matrixinvcoeffs[216], gclwh8_14=matrixinvcoeffs[232], gclwh8_15=matrixinvcoeffs[248], gclwh9_0=matrixinvcoeffs[9], gclwh9_2=matrixinvcoeffs[41], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_8=matrixinvcoeffs[137], gclwh9_9=matrixinvcoeffs[153], gclwh9_10=matrixinvcoeffs[169], gclwh9_11=matrixinvcoeffs[185], gclwh9_12=matrixinvcoeffs[201], gclwh9_13=matrixinvcoeffs[217], gclwh9_14=matrixinvcoeffs[233], gclwh9_15=matrixinvcoeffs[249], gclwh10_1=matrixinvcoeffs[26], gclwh10_3=matrixinvcoeffs[58], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh11_1=matrixinvcoeffs[27], gclwh11_3=matrixinvcoeffs[59], gclwh11_4=matrixinvcoeffs[75], gclwh11_5=matrixinvcoeffs[91], gclwh12_0=matrixinvcoeffs[12], gclwh12_2=matrixinvcoeffs[44], gclwh12_6=matrixinvcoeffs[108], gclwh12_7=matrixinvcoeffs[124], gclwh12_8=matrixinvcoeffs[140], gclwh12_9=matrixinvcoeffs[156], gclwh12_10=matrixinvcoeffs[172], gclwh12_11=matrixinvcoeffs[188], gclwh12_12=matrixinvcoeffs[204], gclwh12_13=matrixinvcoeffs[220], gclwh12_14=matrixinvcoeffs[236], gclwh12_15=matrixinvcoeffs[252], gclwh13_0=matrixinvcoeffs[13], gclwh13_2=matrixinvcoeffs[45], gclwh13_6=matrixinvcoeffs[109], gclwh13_7=matrixinvcoeffs[125], gclwh13_8=matrixinvcoeffs[141], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_11=matrixinvcoeffs[189], gclwh13_12=matrixinvcoeffs[205], gclwh13_13=matrixinvcoeffs[221], gclwh13_15=matrixinvcoeffs[253], gclwh14_0=matrixinvcoeffs[14], gclwh14_2=matrixinvcoeffs[46], gclwh14_6=matrixinvcoeffs[110], gclwh14_7=matrixinvcoeffs[126], gclwh14_8=matrixinvcoeffs[142], gclwh14_9=matrixinvcoeffs[158], gclwh14_10=matrixinvcoeffs[174], gclwh14_11=matrixinvcoeffs[190], gclwh14_12=matrixinvcoeffs[206], gclwh14_13=matrixinvcoeffs[222], gclwh14_14=matrixinvcoeffs[238], gclwh14_15=matrixinvcoeffs[254], gclwh15_0=matrixinvcoeffs[15], gclwh15_2=matrixinvcoeffs[47], gclwh15_6=matrixinvcoeffs[111], gclwh15_7=matrixinvcoeffs[127], gclwh15_8=matrixinvcoeffs[143], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_11=matrixinvcoeffs[191], gclwh15_12=matrixinvcoeffs[207], gclwh15_13=matrixinvcoeffs[223], gclwh15_14=matrixinvcoeffs[239], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x79=((0.1420302)+pz);
IkReal x80=((0.1420298)+pz);
IkReal x81=((5.22582592134323e-9)*r01);
IkReal x82=(npy*py);
IkReal x83=((2.0)*gclwh15_11);
IkReal x84=(pp*r11);
IkReal x85=((0.1420298)*gclwh14_12);
IkReal x86=((0.00185555752610799)*gclwh13_12);
IkReal x87=(gclwh8_12*r11);
IkReal x88=((0.00248592539078297)*gclwh7_6);
IkReal x89=(gclwh6_8*pp);
IkReal x90=((0.09378)*r10);
IkReal x91=((0.2840596)*gclwh8_14);
IkReal x92=(npx*py);
IkReal x93=((8.0e-7)*gclwh7_6);
IkReal x94=((5.22582592134323e-9)*r11);
IkReal x95=((0.19028)*r00);
IkReal x96=((0.22860065444664)*gclwh0_11);
IkReal x97=(gclwh2_14*rxp1_2);
IkReal x98=((0.00185555752610799)*r00);
IkReal x99=(pp*r00);
IkReal x100=((4.0e-7)*gclwh13_6);
IkReal x101=(gclwh2_8*npy);
IkReal x102=((0.0649363933423744)*npy);
IkReal x103=((0.0434981325281067)*rxp0_2);
IkReal x104=(npy*px);
IkReal x105=((2.0)*gclwh9_11);
IkReal x106=((0.38056)*gclwh14_6);
IkReal x107=((0.00185556275193391)*r00);
IkReal x108=((8.0e-7)*gclwh9_6);
IkReal x109=((0.00371112027804189)*r01);
IkReal x110=((0.18756)*gclwh6_8);
IkReal x111=((4.0e-7)*r10);
IkReal x112=(gclwh0_8*rxp0_2);
IkReal x113=(gclwh3_12*rxp1_2);
IkReal x114=(npx*px);
IkReal x115=((0.2840596)*gclwh7_14);
IkReal x116=((9.14402617786561e-8)*gclwh3_8);
IkReal x117=((0.38056)*gclwh9_8);
IkReal x118=((0.28406)*gclwh9_12);
IkReal x119=((0.1420302)*pp);
IkReal x120=(gclwh15_14*r01);
IkReal x121=((0.38056)*gclwh7_6);
IkReal x122=((0.2840604)*gclwh6_14);
IkReal x123=((0.18756)*gclwh7_6);
IkReal x124=((0.00371112027804189)*r00);
IkReal x125=((0.38056)*gclwh6_8);
IkReal x126=((0.0130645648033581)*r10);
IkReal x127=(gclwh7_6*r10);
IkReal x128=(gclwh12_14*r10);
IkReal x129=(gclwh6_14*r10);
IkReal x130=((0.09378)*gclwh15_6);
IkReal x131=(gclwh12_12*r10);
IkReal x132=((0.38056)*gclwh13_6);
IkReal x133=(gclwh12_8*pp);
IkReal x134=((0.00371112550386781)*r01);
IkReal x135=(pp*r10);
IkReal x136=((0.28406)*gclwh13_12);
IkReal x137=((0.2840604)*gclwh15_12);
IkReal x138=((8.0e-7)*gclwh12_6);
IkReal x139=((0.2840596)*gclwh6_14);
IkReal x140=((0.38056)*gclwh8_6);
IkReal x141=(gclwh8_6*r01);
IkReal x142=((0.2840604)*gclwh12_12);
IkReal x143=((0.38056)*gclwh9_6);
IkReal x144=((0.00497185078156595)*r10);
IkReal x145=((0.56812)*gclwh15_12);
IkReal x146=((0.38056)*gclwh6_6);
IkReal x147=(gclwh1_6*npx);
IkReal x148=((0.00185556275193391)*r01);
IkReal x149=((2.0)*gclwh8_10);
IkReal x150=((0.56812)*gclwh7_12);
IkReal x151=((2.0)*gclwh9_10);
IkReal x152=((0.2840596)*gclwh9_14);
IkReal x153=(gclwh8_12*r01);
IkReal x154=((0.38056)*pp);
IkReal x155=(gclwh13_12*r10);
IkReal x156=((0.00122519488725892)*r10);
IkReal x157=(gclwh7_8*pp);
IkReal x158=((8.0e-7)*gclwh14_8);
IkReal x159=((0.1420298)*gclwh15_12);
IkReal x160=((0.38056)*gclwh12_6);
IkReal x161=(gclwh9_10*r01);
IkReal x162=((0.56812)*gclwh8_14);
IkReal x163=((0.00248592539078297)*r11);
IkReal x164=(gclwh13_6*pp);
IkReal x165=((0.2840604)*gclwh9_14);
IkReal x166=((0.00371112550386781)*r11);
IkReal x167=((0.2840604)*gclwh9_12);
IkReal x168=(gclwh7_12*r10);
IkReal x169=((0.2840596)*gclwh12_14);
IkReal x170=((0.00122519488725892)*gclwh14_6);
IkReal x171=((0.56812)*gclwh12_14);
IkReal x172=((8.0e-7)*gclwh8_8);
IkReal x173=((0.56812)*gclwh12_12);
IkReal x174=((0.2840604)*gclwh7_14);
IkReal x175=((1.0)*gclwh6_10);
IkReal x176=((2.0)*gclwh15_10);
IkReal x177=((0.0214381693740059)*rxp0_2);
IkReal x178=((1.0)*gclwh13_11);
IkReal x179=((0.00185555752610799)*r01);
IkReal x180=((0.00248592539078297)*r01);
IkReal x181=((0.38056)*gclwh15_6);
IkReal x182=((2.0)*gclwh8_11);
IkReal x183=((4.0e-7)*gclwh14_6);
IkReal x184=(pp*r01);
IkReal x185=((4.0e-7)*gclwh8_8);
IkReal x186=(gclwh15_12*r01);
IkReal x187=((8.0e-7)*gclwh13_8);
IkReal x188=((0.56812)*gclwh15_14);
IkReal x189=((9.14402617786561e-8)*rxp0_2);
IkReal x190=((2.0)*gclwh6_10);
IkReal x191=((0.22860065444664)*gclwh1_10);
IkReal x192=((0.00122519488725892)*r11);
IkReal x193=((0.18756)*gclwh9_6);
IkReal x194=((4.0e-7)*gclwh9_8);
IkReal x195=((0.2840596)*gclwh8_12);
IkReal x196=((0.28406)*gclwh9_14);
IkReal x197=((0.0130645648033581)*r01);
IkReal x198=((0.2840604)*gclwh12_14);
IkReal x199=((0.00122519488725892)*r01);
IkReal x200=((2.0)*gclwh12_11);
IkReal x201=((0.18756)*gclwh14_6);
IkReal x202=((0.28406)*gclwh14_14);
IkReal x203=((0.56812)*gclwh6_14);
IkReal x204=((0.18756)*gclwh13_8);
IkReal x205=((0.09378)*gclwh14_6);
IkReal x206=((0.00497185078156595)*r11);
IkReal x207=((0.2840596)*gclwh15_12);
IkReal x208=((8.0e-7)*gclwh15_6);
IkReal x209=(gclwh1_8*npx);
IkReal x210=(gclwh13_8*pp);
IkReal x211=((0.0434981325281067)*rxp1_2);
IkReal x212=(gclwh2_14*npy);
IkReal x213=((0.18756)*gclwh15_8);
IkReal x214=((0.0130645648033581)*r11);
IkReal x215=((0.1420298)*gclwh13_12);
IkReal x216=((5.22582592134323e-9)*r00);
IkReal x217=((0.2840604)*gclwh13_12);
IkReal x218=((0.2840604)*gclwh15_14);
IkReal x219=((0.00497185078156595)*r00);
IkReal x220=((1.0)*gclwh8_10);
IkReal x221=((8.0e-7)*gclwh14_6);
IkReal x222=((0.38056)*gclwh13_8);
IkReal x223=(gclwh2_6*npy);
IkReal x224=(gclwh3_6*npy);
IkReal x225=((0.2840596)*gclwh14_12);
IkReal x226=((0.00248592539078297)*r00);
IkReal x227=((0.00371112027804189)*r11);
IkReal x228=((0.0130645648033581)*r00);
IkReal x229=(gclwh0_8*npx);
IkReal x230=((0.00122519488725892)*r00);
IkReal x231=((0.0214381693740059)*gclwh3_8);
IkReal x232=((0.18756)*gclwh13_6);
IkReal x233=(gclwh2_6*rxp1_2);
IkReal x234=(gclwh7_8*r10);
IkReal x235=((0.18756)*gclwh7_8);
IkReal x236=((4.0e-7)*gclwh14_8);
IkReal x237=((2.0)*gclwh7_11);
IkReal x238=((4.0e-7)*gclwh15_6);
IkReal x239=((0.38056)*gclwh12_8);
IkReal x240=((8.0e-7)*gclwh7_8);
IkReal x241=((0.56812)*gclwh9_12);
IkReal x242=((0.2840604)*pp);
IkReal x243=((0.22860065444664)*npx);
IkReal x244=((0.1420298)*gclwh14_14);
IkReal x245=((2.0)*gclwh7_10);
IkReal x246=((0.2840596)*gclwh9_12);
IkReal x247=((9.14402617786561e-8)*rxp1_2);
IkReal x248=((0.38056)*gclwh14_8);
IkReal x249=((0.1420298)*gclwh9_12);
IkReal x250=((0.56812)*gclwh14_14);
IkReal x251=((0.2840604)*gclwh8_14);
IkReal x252=(gclwh6_6*pp);
IkReal x253=((0.1420298)*pp);
IkReal x254=((0.18756)*gclwh12_8);
IkReal x255=((0.1420298)*gclwh7_12);
IkReal x256=((0.00248592539078297)*r10);
IkReal x257=((0.00371112550386781)*r00);
IkReal x258=(gclwh8_14*r01);
IkReal x259=((0.56812)*gclwh14_12);
IkReal x260=((0.00185555752610799)*r11);
IkReal x261=((0.2840596)*gclwh7_12);
IkReal x262=((0.56812)*gclwh9_14);
IkReal x263=(gclwh12_6*pp);
IkReal x264=((5.22582592134323e-9)*r10);
IkReal x265=((0.18756)*gclwh6_6);
IkReal x266=((0.2840596)*gclwh12_12);
IkReal x267=((8.0e-7)*gclwh9_8);
IkReal x268=((2.0)*gclwh12_10);
IkReal x269=((0.22860065444664)*npy);
IkReal x270=((8.0e-7)*gclwh8_6);
IkReal x271=((0.1420298)*gclwh7_14);
IkReal x272=((0.38056)*gclwh7_8);
IkReal x273=((8.0e-7)*gclwh15_8);
IkReal x274=((0.1420298)*gclwh9_14);
IkReal x275=((0.22860065444664)*rxp1_2);
IkReal x276=((0.28406)*gclwh14_12);
IkReal x277=((0.00185556275193391)*r11);
IkReal x278=((0.09378)*gclwh9_8);
IkReal x279=((1.0)*gclwh15_11);
IkReal x280=((0.09378)*gclwh14_8);
IkReal x281=((4.0e-7)*gclwh15_8);
IkReal x282=((2.0)*gclwh13_11);
IkReal x283=((0.18756)*gclwh8_8);
IkReal x284=((4.0e-7)*gclwh9_6);
IkReal x285=((0.1420298)*gclwh8_14);
IkReal x286=(gclwh3_12*npy);
IkReal x287=((0.22860065444664)*rxp0_2);
IkReal x288=((0.2840596)*gclwh14_14);
IkReal x289=(gclwh0_6*npx);
IkReal x290=((0.09378)*gclwh9_6);
IkReal x291=((8.0e-7)*gclwh6_8);
IkReal x292=((0.09378)*gclwh8_8);
IkReal x293=(gclwh7_14*r10);
IkReal x294=((0.18756)*gclwh15_6);
IkReal x295=((0.28406)*gclwh7_12);
IkReal x296=(gclwh2_8*rxp1_2);
IkReal x297=((0.28406)*gclwh15_12);
IkReal x298=((0.28406)*gclwh8_14);
IkReal x299=((0.18756)*gclwh12_6);
IkReal x300=((0.2840596)*gclwh13_12);
IkReal x301=((0.56812)*gclwh7_14);
IkReal x302=((0.28406)*pp);
IkReal x303=((0.2840604)*gclwh14_14);
IkReal x304=((0.38056)*gclwh8_8);
IkReal x305=((0.19028)*r10);
IkReal x306=((0.18756)*gclwh14_8);
IkReal x307=((0.18756)*gclwh8_6);
IkReal x308=((2.0)*gclwh6_11);
IkReal x309=((0.09378)*gclwh15_8);
IkReal x310=((2.0)*gclwh14_11);
IkReal x311=((0.00371112550386781)*r10);
IkReal x312=(gclwh7_6*pp);
IkReal x313=((0.28406)*gclwh7_14);
IkReal x314=((8.0e-7)*gclwh13_6);
IkReal x315=((2.0)*gclwh14_10);
IkReal x316=((0.38056)*gclwh15_8);
IkReal x317=((8.0e-7)*gclwh12_8);
IkReal x318=((2.0)*gclwh13_10);
IkReal x319=((0.18756)*gclwh9_8);
IkReal x320=((0.2840604)*gclwh7_12);
IkReal x321=((0.2840604)*gclwh14_12);
IkReal x322=((0.56812)*gclwh8_12);
IkReal x323=((0.2840596)*gclwh15_14);
IkReal x324=((8.0e-7)*gclwh6_6);
IkReal x325=((0.56812)*gclwh13_12);
IkReal x326=(gclwh3_10*x269);
IkReal x327=(gclwh7_10*x135);
IkReal x328=(npx*x191);
IkReal x329=(gclwh9_10*x84);
IkReal x330=(gclwh13_10*x99);
IkReal x331=(gclwh2_10*x275);
IkReal x332=(gclwh15_10*x184);
IkReal x333=(gclwh14_10*x214);
IkReal x334=(gclwh0_10*x287);
IkReal x335=(gclwh14_10*x84);
IkReal x336=(gclwh12_10*x135);
IkReal x337=(gclwh12_10*x126);
IkReal x338=(gclwh6_10*x228);
IkReal x339=(gclwh9_10*x214);
IkReal x340=(gclwh13_10*x228);
IkReal x341=(gclwh8_10*x197);
IkReal x342=(gclwh7_10*x126);
IkReal x343=(gclwh15_10*x197);
IkReal x344=(gclwh8_11*x197);
IkReal x345=(gclwh13_11*x228);
IkReal x346=(gclwh15_11*x197);
IkReal x347=(gclwh6_11*x228);
IkReal x348=(gclwh6_11*x99);
IkReal x349=(gclwh8_11*x184);
IkReal x350=(gclwh7_11*x126);
IkReal x351=(gclwh9_11*x214);
IkReal x352=(gclwh1_11*x243);
IkReal x353=(gclwh12_11*x126);
IkReal x354=(gclwh2_11*x275);
IkReal x355=(gclwh3_11*x269);
IkReal x356=(gclwh14_11*x214);
IkReal x357=(rxp0_2*x96);
IkReal x358=(gclwh15_10*x214);
IkReal x359=(gclwh6_10*x126);
IkReal x360=(gclwh13_10*x135);
IkReal x361=(gclwh13_10*x126);
IkReal x362=(gclwh8_10*x214);
IkReal x363=(gclwh15_10*x84);
IkReal x364=(gclwh12_10*x228);
IkReal x365=(gclwh14_10*x197);
IkReal x366=(gclwh3_10*x275);
IkReal x367=(rxp0_2*x191);
IkReal x368=((0.0130645648033581)*x161);
IkReal x369=(gclwh0_10*x243);
IkReal x370=(gclwh7_10*x228);
IkReal x371=(gclwh2_10*x269);
IkReal x372=(gclwh9_11*x197);
IkReal x373=(gclwh7_11*x99);
IkReal x374=(gclwh12_11*x99);
IkReal x375=(gclwh9_11*x184);
IkReal x376=(npx*x96);
IkReal x377=(gclwh14_11*x184);
IkReal x378=(gclwh2_11*x269);
IkReal x379=(gclwh6_11*x135);
IkReal x380=(gclwh8_11*x84);
IkReal x381=(gclwh7_11*x228);
IkReal x382=(gclwh12_11*x228);
IkReal x383=(gclwh8_11*x214);
IkReal x384=(gclwh15_11*x214);
IkReal x385=(gclwh13_11*x126);
IkReal x386=(gclwh3_11*x275);
IkReal x387=(gclwh1_11*x287);
IkReal x388=(gclwh14_11*x197);
IkReal x389=(gclwh6_11*x126);
IkReal x390=((0.2840604)*gclwh8_12*npy);
IkReal x391=((0.19028)*x184);
IkReal x392=(x114*x190);
IkReal x393=(x104*x149);
IkReal x394=(x175*x99);
IkReal x395=(x315*x82);
IkReal x396=(x268*x92);
IkReal x397=(x184*x220);
IkReal x398=(x151*x82);
IkReal x399=(x104*x176);
IkReal x400=(x114*x318);
IkReal x401=(x245*x92);
IkReal x402=(x105*x82);
IkReal x403=(x114*x282);
IkReal x404=(x237*x92);
IkReal x405=(x310*x82);
IkReal x406=(x200*x92);
IkReal x407=(x104*x83);
IkReal x408=(x184*x279);
IkReal x409=((1.0)*gclwh14_11*x84);
IkReal x410=(x114*x308);
IkReal x411=(x178*x99);
IkReal x412=((1.0)*gclwh12_11*x135);
IkReal x413=(x104*x182);
IkReal x414=((1.0)*gclwh9_11*x84);
IkReal x415=((1.0)*gclwh7_11*x135);
IkReal x416=(x104*x315);
IkReal x417=(x114*x268);
IkReal x418=(x190*x92);
IkReal x419=(x104*x151);
IkReal x420=(x149*x82);
IkReal x421=(x114*x245);
IkReal x422=(x135*x175);
IkReal x423=((1.0)*gclwh14_10*x184);
IkReal x424=(x220*x84);
IkReal x425=((1.0)*gclwh12_10*x99);
IkReal x426=(x176*x82);
IkReal x427=(x318*x92);
IkReal x428=((1.0)*pp*x161);
IkReal x429=((1.0)*gclwh7_10*x99);
IkReal x430=(x282*x92);
IkReal x431=(x82*x83);
IkReal x432=(x104*x105);
IkReal x433=(x308*x92);
IkReal x434=(x135*x178);
IkReal x435=(x114*x237);
IkReal x436=(x104*x310);
IkReal x437=(x182*x82);
IkReal x438=(x114*x200);
IkReal x439=(x279*x84);
IkReal x440=(x380+x381+x379+x378+x377+x376+x375+x374+x373+x372+x430+x431);
IkReal x441=(x371+x370+x368+x369+x429+x428+x427+x426+x425+x424+x423+x422);
IkReal x442=(x333+x332+x331+x330+x337+x336+x335+x334+x326+x327+x328+x329+x393+x392);
IkReal x443=(x351+x350+x346+x347+x344+x345+x348+x349+x403+x402+x405+x404+x407+x406);
IkReal x444=(x353+x352+x355+x354+x357+x356+x409+x408+x412+x413+x410+x411+x414+x415);
IkReal x445=(x339+x338+x342+x343+x340+x341+x395+x394+x397+x396+x399+x398+x401+x400);
IkReal x446=(x359+x358+x360+x361+x362+x363+x364+x365+x366+x367+x416+x417+x418+x419+x421+x420);
IkReal x447=(x386+x387+x384+x385+x382+x383+x388+x389+x438+x439+x432+x433+x434+x435+x436+x437);
op[0]=x79;
op[1]=x79;
op[2]=-0.28406;
op[3]=-0.28406;
op[4]=x80;
op[5]=x80;
op[6]=((-0.05637905611204)+(((-1.0)*x160*x92))+((gclwh12_6*x256))+(((-1.0)*x445))+(((-0.00185556275193391)*x120))+(((0.19028)*gclwh12_6*x135))+((x104*x251))+(((-1.0)*gclwh6_6*x226))+(((-0.00185556275193391)*x293))+(((-1.0)*x303*x82))+(((0.19028)*pp*x127))+(((0.0324681966711872)*x97))+(((0.0434981325281067)*x224))+((x114*x122))+(((0.1420302)*gclwh14_14*x84))+(((0.00185556275193391)*x128))+(((-1.0)*gclwh13_6*x226))+(((-1.0)*x165*x82))+(((-1.0)*x143*x82))+(((-1.0)*gclwh9_14*x277))+(((-1.0)*r10*x88))+(((0.19028)*gclwh14_6*x84))+((x164*x95))+(((-0.19028)*pp*x141))+(((-1.0)*x252*x95))+(((0.1420302)*gclwh9_14*x84))+(((-1.0)*gclwh8_14*x148))+(((-1.0)*x119*x258))+((x104*x140))+(((-1.0)*gclwh6_14*x107))+(((-1.0)*gclwh15_6*x180))+x442+(((-1.0)*x114*x132))+((gclwh15_6*x391))+(((-1.0)*x104*x181))+(((-1.0)*x121*x92))+(((-1.0)*x104*x218))+(((-0.1420302)*gclwh6_14*x99))+(((-1.0)*x174*x92))+((gclwh14_14*x277))+((gclwh0_6*x103))+((x119*x128))+((x119*x120))+(((0.0434981325281067)*x147))+(((0.19028)*gclwh9_6*x84))+((x114*x146))+((gclwh2_6*x211))+((x119*x293))+(((-1.0)*x106*x82))+(((-0.00248592539078297)*x141))+(((-1.0)*x198*x92))+((gclwh14_6*x163))+(((-1.0)*gclwh9_6*x163)));
op[7]=((((-1.0)*x444))+(((-1.0)*gclwh15_12*x148))+(((-1.0)*x104*x137))+(((-1.0)*x239*x92))+(((-1.0)*x320*x92))+(((0.0434981325281067)*x209))+((gclwh14_12*x277))+(((-1.0)*x272*x92))+(((-1.0)*gclwh13_8*x226))+((gclwh2_8*x211))+(((0.1420302)*gclwh13_12*x99))+(((-1.0)*x248*x82))+((x114*x125))+(((-1.0)*gclwh9_8*x163))+(((0.19028)*gclwh7_8*x135))+(((-1.0)*x104*x316))+(((0.0434981325281067)*gclwh3_8*npy))+(((0.19028)*gclwh14_8*x84))+((gclwh15_8*x391))+(((0.1420302)*gclwh9_12*x84))+((gclwh0_8*x103))+(((-1.0)*gclwh8_8*x391))+(((0.00185556275193391)*x131))+(((-1.0)*x142*x92))+((x210*x95))+(((-1.0)*gclwh8_8*x180))+((gclwh12_8*x256))+((x104*x304))+((x119*x168))+x443+(((0.0324681966711872)*x286))+((gclwh14_8*x163))+((x133*x305))+(((-1.0)*x117*x82))+(((-1.0)*x167*x82))+((x119*x186))+(((-1.0)*gclwh15_8*x180))+(((-1.0)*x114*x217))+(((-0.00248592539078297)*x234))+(((-1.0)*gclwh8_12*x148))+(((-1.0)*x119*x153))+(((-1.0)*gclwh9_12*x277))+(((0.1420302)*gclwh14_12*x84))+(((-0.00185556275193391)*x168))+(((-1.0)*gclwh6_8*x226))+(((0.19028)*gclwh9_8*x84))+(((-1.0)*x114*x222))+(((-1.0)*gclwh13_12*x107))+((x119*x131))+(((0.2840604)*gclwh8_12*x104))+(((-1.0)*x321*x82))+(((-1.0)*x89*x95)));
op[8]=((0.080690045)+(((-1.0)*gclwh6_6*x216))+((gclwh15_14*x109))+(((-4.0e-7)*pp*x141))+((x301*x92))+((x100*x99))+(((-1.0)*gclwh14_14*x227))+(((-1.0)*x114*x203))+(((-1.0)*gclwh8_6*x81))+(((-1.0)*x104*x208))+(((-1.0)*x114*x314))+(((-1.0)*x128*x302))+(((-1.0)*x135*x313))+(((-0.0649363019021127)*x97))+((x184*x298))+((x111*x263))+(((-1.0)*gclwh15_6*x81))+(((-4.0e-7)*gclwh6_6*x99))+((x184*x238))+(((9.14402617786561e-8)*x233))+(((-5.22582592134323e-9)*x127))+((x183*x84))+((x250*x82))+((gclwh6_14*x124))+(((-1.0)*x120*x302))+((x111*x312))+((gclwh9_14*x227))+((gclwh14_6*x94))+((x104*x188))+((gclwh12_6*x264))+(((-1.0)*gclwh13_6*x216))+((gclwh0_6*x189))+(((-1.0)*x196*x84))+(((9.14402617786561e-8)*x224))+((x171*x92))+(((-1.0)*gclwh9_6*x94))+(((-1.0)*x92*x93))+(((0.00371112027804189)*x293))+((x114*x324))+((x284*x84))+(((-1.0)*x108*x82))+(((-1.0)*x138*x92))+(((-1.0)*x202*x84))+((gclwh8_14*x109))+(((9.14402617786561e-8)*x147))+((x104*x270))+(((-0.00371112027804189)*x128))+(((-1.0)*x104*x162))+(((0.28406)*gclwh6_14*x99))+(((-1.0)*x221*x82))+((x262*x82)));
op[9]=(((x173*x92))+(((-1.0)*gclwh6_8*x216))+((x111*x133))+(((-1.0)*x276*x84))+((x150*x92))+((gclwh8_12*x109))+(((-1.0)*x158*x82))+((gclwh13_12*x124))+(((-1.0)*gclwh14_12*x227))+((gclwh12_8*x264))+(((-1.0)*gclwh9_8*x94))+(((-1.0)*gclwh15_8*x81))+(((-1.0)*x114*x187))+(((-1.0)*x131*x302))+((x241*x82))+(((-5.22582592134323e-9)*x234))+(((0.00371112027804189)*x168))+((x104*x172))+(((-1.0)*x118*x84))+((gclwh2_8*x247))+(((-1.0)*x317*x92))+(((-4.0e-7)*r00*x89))+((x114*x291))+((x111*x157))+(((-1.0)*x104*x273))+(((-1.0)*x184*x185))+((x194*x84))+(((9.14402617786561e-8)*x209))+((x236*x84))+((x104*x145))+(((-1.0)*x135*x295))+(((-0.0649363019021127)*x286))+((gclwh14_8*x94))+((x114*x325))+((x184*x281))+(((4.0e-7)*gclwh13_8*x99))+((x153*x302))+((gclwh15_12*x109))+(((-1.0)*x136*x99))+(((-1.0)*gclwh13_8*x216))+((x259*x82))+(((-1.0)*gclwh8_8*x81))+(((-1.0)*x267*x82))+((npy*x116))+(((-1.0)*x184*x297))+(((-0.00371112027804189)*x131))+((gclwh9_12*x227))+(((-1.0)*x104*x322))+(((9.14402617786561e-8)*x112))+(((-1.0)*x240*x92)));
op[10]=((-0.02896715248804)+(((-0.09378)*gclwh13_6*x99))+(((-1.0)*x445))+(((-1.0)*x290*x84))+((gclwh15_6*x199))+(((-1.0)*r11*x170))+(((-1.0)*x205*x84))+(((-1.0)*x115*x92))+(((-1.0)*x104*x307))+((x193*x82))+(((-0.00185555752610799)*x293))+(((-1.0)*gclwh0_6*x177))+(((-1.0)*x263*x90))+(((-0.0214381693740059)*x233))+(((0.09378)*gclwh6_6*x99))+(((-1.0)*x130*x184))+(((-1.0)*x114*x265))+(((-1.0)*gclwh9_14*x260))+(((0.09378)*pp*x141))+((x114*x139))+(((0.00122519488725892)*x141))+(((-1.0)*gclwh8_14*x179))+(((-0.0214381693740059)*x147))+((gclwh9_6*x192))+((x135*x271))+(((-1.0)*x169*x92))+(((-1.0)*gclwh12_6*x156))+((x274*x84))+(((-1.0)*x184*x285))+(((-0.00185555752610799)*x120))+x442+((x104*x294))+(((-0.1420298)*gclwh6_14*x99))+((gclwh13_6*x230))+((x201*x82))+(((-1.0)*x288*x82))+((x114*x232))+((x120*x253))+((gclwh14_14*x260))+(((-1.0)*x312*x90))+((x128*x253))+((x299*x92))+(((-1.0)*gclwh6_14*x98))+((x244*x84))+(((0.00185555752610799)*x128))+(((-0.0214381693740059)*x224))+((gclwh6_6*x230))+(((-1.0)*x152*x82))+((x104*x91))+((x123*x92))+(((-1.0)*x104*x323))+(((0.0324681052309254)*x97))+(((0.00122519488725892)*x127)));
op[11]=((((-1.0)*x280*x84))+((x84*x85))+(((-1.0)*x246*x82))+(((-1.0)*x444))+((x306*x82))+((x235*x92))+(((-1.0)*x104*x207))+((gclwh9_8*x192))+(((-1.0)*gclwh15_12*x179))+(((-0.0214381693740059)*x296))+((x254*x92))+((gclwh14_12*x260))+((x249*x84))+(((-1.0)*x157*x90))+((x184*x292))+((x131*x253))+(((-1.0)*x153*x253))+(((-0.0214381693740059)*x209))+((gclwh15_8*x199))+(((-1.0)*npy*x231))+(((-1.0)*x225*x82))+(((-1.0)*x110*x114))+((gclwh13_8*x230))+((x104*x195))+((x215*x99))+((gclwh8_8*x199))+(((-1.0)*x104*x283))+(((-1.0)*gclwh14_8*x192))+(((-1.0)*gclwh12_8*x156))+((gclwh6_8*x230))+((x319*x82))+x443+((x114*x204))+(((-1.0)*x133*x90))+(((-0.0214381693740059)*x112))+(((-0.00185555752610799)*x153))+(((-1.0)*x184*x309))+((gclwh7_8*x156))+(((-1.0)*x261*x92))+((x135*x255))+(((-1.0)*x114*x300))+(((0.0324681052309254)*x286))+((x104*x213))+(((0.09378)*r00*x89))+(((-0.00185555752610799)*x168))+(((-0.09378)*gclwh13_8*x99))+(((-1.0)*x266*x92))+(((-1.0)*r00*x86))+(((-1.0)*gclwh9_12*x260))+(((-1.0)*x278*x84))+(((0.00185555752610799)*x131))+((x159*x184)));
op[12]=(((gclwh12_14*x107))+(((-1.0)*x119*x129))+(((-1.0)*x441))+((x114*x160))+((gclwh8_14*x277))+((x114*x174))+((gclwh14_6*x180))+((gclwh14_14*x148))+(((0.19028)*gclwh15_6*x84))+((gclwh13_6*x256))+(((-1.0)*gclwh7_14*x107))+((gclwh8_6*x163))+(((0.19028)*gclwh13_6*x135))+((gclwh1_6*x103))+(((-1.0)*gclwh14_14*r01*x119))+(((-1.0)*gclwh9_6*x391))+((x114*x198))+(((-0.19028)*gclwh8_6*x84))+(((-1.0)*x263*x95))+((x146*x92))+((gclwh15_14*x277))+((x114*x121))+((gclwh3_6*x211))+((gclwh6_6*x256))+((x104*x165))+(((0.00185556275193391)*x129))+(((-0.1420302)*gclwh8_14*x84))+(((-1.0)*gclwh9_14*r01*x119))+((x104*x303))+(((-0.0324681966711872)*x212))+(((-0.1420302)*gclwh7_14*x99))+((x104*x143))+((x251*x82))+x446+((x140*x82))+(((-1.0)*gclwh9_14*x148))+(((-1.0)*x312*x95))+(((0.1420302)*gclwh15_14*x84))+(((-1.0)*x132*x92))+((x104*x106))+(((-1.0)*gclwh9_6*x180))+(((-0.0434981325281067)*x223))+(((-1.0)*gclwh14_6*x391))+((x122*x92))+(((-0.19028)*gclwh6_6*x135))+(((-1.0)*x218*x82))+((gclwh15_6*x163))+(((-1.0)*r00*x88))+(((-0.1420302)*gclwh12_14*x99))+(((-1.0)*x181*x82))+((gclwh12_6*x226))+(((-0.0434981325281067)*x289)));
op[13]=((0.05637905611204)+((gclwh1_8*x103))+(((-1.0)*x447))+((gclwh3_8*x211))+(((-1.0)*gclwh9_12*x148))+(((-1.0)*gclwh7_8*x226))+(((-1.0)*gclwh9_8*x180))+((gclwh15_8*x163))+(((-1.0)*x157*x95))+((gclwh6_8*x256))+((x125*x92))+((gclwh8_8*x163))+(((0.2840604)*gclwh8_12*x82))+(((-1.0)*gclwh9_12*r01*x119))+(((0.00185556275193391)*x155))+(((-1.0)*gclwh14_12*r01*x119))+((x104*x167))+((gclwh12_8*x226))+(((-1.0)*x222*x92))+(((0.19028)*gclwh13_8*x135))+(((-0.1420302)*gclwh8_12*x84))+(((-0.1420302)*gclwh12_12*x99))+((gclwh13_8*x256))+((x119*x155))+(((0.1420302)*gclwh15_12*x84))+(((-1.0)*x305*x89))+((gclwh15_12*x277))+(((0.00185556275193391)*x87))+x440+(((-1.0)*x133*x95))+((gclwh12_12*x107))+((gclwh14_12*x148))+((x114*x239))+((x114*x320))+(((-0.1420302)*gclwh7_12*x99))+((x304*x82))+(((-1.0)*gclwh7_12*x107))+((x104*x117))+((gclwh14_8*x180))+((x104*x248))+(((-1.0)*x316*x82))+((x104*x321))+(((-0.0434981325281067)*x229))+(((-1.0)*x137*x82))+(((0.19028)*gclwh15_8*x84))+(((-1.0)*gclwh14_8*x391))+(((-1.0)*x217*x92))+((x114*x272))+(((-1.0)*gclwh9_8*x391))+((x114*x142))+(((-0.19028)*gclwh8_8*x84))+(((-0.0434981325281067)*x101))+(((0.0324681966711872)*x113)));
op[14]=((((-1.0)*x208*x82))+(((-1.0)*gclwh14_14*x109))+(((0.0649363019021127)*x212))+((x104*x221))+(((-9.14402617786561e-8)*x289))+(((-1.0)*x203*x92))+((gclwh6_6*x264))+((x313*x99))+(((-1.0)*gclwh8_14*x227))+(((-1.0)*x314*x92))+(((-4.0e-7)*gclwh7_6*x99))+(((-1.0)*x114*x171))+(((-1.0)*gclwh12_14*x124))+((gclwh13_6*x264))+((gclwh9_14*x109))+((x114*x93))+((gclwh12_6*x216))+(((-9.14402617786561e-8)*x223))+((x184*x196))+((x114*x138))+(((-1.0)*x104*x262))+(((-1.0)*x111*x252))+((gclwh14_6*x81))+((x184*x202))+(((-1.0)*gclwh7_6*x216))+(((-1.0)*x184*x284))+(((-4.0e-7)*gclwh8_6*x84))+((x238*x84))+((gclwh1_6*x189))+(((-1.0)*gclwh9_6*x81))+((x270*x82))+(((-1.0)*x162*x82))+((gclwh7_14*x124))+((x324*x92))+((gclwh3_6*x247))+(((-0.28406)*gclwh15_14*x84))+((x104*x108))+((gclwh8_6*x94))+(((-1.0)*x114*x301))+(((-1.0)*x183*x184))+(((-1.0)*x104*x250))+(((-0.00371112027804189)*x129))+((x129*x302))+((x100*x135))+((x298*x84))+(((-1.0)*gclwh15_14*x227))+(((-4.0e-7)*gclwh12_6*x99))+((gclwh15_6*x94))+((x188*x82))+(((0.28406)*gclwh12_14*x99)));
op[15]=((-0.080690045)+(((-1.0)*x135*x136))+((x172*x82))+(((-0.00371112027804189)*x155))+(((-1.0)*gclwh12_12*x124))+(((-1.0)*x273*x82))+((gclwh13_8*x264))+((rxp1_2*x116))+(((-1.0)*x184*x236))+(((-0.00371112027804189)*x87))+(((-9.14402617786561e-8)*x101))+(((0.28406)*gclwh8_12*x84))+(((-1.0)*x114*x150))+((gclwh7_12*x124))+(((-1.0)*gclwh9_8*x81))+(((-1.0)*gclwh14_12*x109))+((x111*x210))+(((-1.0)*x114*x173))+(((-1.0)*x297*x84))+(((-9.14402617786561e-8)*x229))+(((-1.0)*x111*x89))+((x291*x92))+(((-1.0)*x104*x241))+((x104*x158))+((gclwh14_8*x81))+((x145*x82))+(((-1.0)*x184*x194))+(((-1.0)*gclwh7_8*x216))+((gclwh15_8*x94))+(((-1.0)*gclwh15_12*x227))+((x104*x267))+((gclwh9_12*x109))+(((-0.0649363019021127)*x113))+((x118*x184))+(((-4.0e-7)*gclwh12_8*x99))+(((0.28406)*gclwh12_12*x99))+(((-1.0)*x322*x82))+((x184*x276))+((gclwh1_8*x189))+((gclwh6_8*x264))+((x281*x84))+((x295*x99))+((gclwh12_8*x216))+(((-1.0)*x187*x92))+(((-1.0)*x104*x259))+(((-4.0e-7)*gclwh7_8*x99))+(((-1.0)*x185*x84))+((x114*x240))+((x114*x317))+((x325*x92))+((gclwh8_8*x94)));
op[16]=(((x104*x288))+(((-1.0)*x441))+((x114*x169))+((gclwh8_14*x260))+(((-0.1420298)*gclwh12_14*x99))+((x82*x91))+((x252*x90))+(((0.1420298)*gclwh15_14*x84))+((gclwh14_14*x179))+(((-1.0)*x104*x201))+((x114*x115))+((gclwh15_14*x260))+(((0.09378)*gclwh12_6*x99))+((x184*x290))+(((-1.0)*gclwh8_6*x192))+(((-1.0)*x271*x99))+(((-1.0)*x164*x90))+(((-1.0)*r01*x170))+(((-1.0)*gclwh6_6*x156))+(((-1.0)*x184*x274))+(((-1.0)*x184*x244))+(((0.0214381693740059)*x223))+(((-1.0)*gclwh9_14*x179))+((x184*x205))+((gclwh9_6*x199))+((x104*x152))+(((-1.0)*gclwh1_6*x177))+((x139*x92))+x446+(((-1.0)*x129*x253))+(((-1.0)*x307*x82))+(((0.0214381693740059)*x289))+(((-1.0)*gclwh15_6*x192))+(((-1.0)*x104*x193))+(((0.09378)*gclwh7_6*x99))+(((-0.0324681052309254)*x212))+(((-1.0)*gclwh13_6*x156))+(((-1.0)*x114*x123))+(((-1.0)*gclwh12_6*x230))+(((-1.0)*x285*x84))+((x294*x82))+(((-0.0214381693740059)*gclwh3_6*rxp1_2))+(((0.09378)*gclwh8_6*x84))+(((-1.0)*x323*x82))+((x232*x92))+(((-1.0)*gclwh7_14*x98))+(((-1.0)*x265*x92))+(((-1.0)*x130*x84))+(((0.00185555752610799)*x129))+((gclwh7_6*x230))+((gclwh12_14*x98))+(((-1.0)*x114*x299)));
op[17]=((0.02896715248804)+(((-1.0)*gclwh13_8*x156))+(((-1.0)*x114*x235))+(((-1.0)*x447))+((gclwh7_8*x230))+((x89*x90))+(((-1.0)*x104*x306))+((gclwh9_8*x199))+((x104*x225))+((x135*x215))+((r10*x86))+(((0.00185555752610799)*x87))+(((0.0214381693740059)*x101))+(((-1.0)*gclwh9_12*x179))+(((-1.0)*gclwh7_12*x98))+(((-1.0)*x104*x319))+(((0.09378)*gclwh12_8*x99))+(((-1.0)*gclwh8_8*x192))+(((-1.0)*x184*x85))+(((-1.0)*x210*x90))+(((-1.0)*x184*x249))+((gclwh15_12*x260))+(((0.0214381693740059)*x229))+((x195*x82))+((x204*x92))+(((-1.0)*x110*x92))+(((-1.0)*gclwh14_8*x199))+(((-1.0)*x283*x82))+(((-1.0)*gclwh12_8*x230))+x440+(((0.09378)*gclwh7_8*x99))+(((-1.0)*x300*x92))+(((-1.0)*gclwh6_8*x156))+((x159*x84))+((x292*x84))+(((-1.0)*gclwh15_8*x192))+(((-1.0)*gclwh1_8*x177))+((x184*x280))+(((-0.1420298)*gclwh8_12*x84))+(((-1.0)*x309*x84))+((x104*x246))+((x184*x278))+(((-0.1420298)*gclwh12_12*x99))+(((-1.0)*x114*x254))+((gclwh14_12*x179))+((x213*x82))+((gclwh12_12*x98))+(((-1.0)*rxp1_2*x231))+(((-1.0)*x255*x99))+((x114*x266))+((x114*x261))+(((-1.0)*x207*x82))+(((0.0324681052309254)*x113)));
op[18]=0;
op[19]=x79;
op[20]=0;
op[21]=-0.28406;
op[22]=0;
op[23]=x80;
op[24]=-0.38056;
op[25]=-0.38056;
op[26]=-8.0e-7;
op[27]=-8.0e-7;
op[28]=0.18756;
op[29]=0.18756;
op[30]=((((-0.76112)*gclwh6_14*x114))+(((-0.5681208)*gclwh14_6*x82))+(((-1.0)*x141*x242))+(((0.2840604)*gclwh13_6*x99))+(((0.76112)*gclwh9_14*x82))+(((-1.0)*gclwh15_6*x134))+((gclwh7_14*x144))+(((-0.5681208)*gclwh7_6*x92))+(((-0.5681208)*gclwh9_6*x82))+(((-1.0)*gclwh6_6*x257))+(((0.00497185078156595)*x258))+(((0.2840604)*gclwh12_6*x135))+(((-0.00371112550386781)*x127))+(((0.0649363933423744)*x147))+(((-0.00497185078156595)*x128))+(((-1.0)*x120*x154))+(((0.0649363933423744)*gclwh0_6*rxp0_2))+(((-1.0)*x128*x154))+(((0.2840604)*gclwh14_6*x84))+(((-0.0869962650562135)*x97))+(((0.0649363933423744)*x233))+((x127*x242))+(((0.5681208)*gclwh8_6*x104))+(((0.5681208)*gclwh6_6*x114))+((gclwh6_14*x219))+((gclwh3_6*x102))+(((0.38056)*gclwh6_14*x99))+((gclwh12_6*x311))+(((0.2840604)*gclwh9_6*x84))+(((-1.0)*gclwh13_6*x257))+((gclwh9_14*x206))+(((0.2840604)*gclwh15_6*x184))+(((0.76112)*gclwh14_14*x82))+(((-0.38056)*gclwh9_14*x84))+(((-0.76112)*gclwh8_14*x104))+(((-0.5681208)*gclwh15_6*x104))+(((-0.2840604)*gclwh6_6*x99))+(((-0.38056)*gclwh14_14*x84))+(((-1.0)*gclwh8_6*x134))+(((0.76112)*gclwh15_14*x104))+((x154*x258))+(((-1.0)*gclwh14_14*x206))+(((0.76112)*gclwh12_14*x92))+(((-0.5681208)*gclwh12_6*x92))+(((-0.38056)*gclwh7_14*x135))+(((0.76112)*gclwh7_14*x92))+(((0.00497185078156595)*x120))+((gclwh14_6*x166))+(((-0.5681208)*gclwh13_6*x114))+(((-1.0)*gclwh9_6*x166)));
op[31]=((((0.0649363933423744)*x112))+((x153*x154))+(((-1.0)*x131*x154))+((gclwh13_12*x219))+(((0.76112)*gclwh14_12*x82))+(((-0.38056)*gclwh9_12*x84))+(((0.0649363933423744)*x296))+(((0.76112)*gclwh7_12*x92))+(((-0.2840604)*r00*x89))+(((-0.76112)*gclwh8_12*x104))+((gclwh9_12*x206))+(((-0.00371112550386781)*x234))+(((-1.0)*x154*x186))+(((0.2840604)*gclwh9_8*x84))+(((0.0649363933423744)*x209))+(((-0.00497185078156595)*x131))+(((-1.0)*gclwh9_8*x166))+(((-0.2840604)*gclwh8_8*x184))+(((-1.0)*gclwh13_8*x257))+(((-0.38056)*gclwh13_12*x99))+((gclwh7_12*x144))+(((0.00497185078156595)*x186))+(((0.00497185078156595)*x153))+(((-0.38056)*gclwh7_12*x135))+(((-0.5681208)*gclwh7_8*x92))+(((0.5681208)*gclwh8_8*x104))+(((-1.0)*gclwh8_8*x134))+(((-0.5681208)*gclwh12_8*x92))+(((-0.5681208)*gclwh13_8*x114))+(((0.76112)*gclwh15_12*x104))+(((-0.0869962650562135)*x286))+(((0.2840604)*gclwh7_8*x135))+((gclwh14_8*x166))+((gclwh3_8*x102))+(((0.5681208)*gclwh6_8*x114))+(((0.76112)*gclwh9_12*x82))+(((0.2840604)*r10*x133))+(((-1.0)*gclwh14_12*x206))+(((-1.0)*gclwh15_8*x134))+(((0.2840604)*gclwh13_8*x99))+(((-1.0)*gclwh6_8*x257))+(((0.2840604)*gclwh14_8*x84))+(((-0.5681208)*gclwh9_8*x82))+(((-0.5681208)*gclwh15_8*x104))+((gclwh12_8*x311))+(((0.76112)*gclwh13_12*x114))+(((0.2840604)*gclwh15_8*x184))+(((0.76112)*gclwh12_12*x92))+(((-0.38056)*gclwh14_12*x84))+(((-0.5681208)*gclwh14_8*x82)));
IkReal x448=((-0.1420302)+pz);
IkReal x449=((-0.1420298)+pz);
IkReal x450=(npy*px);
IkReal x451=(pp*r11);
IkReal x452=((0.00371111505221597)*gclwh12_6);
IkReal x453=(npx*py);
IkReal x454=(pp*r00);
IkReal x455=(gclwh15_12*r01);
IkReal x456=(gclwh7_14*r10);
IkReal x457=(pp*r10);
IkReal x458=((8.0e-7)*gclwh12_14);
IkReal x459=((0.18756)*pp);
IkReal x460=(npx*px);
IkReal x461=(gclwh1_8*npx);
IkReal x462=(gclwh0_6*rxp0_2);
IkReal x463=((0.00742224055608379)*gclwh15_8);
IkReal x464=((0.18756)*gclwh12_12);
IkReal x465=((8.0e-7)*gclwh15_14);
IkReal x466=((0.00185555752610799)*r00);
IkReal x467=((0.00371112550386781)*r11);
IkReal x468=(gclwh7_6*r10);
IkReal x469=((0.00371111505221597)*r01);
IkReal x470=((1.6e-6)*gclwh15_14);
IkReal x471=(gclwh3_8*npy);
IkReal x472=((1.6e-6)*gclwh12_14);
IkReal x473=((0.5681192)*gclwh12_8);
IkReal x474=((0.56812)*gclwh12_6);
IkReal x475=((0.00185555752610799)*r10);
IkReal x476=(pp*r01);
IkReal x477=((0.00371111505221597)*r11);
IkReal x478=(gclwh8_12*r01);
IkReal x479=((0.0130645648033581)*r10);
IkReal x480=(gclwh0_8*rxp0_2);
IkReal x481=((0.18756)*gclwh12_14);
IkReal x482=(gclwh6_6*r10);
IkReal x483=((1.04516518426865e-8)*r11);
IkReal x484=(gclwh12_8*r10);
IkReal x485=((0.0649363933423744)*rxp0_2);
IkReal x486=((1.13624)*gclwh12_6);
IkReal x487=((0.0649363933423744)*npy);
IkReal x488=((0.0130645648033581)*r11);
IkReal x489=((8.0e-7)*pp);
IkReal x490=(npy*py);
IkReal x491=((0.5681192)*gclwh8_6);
IkReal x492=(gclwh8_6*r01);
IkReal x493=((0.00371112550386781)*r01);
IkReal x494=((0.37512)*gclwh9_14);
IkReal x495=((0.1420298)*pp);
IkReal x496=((0.56812)*gclwh14_6);
IkReal x497=((1.6e-6)*gclwh9_12);
IkReal x498=((1.13624)*gclwh13_8);
IkReal x499=((0.2840596)*gclwh9_6);
IkReal x500=(gclwh15_14*r01);
IkReal x501=(gclwh2_14*rxp1_2);
IkReal x502=((0.00371112027804189)*r10);
IkReal x503=(gclwh7_8*r10);
IkReal x504=((0.00742224055608379)*r00);
IkReal x505=((1.04516518426865e-8)*r01);
IkReal x506=((0.18756)*gclwh7_12);
IkReal x507=((0.00742224055608379)*r11);
IkReal x508=((8.0e-7)*gclwh6_14);
IkReal x509=((0.5681192)*gclwh9_8);
IkReal x510=((1.13624)*gclwh12_8);
IkReal x511=((0.0428763387480119)*gclwh3_12);
IkReal x512=((0.0649362104618509)*rxp1_2);
IkReal x513=((0.00245038977451784)*r11);
IkReal x514=((1.6e-6)*gclwh14_14);
IkReal x515=((0.5681192)*gclwh14_8);
IkReal x516=((0.5681192)*gclwh13_6);
IkReal x517=(gclwh14_12*r01);
IkReal x518=((0.56812)*gclwh7_6);
IkReal x519=((0.00742224055608379)*r01);
IkReal x520=((0.00371112550386781)*r10);
IkReal x521=((8.0e-7)*gclwh14_12);
IkReal x522=((0.37512)*gclwh7_14);
IkReal x523=((0.00371111505221597)*r00);
IkReal x524=(gclwh3_12*rxp1_2);
IkReal x525=(gclwh12_14*r10);
IkReal x526=((1.13624)*gclwh6_6);
IkReal x527=(gclwh2_8*rxp1_2);
IkReal x528=(gclwh8_14*r01);
IkReal x529=((0.2840596)*gclwh7_6);
IkReal x530=((0.5681192)*gclwh15_8);
IkReal x531=((0.1420302)*pp);
IkReal x532=((1.13624)*gclwh13_6);
IkReal x533=((8.0e-7)*gclwh9_12);
IkReal x534=((0.37512)*gclwh13_12);
IkReal x535=((0.37512)*gclwh7_12);
IkReal x536=(gclwh14_8*r11);
IkReal x537=(gclwh1_6*npx);
IkReal x538=((0.00248592539078297)*r01);
IkReal x539=((1.6e-6)*gclwh8_12);
IkReal x540=((0.2840596)*gclwh12_6);
IkReal x541=((0.0649363933423744)*rxp1_2);
IkReal x542=((0.00497185078156595)*r00);
IkReal x543=((0.18756)*gclwh13_12);
IkReal x544=((1.13624)*gclwh6_8);
IkReal x545=(gclwh0_8*npx);
IkReal x546=((0.37512)*gclwh14_14);
IkReal x547=((8.0e-7)*gclwh7_12);
IkReal x548=(gclwh2_6*rxp1_2);
IkReal x549=((1.04516518426865e-8)*r00);
IkReal x550=((0.0649362104618509)*npy);
IkReal x551=(gclwh13_6*r00);
IkReal x552=((0.2840596)*gclwh15_6);
IkReal x553=((0.56812)*gclwh15_6);
IkReal x554=((0.56812)*gclwh13_8);
IkReal x555=(gclwh0_6*npx);
IkReal x556=((0.00122519488725892)*r00);
IkReal x557=((0.37512)*gclwh8_12);
IkReal x558=(gclwh3_6*npy);
IkReal x559=((8.0e-7)*gclwh8_14);
IkReal x560=(gclwh14_14*r01);
IkReal x561=((0.00497185078156595)*r11);
IkReal x562=((0.00248592539078297)*r00);
IkReal x563=((0.0130645648033581)*r00);
IkReal x564=((0.00245038977451784)*r00);
IkReal x565=(gclwh6_14*r10);
IkReal x566=((0.37512)*gclwh12_14);
IkReal x567=((0.56812)*gclwh9_8);
IkReal x568=((0.37512)*gclwh15_12);
IkReal x569=((0.00371112550386781)*r00);
IkReal x570=((0.37512)*gclwh14_12);
IkReal x571=((8.0e-7)*gclwh14_14);
IkReal x572=((0.22860065444664)*npx);
IkReal x573=((1.6e-6)*gclwh14_12);
IkReal x574=((1.04516518426865e-8)*r10);
IkReal x575=((0.0130645648033581)*r01);
IkReal x576=((0.2840596)*gclwh14_8);
IkReal x577=((0.56812)*gclwh13_6);
IkReal x578=((1.6e-6)*gclwh6_14);
IkReal x579=((5.22582592134323e-9)*r01);
IkReal x580=((1.6e-6)*gclwh8_14);
IkReal x581=((1.13624)*gclwh7_6);
IkReal x582=(gclwh9_12*r11);
IkReal x583=((0.2840596)*gclwh13_6);
IkReal x584=((0.00245038977451784)*r01);
IkReal x585=((0.56812)*gclwh7_8);
IkReal x586=((1.6e-6)*gclwh7_14);
IkReal x587=((8.0e-7)*gclwh12_12);
IkReal x588=((0.5681192)*gclwh9_6);
IkReal x589=(gclwh1_8*rxp0_2);
IkReal x590=((0.00122519488725892)*r01);
IkReal x591=(gclwh9_14*r01);
IkReal x592=((0.37512)*gclwh15_14);
IkReal x593=((0.2840596)*gclwh15_8);
IkReal x594=((0.5681192)*gclwh7_6);
IkReal x595=(gclwh9_14*r11);
IkReal x596=((0.2840596)*gclwh6_6);
IkReal x597=((0.2840596)*gclwh6_8);
IkReal x598=((0.2840596)*gclwh8_8);
IkReal x599=(gclwh12_6*r10);
IkReal x600=((8.0e-7)*gclwh9_14);
IkReal x601=((0.00245038977451784)*r10);
IkReal x602=((5.22582592134323e-9)*r00);
IkReal x603=(gclwh2_14*npy);
IkReal x604=((8.0e-7)*gclwh13_12);
IkReal x605=((1.13624)*gclwh7_8);
IkReal x606=((0.00371111505221597)*r10);
IkReal x607=((0.37512)*gclwh8_14);
IkReal x608=((0.37512)*gclwh12_12);
IkReal x609=((0.5681192)*gclwh15_6);
IkReal x610=((1.6e-6)*gclwh9_14);
IkReal x611=((0.2840596)*gclwh12_8);
IkReal x612=((0.18756)*gclwh6_14);
IkReal x613=((1.6e-6)*gclwh12_12);
IkReal x614=((0.56812)*gclwh14_8);
IkReal x615=((8.0e-7)*gclwh8_12);
IkReal x616=(gclwh3_12*npy);
IkReal x617=(gclwh14_6*r11);
IkReal x618=((0.00185556275193391)*r10);
IkReal x619=((0.5681192)*gclwh8_8);
IkReal x620=((0.22860065444664)*rxp0_2);
IkReal x621=((0.22860065444664)*rxp1_2);
IkReal x622=((0.56812)*gclwh8_6);
IkReal x623=((0.56812)*gclwh12_8);
IkReal x624=((0.2840596)*gclwh7_8);
IkReal x625=((0.5681192)*gclwh13_8);
IkReal x626=(gclwh14_14*r11);
IkReal x627=((0.2840596)*gclwh9_8);
IkReal x628=((0.56812)*gclwh8_8);
IkReal x629=(gclwh6_14*r00);
IkReal x630=((0.5681192)*gclwh6_6);
IkReal x631=((0.5681192)*gclwh6_8);
IkReal x632=((5.22582592134323e-9)*r11);
IkReal x633=((1.6e-6)*gclwh15_12);
IkReal x634=((0.56812)*gclwh15_8);
IkReal x635=((0.00742224055608379)*r10);
IkReal x636=(gclwh9_12*r01);
IkReal x637=((0.2840596)*gclwh8_6);
IkReal x638=((0.2840596)*gclwh13_8);
IkReal x639=((0.37512)*gclwh9_12);
IkReal x640=((0.5681192)*gclwh12_6);
IkReal x641=((0.22860065444664)*npy);
IkReal x642=((1.6e-6)*gclwh7_12);
IkReal x643=((0.56812)*gclwh6_8);
IkReal x644=((0.129872603804225)*npy);
IkReal x645=(gclwh1_6*rxp0_2);
IkReal x646=((0.28406)*pp);
IkReal x647=((0.56812)*gclwh6_6);
IkReal x648=((1.6e-6)*gclwh13_12);
IkReal x649=((0.129872603804225)*rxp1_2);
IkReal x650=(gclwh14_12*r11);
IkReal x651=(gclwh13_12*r00);
IkReal x652=(gclwh9_8*r11);
IkReal x653=((0.5681192)*gclwh7_8);
IkReal x654=((0.56812)*gclwh9_6);
IkReal x655=((0.2840596)*gclwh14_6);
IkReal x656=(gclwh9_6*r11);
IkReal x657=((0.37512)*gclwh6_14);
IkReal x658=(gclwh3_10*x641);
IkReal x659=(gclwh7_10*x457);
IkReal x660=(gclwh1_10*x572);
IkReal x661=(gclwh9_10*x451);
IkReal x662=(gclwh13_10*x454);
IkReal x663=(gclwh2_10*x621);
IkReal x664=(gclwh15_10*x476);
IkReal x665=(gclwh14_10*x488);
IkReal x666=(gclwh0_10*x620);
IkReal x667=(gclwh14_10*x451);
IkReal x668=(gclwh12_10*x457);
IkReal x669=(gclwh12_10*x479);
IkReal x670=(gclwh6_10*x563);
IkReal x671=(gclwh9_10*x488);
IkReal x672=(gclwh13_10*x563);
IkReal x673=(gclwh8_10*x575);
IkReal x674=(gclwh7_10*x479);
IkReal x675=(gclwh15_10*x575);
IkReal x676=(gclwh8_11*x575);
IkReal x677=(gclwh13_11*x563);
IkReal x678=(gclwh15_11*x575);
IkReal x679=(gclwh6_11*x563);
IkReal x680=(gclwh6_11*x454);
IkReal x681=(gclwh8_11*x476);
IkReal x682=(gclwh7_11*x479);
IkReal x683=(gclwh9_11*x488);
IkReal x684=(gclwh1_11*x572);
IkReal x685=(gclwh12_11*x479);
IkReal x686=(gclwh2_11*x621);
IkReal x687=(gclwh3_11*x641);
IkReal x688=(gclwh14_11*x488);
IkReal x689=(gclwh0_11*x620);
IkReal x690=((0.19028)*x476);
IkReal x691=((1.13624)*x490);
IkReal x692=(gclwh14_6*x490);
IkReal x693=((2.0)*gclwh6_10*x460);
IkReal x694=((2.0)*gclwh8_10*x450);
IkReal x695=((1.0)*gclwh6_10*x454);
IkReal x696=((2.0)*gclwh14_10*x490);
IkReal x697=((2.0)*gclwh12_10*x453);
IkReal x698=((1.0)*gclwh8_10*x476);
IkReal x699=((2.0)*gclwh9_10*x490);
IkReal x700=((2.0)*gclwh15_10*x450);
IkReal x701=((2.0)*gclwh13_10*x460);
IkReal x702=((2.0)*gclwh7_10*x453);
IkReal x703=((2.0)*gclwh9_11*x490);
IkReal x704=((2.0)*gclwh13_11*x460);
IkReal x705=((2.0)*gclwh7_11*x453);
IkReal x706=((2.0)*gclwh14_11*x490);
IkReal x707=((2.0)*gclwh12_11*x453);
IkReal x708=((2.0)*gclwh15_11*x450);
IkReal x709=((1.0)*gclwh15_11*x476);
IkReal x710=((1.0)*gclwh14_11*x451);
IkReal x711=((2.0)*gclwh6_11*x460);
IkReal x712=((1.0)*gclwh13_11*x454);
IkReal x713=((1.0)*gclwh12_11*x457);
IkReal x714=((2.0)*gclwh8_11*x450);
IkReal x715=((1.0)*gclwh9_11*x451);
IkReal x716=((1.0)*gclwh7_11*x457);
IkReal x717=(x658+x659+x669+x668+x661+x660+x663+x662+x665+x664+x667+x666+x694+x693);
IkReal x718=(x678+x679+x676+x677+x683+x682+x681+x680+x708+x703+x706+x707+x704+x705);
IkReal x719=(x672+x673+x670+x671+x674+x675+x695+x696+x697+x698+x699+x702+x700+x701);
IkReal x720=(x689+x688+x687+x686+x685+x684+x711+x710+x713+x712+x715+x714+x716+x709);
op[32]=((((-1.0)*gclwh14_6*x507))+((x453*x472))+((x454*x647))+((x490*x610))+(((-1.0)*x476*x553))+((gclwh9_6*x507))+((gclwh8_14*x505))+(((-1.0)*x451*x496))+(((-1.0)*x450*x580))+((x453*x581))+((x453*x586))+(((-0.129872603804225)*x462))+(((0.00742224055608379)*x492))+(((-1.0)*x451*x571))+((gclwh14_6*x691))+((x454*x508))+((gclwh6_14*x549))+(((-1.04516518426865e-8)*x525))+((gclwh13_6*x504))+((x453*x486))+(((-0.00742224055608379)*x599))+((gclwh9_6*x691))+(((1.13624)*gclwh15_6*x450))+(((1.04516518426865e-8)*x456))+(((-1.0)*x451*x600))+((gclwh9_14*x483))+(((-1.0)*x460*x526))+((x476*x622))+(((-0.129872603804225)*x558))+(((0.00742224055608379)*x468))+(((-0.129872603804225)*x548))+(((-1.0)*gclwh14_14*x483))+(((-1.0)*x454*x577))+((x460*x532))+(((-1.0)*x460*x578))+((gclwh15_6*x519))+(((-0.129872603804225)*x537))+(((-1.0)*x457*x458))+(((-1.0)*x451*x654))+(((-1.13624)*gclwh8_6*x450))+(((-1.0)*x456*x489))+(((-1.0)*x465*x476))+(((-1.82880523557312e-7)*x501))+((x450*x470))+(((-1.0)*x457*x518))+((x476*x559))+((x490*x514))+((gclwh6_6*x504))+(((1.04516518426865e-8)*x500))+(((-1.0)*x457*x474)));
op[33]=(((x460*x498))+(((-1.0)*x457*x547))+(((-1.0)*x457*x623))+((gclwh6_8*x504))+((x454*x643))+((gclwh9_8*x507))+(((-1.0)*x451*x567))+((x453*x613))+(((-1.0)*x454*x554))+((gclwh9_8*x691))+(((-0.129872603804225)*x461))+(((1.13624)*gclwh15_8*x450))+((x453*x642))+((gclwh8_8*x519))+(((-1.0)*gclwh12_12*x574))+(((-1.0)*x455*x489))+(((-0.129872603804225)*x471))+(((-1.0)*gclwh14_12*x483))+((x453*x605))+((x490*x497))+(((-1.13624)*gclwh8_8*x450))+((gclwh14_8*x691))+(((1.04516518426865e-8)*x478))+((gclwh13_12*x549))+(((-1.0)*x451*x533))+(((-1.0)*x451*x614))+(((-1.0)*x451*x521))+(((1.04516518426865e-8)*x455))+(((-1.0)*x457*x585))+(((-1.0)*x457*x587))+((gclwh7_12*x574))+(((-1.0)*x450*x539))+(((-1.0)*x476*x634))+((x476*x628))+((x490*x573))+(((-1.0)*x454*x604))+(((-1.82880523557312e-7)*x616))+(((-0.129872603804225)*x480))+(((-1.0)*x460*x544))+((r01*x463))+(((-0.129872603804225)*x527))+((gclwh9_12*x483))+((x476*x615))+((x450*x633))+((x460*x648))+((gclwh13_8*x504))+(((0.00742224055608379)*x503))+((x453*x510))+(((-1.0)*gclwh14_8*x507))+(((-0.00742224055608379)*x484)));
op[34]=((((0.0649362104618509)*x537))+(((-1.0)*x459*x528))+(((-1.0)*x453*x566))+((gclwh14_14*x513))+(((-1.0)*gclwh6_14*x564))+(((0.18756)*gclwh9_14*x451))+((x457*x481))+(((-1.0)*x453*x522))+((x451*x499))+(((-1.0)*gclwh9_14*x513))+(((-0.00245038977451784)*x500))+(((-1.0)*gclwh9_6*x477))+(((-1.0)*x490*x546))+((x454*x583))+((x450*x607))+(((-1.0)*x490*x494))+((x457*x529))+(((-0.00371111505221597)*x468))+((x450*x491))+((x457*x540))+(((-1.0)*gclwh13_6*x523))+((x451*x655))+((gclwh14_6*x477))+(((0.00245038977451784)*x525))+(((-0.5681192)*x692))+(((-0.00245038977451784)*x456))+(((-1.0)*x453*x594))+(((-1.0)*x453*x640))+(((-0.00245038977451784)*x528))+(((-1.0)*gclwh6_6*x523))+(((-1.0)*x476*x637))+((x459*x500))+(((-1.0)*gclwh15_6*x469))+(((-1.0)*x490*x588))+(((0.0649362104618509)*x462))+(((0.18756)*gclwh14_14*x451))+(((-1.0)*x450*x609))+(((-1.0)*x454*x596))+(((0.0428763387480119)*x501))+((x460*x657))+((x460*x630))+((gclwh3_6*x550))+((r10*x452))+((gclwh2_6*x512))+(((-1.0)*x450*x592))+((x456*x459))+((x476*x552))+(((-1.0)*gclwh8_6*x469))+(((-1.0)*x454*x612))+(((-1.0)*x460*x516)));
op[35]=(((gclwh12_12*x601))+((x457*x624))+((gclwh2_8*x512))+((x476*x593))+(((-1.0)*x459*x478))+((x451*x627))+(((-1.0)*x490*x515))+((x455*x459))+(((-1.0)*x450*x568))+(((-1.0)*gclwh13_8*x523))+(((-1.0)*x453*x535))+(((-1.0)*gclwh7_12*x601))+((npy*x511))+((x451*x576))+(((-1.0)*x460*x625))+(((-1.0)*gclwh15_8*x469))+(((-1.0)*x453*x473))+((x450*x557))+(((-1.0)*x453*x653))+((x457*x611))+((x450*x619))+(((-0.00245038977451784)*x455))+(((-1.0)*x450*x530))+(((-1.0)*x490*x509))+(((0.0649362104618509)*x461))+((gclwh14_12*x513))+(((-1.0)*gclwh8_8*x469))+(((-1.0)*x460*x534))+((x454*x638))+(((-1.0)*x454*x597))+(((-0.00245038977451784)*x478))+(((0.00371111505221597)*x484))+(((0.0649362104618509)*x471))+(((-1.0)*x476*x598))+(((0.18756)*gclwh9_12*x451))+((x460*x631))+((x454*x543))+(((0.0649362104618509)*x480))+((x457*x506))+(((0.18756)*gclwh14_12*x451))+(((-0.00371111505221597)*x503))+(((-1.0)*x453*x608))+(((-1.0)*gclwh6_8*x523))+(((-1.0)*x490*x639))+((gclwh14_8*x477))+(((-1.0)*x490*x570))+((x457*x464))+(((-1.0)*gclwh9_8*x477))+(((-1.0)*gclwh9_12*x513))+(((-1.0)*gclwh13_12*x564)));
op[36]=((((0.38056)*gclwh6_14*x457))+(((-0.5681208)*gclwh15_6*x490))+(((0.38056)*gclwh7_14*x454))+(((0.38056)*gclwh14_14*x476))+(((-0.0649363933423744)*x555))+(((-1.0)*gclwh15_14*x561))+(((0.76112)*gclwh15_14*x490))+((gclwh12_6*x569))+(((-0.00497185078156595)*x565))+(((-0.00497185078156595)*x560))+(((-0.2840604)*gclwh6_6*x457))+(((0.5681208)*gclwh12_6*x460))+(((0.38056)*gclwh8_14*x451))+(((-0.2840604)*gclwh9_6*x476))+(((0.5681208)*gclwh7_6*x460))+(((-1.0)*gclwh8_14*x561))+(((-0.76112)*gclwh7_14*x460))+((gclwh8_6*x467))+(((-0.2840604)*gclwh14_6*x476))+(((0.2840604)*gclwh15_6*x451))+(((-0.2840604)*gclwh8_6*x451))+(((-0.2840604)*gclwh7_6*x454))+((gclwh7_14*x542))+((gclwh13_6*x520))+(((-1.0)*gclwh12_14*x542))+(((-0.76112)*gclwh14_14*x450))+(((-1.0)*gclwh9_6*x493))+(((-0.76112)*gclwh6_14*x453))+(((0.5681208)*gclwh8_6*x490))+(((0.00497185078156595)*x591))+(((-1.0)*gclwh7_6*x569))+(((0.5681208)*gclwh9_6*x450))+(((-1.0)*gclwh2_6*x487))+(((-0.76112)*gclwh9_14*x450))+(((0.0869962650562135)*x603))+(((-0.76112)*gclwh12_14*x460))+((gclwh3_6*x541))+(((0.00371112550386781)*x482))+(((0.38056)*gclwh12_14*x454))+(((0.2840604)*gclwh13_6*x457))+((gclwh1_6*x485))+((gclwh15_6*x467))+(((0.5681208)*gclwh6_6*x453))+(((-0.38056)*gclwh15_14*x451))+(((-0.76112)*gclwh8_14*x490))+(((-0.5681208)*gclwh13_6*x453))+((gclwh14_6*x493))+(((0.5681208)*gclwh14_6*x450))+(((-0.2840604)*gclwh12_6*x454))+(((0.38056)*gclwh9_14*x476)));
op[37]=((((-1.0)*gclwh7_8*x569))+(((-0.76112)*gclwh7_12*x460))+(((0.38056)*gclwh8_12*x451))+(((0.5681208)*gclwh6_8*x453))+(((-1.0)*gclwh9_8*x493))+(((0.2840604)*gclwh13_8*x457))+(((-0.0649363933423744)*x545))+(((0.5681208)*gclwh12_8*x460))+(((-1.0)*gclwh12_12*x542))+(((0.00497185078156595)*x636))+(((-0.2840604)*gclwh8_8*x451))+(((-0.00497185078156595)*gclwh13_12*r10))+((gclwh6_8*x520))+(((-0.5681208)*gclwh15_8*x490))+(((0.38056)*gclwh7_12*x454))+(((-0.2840604)*gclwh6_8*x457))+(((0.5681208)*gclwh9_8*x450))+(((-0.2840604)*gclwh9_8*x476))+(((0.76112)*gclwh15_12*x490))+((gclwh14_8*x493))+(((-1.0)*gclwh2_8*x487))+((gclwh15_8*x467))+(((-0.76112)*gclwh9_12*x450))+(((0.76112)*gclwh13_12*x453))+(((0.38056)*gclwh12_12*x454))+((gclwh13_8*x520))+((gclwh8_8*x467))+(((-0.5681208)*gclwh13_8*x453))+(((-0.2840604)*gclwh12_8*x454))+(((0.5681208)*gclwh8_8*x490))+(((0.38056)*gclwh14_12*x476))+(((0.5681208)*gclwh7_8*x460))+(((-0.38056)*gclwh15_12*x451))+((gclwh12_8*x569))+(((-0.76112)*gclwh12_12*x460))+(((-0.2840604)*gclwh7_8*x454))+(((-0.76112)*gclwh8_12*x490))+(((-0.76112)*gclwh14_12*x450))+(((-0.38056)*gclwh13_12*x457))+((gclwh1_8*x485))+(((0.38056)*gclwh9_12*x476))+(((-0.2840604)*gclwh14_8*x476))+(((0.5681208)*gclwh14_8*x450))+((gclwh7_12*x542))+(((-1.0)*gclwh15_12*x561))+(((-0.00497185078156595)*x517))+(((-0.0869962650562135)*x524))+((gclwh3_8*x541))+(((-1.0)*gclwh8_12*x561))+(((0.2840604)*gclwh15_8*x451)));
op[38]=((((-1.13624)*gclwh14_6*x450))+(((-1.0)*gclwh8_6*x691))+((x454*x458))+((x451*x622))+((x476*x496))+(((-1.0)*x457*x577))+(((-1.0)*x460*x581))+(((-1.0)*x460*x586))+((x476*x654))+(((-0.129872603804225)*x645))+(((-1.0)*gclwh3_6*x649))+(((-1.0)*x453*x526))+(((-1.0)*x460*x472))+((x454*x474))+((gclwh7_6*x504))+((x470*x490))+((gclwh2_6*x644))+((gclwh7_14*x549))+((gclwh9_14*x505))+(((-1.0)*gclwh12_14*x549))+(((-1.0)*gclwh15_14*x483))+(((-1.0)*gclwh8_6*x507))+(((-1.0)*x450*x514))+(((-1.0)*x450*x610))+(((8.0e-7)*gclwh7_14*x454))+((x476*x571))+(((-1.0)*x453*x578))+(((-1.0)*gclwh14_6*x519))+(((-1.0)*gclwh14_14*x505))+((gclwh15_6*x691))+(((-1.0)*x460*x486))+((gclwh9_6*x519))+(((-1.0)*x451*x465))+(((-1.0)*x451*x553))+(((-1.0)*x490*x580))+((x451*x559))+(((-1.13624)*gclwh9_6*x450))+(((-1.0)*gclwh12_6*x504))+(((0.129872603804225)*x555))+((x453*x532))+(((-1.04516518426865e-8)*x565))+((x457*x508))+(((-1.0)*gclwh8_14*x483))+(((-1.0)*gclwh13_6*x635))+((x457*x647))+(((-1.0)*gclwh15_6*x507))+((x454*x518))+((x476*x600))+(((1.82880523557312e-7)*x603))+(((-0.00742224055608379)*x482)));
op[39]=((((-1.0)*gclwh3_8*x649))+(((-1.0)*x450*x497))+((x451*x628))+(((-1.0)*gclwh12_12*x549))+(((-1.0)*x490*x539))+(((-1.0)*x457*x604))+((x453*x648))+(((-1.0)*gclwh15_12*x483))+((gclwh9_12*x505))+(((-1.82880523557312e-7)*x524))+((gclwh15_8*x691))+(((-1.0)*gclwh14_8*x519))+((x453*x498))+((x454*x587))+((x454*x585))+((x451*x615))+(((-1.0)*x453*x544))+(((-1.0)*x450*x573))+(((-1.13624)*gclwh9_8*x450))+(((-1.0)*gclwh6_8*x635))+(((-1.0)*x451*x634))+((x476*x567))+(((-1.0)*gclwh14_12*x505))+(((-0.129872603804225)*x589))+(((-1.0)*gclwh8_12*x483))+((gclwh7_8*x504))+(((-1.0)*x460*x642))+(((-1.0)*gclwh13_12*x574))+(((0.129872603804225)*x545))+(((-1.0)*x460*x613))+((x490*x633))+(((-1.0)*x460*x605))+(((-1.0)*r11*x463))+(((-8.0e-7)*gclwh15_12*x451))+((x454*x623))+((gclwh9_8*x519))+((gclwh2_8*x644))+(((-1.13624)*gclwh14_8*x450))+(((-1.0)*gclwh12_8*x504))+(((-1.0)*gclwh8_8*x507))+((x476*x521))+((x454*x547))+(((-1.0)*gclwh8_8*x691))+((x476*x533))+((x457*x643))+((gclwh7_12*x549))+((x476*x614))+(((-1.0)*x457*x554))+(((-1.0)*gclwh13_8*x635))+(((-1.0)*x460*x510)));
op[40]=((((-1.0)*gclwh7_6*x523))+(((-0.0649362104618509)*x555))+(((-1.0)*x490*x609))+((x490*x607))+(((-0.18756)*gclwh8_14*x451))+(((0.18756)*gclwh15_14*x451))+(((0.5681192)*gclwh14_6*x450))+(((-1.0)*x457*x612))+(((-1.0)*gclwh9_6*x469))+(((-1.0)*x459*x591))+((x490*x491))+(((-1.0)*x454*x529))+(((-1.0)*x451*x637))+(((-1.0)*x457*x596))+(((0.0649362104618509)*x645))+(((-1.0)*gclwh7_14*x564))+((gclwh13_6*x606))+(((-1.0)*x490*x592))+((x460*x566))+((gclwh3_6*x512))+((x450*x494))+(((-1.0)*x454*x540))+(((-1.0)*x476*x655))+((x460*x594))+((gclwh8_6*x477))+(((-1.0)*gclwh2_6*x550))+(((-1.0)*gclwh9_14*x584))+((x451*x552))+((gclwh14_6*x469))+((x450*x546))+(((0.00371111505221597)*x482))+((gclwh12_14*x564))+(((-1.0)*x453*x516))+((r00*x452))+((gclwh8_14*x513))+(((-1.0)*x459*x560))+((x453*x630))+((x460*x522))+(((0.00245038977451784)*x560))+(((0.00245038977451784)*x565))+((x457*x583))+((x450*x588))+(((-0.0428763387480119)*x603))+((gclwh15_6*x477))+((x460*x640))+((gclwh15_14*x513))+(((-0.18756)*gclwh7_14*x454))+(((-1.0)*x454*x481))+((x453*x657))+(((-1.0)*x476*x499)));
op[41]=((((-1.0)*gclwh9_12*x584))+(((-1.0)*gclwh9_8*x469))+((x457*x638))+(((-1.0)*gclwh7_12*x564))+((x490*x619))+(((0.18756)*gclwh15_12*x451))+(((-0.0649362104618509)*x545))+(((-1.0)*x490*x530))+((x460*x608))+((gclwh3_8*x512))+(((-1.0)*x453*x534))+((gclwh13_12*x601))+((gclwh15_12*x513))+(((-1.0)*gclwh7_8*x523))+((gclwh8_12*x513))+((gclwh6_8*x606))+(((-1.0)*x454*x624))+((x451*x593))+((gclwh8_8*x477))+(((-1.0)*x454*x464))+(((-1.0)*x457*x597))+((x450*x515))+(((-1.0)*gclwh2_8*x550))+((x457*x543))+((gclwh13_8*x606))+((x460*x473))+((x450*x570))+(((-1.0)*x453*x625))+((gclwh12_12*x564))+(((-0.18756)*gclwh8_12*x451))+(((-1.0)*x476*x627))+(((0.00245038977451784)*x517))+((gclwh15_8*x477))+(((0.0649362104618509)*x589))+((rxp1_2*x511))+((x490*x557))+(((-1.0)*x490*x568))+((x460*x653))+((x450*x509))+((x460*x535))+((x453*x631))+(((-1.0)*x459*x636))+(((-1.0)*x451*x598))+((gclwh14_8*x469))+(((-1.0)*x476*x576))+((x450*x639))+(((-1.0)*x454*x506))+(((-1.0)*x459*x517))+(((-1.0)*x454*x611))+((gclwh12_8*x523)));
op[42]=0;
op[43]=-0.38056;
op[44]=0;
op[45]=-8.0e-7;
op[46]=0;
op[47]=0.18756;
op[48]=x448;
op[49]=x448;
op[50]=0.28406;
op[51]=0.28406;
op[52]=x449;
op[53]=x449;
op[54]=((-0.05637905611204)+(((-0.38056)*gclwh6_6*x460))+(((0.00248592539078297)*x656))+(((0.00185556275193391)*x500))+(((-0.38056)*gclwh8_6*x450))+(((0.00248592539078297)*x468))+(((0.2840604)*gclwh7_14*x453))+(((0.2840604)*gclwh12_14*x453))+(((0.1420302)*gclwh8_14*x476))+(((-0.0434981325281067)*x537))+((gclwh8_6*x690))+(((0.2840604)*gclwh15_14*x450))+(((-0.00185556275193391)*x525))+(((-0.0434981325281067)*x548))+(((-0.19028)*gclwh7_6*x457))+(((-0.2840604)*gclwh6_14*x460))+(((0.38056)*gclwh13_6*x460))+(((-0.19028)*gclwh9_6*x451))+(((-0.19028)*gclwh14_6*x451))+(((0.00185556275193391)*x629))+(((0.1420302)*gclwh6_14*x454))+(((-0.00248592539078297)*x599))+(((0.00185556275193391)*x528))+(((0.2840604)*gclwh14_14*x490))+(((-0.00248592539078297)*x617))+(((0.00248592539078297)*x492))+(((0.2840604)*gclwh9_14*x490))+(((0.38056)*gclwh15_6*x450))+(((-0.1420302)*gclwh14_14*x451))+(((-1.0)*gclwh15_6*x690))+((gclwh15_6*x538))+(((-1.0)*x719))+(((0.00185556275193391)*x456))+(((0.38056)*gclwh12_6*x453))+(((-0.0324681966711872)*x501))+(((-0.1420302)*gclwh15_14*x476))+(((0.00248592539078297)*x551))+((gclwh6_6*x562))+(((0.00185556275193391)*x595))+(((-0.19028)*gclwh13_6*x454))+(((-0.19028)*gclwh12_6*x457))+(((0.38056)*gclwh9_6*x490))+(((-0.0434981325281067)*x462))+(((0.38056)*gclwh7_6*x453))+(((-0.1420302)*gclwh12_14*x457))+x717+(((0.19028)*gclwh6_6*x454))+(((-0.1420302)*gclwh9_14*x451))+(((-0.2840604)*gclwh8_14*x450))+(((0.38056)*x692))+(((-1.0)*x456*x531))+(((-0.0434981325281067)*x558))+(((-0.00185556275193391)*x626)));
op[55]=((((-0.0434981325281067)*x471))+(((-1.0)*gclwh12_12*x618))+(((0.00248592539078297)*x652))+(((0.2840604)*gclwh9_12*x490))+(((-0.38056)*gclwh6_8*x460))+(((-0.19028)*gclwh7_8*x457))+(((0.00185556275193391)*x582))+(((-0.0434981325281067)*x527))+(((-0.2840604)*gclwh8_12*x450))+((gclwh13_8*x562))+((gclwh7_12*x618))+(((0.38056)*gclwh13_8*x460))+(((0.2840604)*gclwh13_12*x460))+(((-0.0324681966711872)*x616))+((gclwh15_8*x538))+(((-0.1420302)*gclwh14_12*x451))+(((0.2840604)*gclwh7_12*x453))+((gclwh8_8*x690))+(((-0.19028)*gclwh14_8*x451))+(((0.38056)*gclwh12_8*x453))+(((-1.0)*x455*x531))+(((0.38056)*gclwh7_8*x453))+(((0.00248592539078297)*x503))+(((-1.0)*gclwh15_8*x690))+(((0.2840604)*gclwh15_12*x450))+(((-0.1420302)*gclwh12_12*x457))+(((-1.0)*x720))+(((-0.19028)*gclwh9_8*x451))+(((0.1420302)*gclwh8_12*x476))+(((0.00185556275193391)*x455))+(((-0.19028)*gclwh12_8*x457))+(((0.38056)*gclwh9_8*x490))+(((0.19028)*gclwh6_8*x454))+(((-0.38056)*gclwh8_8*x450))+(((-0.19028)*gclwh13_8*x454))+(((-0.1420302)*gclwh13_12*x454))+(((0.00185556275193391)*x651))+(((0.00185556275193391)*x478))+(((-0.00248592539078297)*x536))+(((-0.0434981325281067)*x461))+(((-0.0434981325281067)*x480))+((gclwh6_8*x562))+((gclwh8_8*x538))+x718+(((0.2840604)*gclwh12_12*x453))+(((0.38056)*gclwh15_8*x450))+(((-0.1420302)*gclwh7_12*x457))+(((-0.1420302)*gclwh9_12*x451))+(((-0.00248592539078297)*x484))+(((0.2840604)*gclwh14_12*x490))+(((-0.00185556275193391)*x650))+(((0.38056)*gclwh14_8*x490)));
op[56]=((0.080690045)+(((-0.00371112027804189)*x595))+(((-9.14402617786561e-8)*x537))+(((8.0e-7)*gclwh13_6*x460))+(((-5.22582592134323e-9)*x599))+(((0.56812)*gclwh6_14*x460))+(((5.22582592134323e-9)*x492))+(((-4.0e-7)*gclwh14_6*x451))+(((0.28406)*gclwh12_14*x457))+(((5.22582592134323e-9)*x468))+(((-0.56812)*gclwh14_14*x490))+(((-8.0e-7)*gclwh6_6*x460))+(((-4.0e-7)*gclwh7_6*x457))+(((8.0e-7)*x692))+(((-4.0e-7)*gclwh13_6*x454))+((gclwh9_6*x632))+(((0.28406)*gclwh15_14*x476))+(((-0.00371112027804189)*x528))+((gclwh6_6*x602))+(((8.0e-7)*gclwh9_6*x490))+(((-8.0e-7)*gclwh8_6*x450))+(((-5.22582592134323e-9)*x617))+(((-0.56812)*gclwh15_14*x450))+(((-0.56812)*gclwh12_14*x453))+(((0.28406)*gclwh14_14*x451))+(((0.00371112027804189)*x626))+(((-0.28406)*gclwh6_14*x454))+(((-4.0e-7)*gclwh12_6*x457))+(((-4.0e-7)*gclwh15_6*x476))+(((-9.14402617786561e-8)*x462))+(((0.56812)*gclwh8_14*x450))+(((-0.00371112027804189)*x456))+(((4.0e-7)*gclwh8_6*x476))+(((8.0e-7)*gclwh15_6*x450))+(((-0.28406)*gclwh8_14*x476))+(((0.0649363019021127)*x501))+(((-0.00371112027804189)*x500))+(((8.0e-7)*gclwh12_6*x453))+(((-0.56812)*gclwh9_14*x490))+((gclwh15_6*x579))+(((-0.00371112027804189)*x629))+(((4.0e-7)*gclwh6_6*x454))+(((0.28406)*gclwh9_14*x451))+((gclwh12_14*x502))+(((8.0e-7)*gclwh7_6*x453))+(((-9.14402617786561e-8)*x558))+((x456*x646))+(((-0.56812)*gclwh7_14*x453))+(((5.22582592134323e-9)*x551))+(((-9.14402617786561e-8)*x548))+(((-4.0e-7)*gclwh9_6*x451)));
op[57]=((((-9.14402617786561e-8)*x527))+((gclwh8_8*x579))+(((-0.56812)*gclwh12_12*x453))+(((-1.0)*gclwh7_12*x502))+((gclwh15_8*x579))+(((8.0e-7)*gclwh12_8*x453))+(((5.22582592134323e-9)*x503))+(((-0.56812)*gclwh14_12*x490))+(((0.28406)*gclwh7_12*x457))+(((-4.0e-7)*gclwh13_8*x454))+(((-0.28406)*gclwh8_12*x476))+((gclwh12_12*x502))+((gclwh6_8*x602))+(((0.00371112027804189)*x650))+(((0.28406)*gclwh9_12*x451))+(((-0.00371112027804189)*x651))+(((-8.0e-7)*gclwh8_8*x450))+(((8.0e-7)*gclwh7_8*x453))+(((-9.14402617786561e-8)*x480))+(((4.0e-7)*gclwh6_8*x454))+((gclwh13_8*x602))+(((-5.22582592134323e-9)*x484))+(((-0.56812)*gclwh13_12*x460))+(((-0.00371112027804189)*x582))+(((0.56812)*gclwh8_12*x450))+(((0.28406)*gclwh12_12*x457))+(((4.0e-7)*gclwh8_8*x476))+(((-0.00371112027804189)*x478))+(((-4.0e-7)*gclwh9_8*x451))+(((-0.56812)*gclwh15_12*x450))+(((8.0e-7)*gclwh13_8*x460))+(((-9.14402617786561e-8)*x461))+(((-9.14402617786561e-8)*x471))+(((-0.00371112027804189)*x455))+(((-4.0e-7)*gclwh7_8*x457))+(((-4.0e-7)*gclwh15_8*x476))+(((-4.0e-7)*gclwh12_8*x457))+(((-0.56812)*gclwh7_12*x453))+(((8.0e-7)*gclwh14_8*x490))+((gclwh9_8*x632))+(((-0.56812)*gclwh9_12*x490))+(((0.28406)*gclwh14_12*x451))+(((0.0649363019021127)*x616))+(((8.0e-7)*gclwh15_8*x450))+(((8.0e-7)*gclwh9_8*x490))+(((0.28406)*gclwh13_12*x454))+(((-5.22582592134323e-9)*x536))+(((-8.0e-7)*gclwh6_8*x460))+(((-4.0e-7)*gclwh14_8*x451))+((x455*x646)));
op[58]=((-0.02896715248804)+(((0.09378)*gclwh14_6*x451))+(((-0.18756)*gclwh12_6*x453))+(((-0.0324681052309254)*x501))+(((0.18756)*gclwh8_6*x450))+(((0.2840596)*gclwh12_14*x453))+((gclwh6_14*x466))+(((0.00185555752610799)*x528))+(((-1.0)*gclwh12_14*x475))+(((-0.1420298)*gclwh14_14*x451))+(((0.00185555752610799)*x456))+(((0.00122519488725892)*x599))+(((-0.00122519488725892)*x656))+(((0.2840596)*gclwh14_14*x490))+(((-0.18756)*gclwh7_6*x453))+(((0.09378)*gclwh13_6*x454))+(((0.09378)*gclwh9_6*x451))+(((0.0214381693740059)*x462))+(((-0.00185555752610799)*x626))+(((0.09378)*gclwh7_6*x457))+(((0.2840596)*gclwh9_14*x490))+(((-0.1420298)*gclwh15_14*x476))+(((-0.00122519488725892)*x551))+(((-0.2840596)*gclwh6_14*x460))+(((0.00185555752610799)*x595))+(((0.09378)*gclwh12_6*x457))+(((-1.0)*x719))+(((-0.18756)*x692))+(((0.0214381693740059)*x548))+(((0.09378)*gclwh15_6*x476))+(((-0.1420298)*gclwh12_14*x457))+(((-0.2840596)*gclwh8_14*x450))+(((0.18756)*gclwh6_6*x460))+(((-0.18756)*gclwh15_6*x450))+(((-1.0)*gclwh6_6*x556))+(((0.2840596)*gclwh7_14*x453))+(((0.0214381693740059)*x537))+(((-0.1420298)*gclwh9_14*x451))+x717+(((-1.0)*x456*x495))+(((0.00122519488725892)*x617))+(((0.1420298)*gclwh8_14*x476))+(((-0.18756)*gclwh13_6*x460))+(((-0.18756)*gclwh9_6*x490))+(((0.0214381693740059)*x558))+(((0.2840596)*gclwh15_14*x450))+(((-1.0)*gclwh15_6*x590))+(((-0.00122519488725892)*x468))+(((0.1420298)*gclwh6_14*x454))+(((-0.00122519488725892)*x492))+(((-0.09378)*gclwh8_6*x476))+(((-0.09378)*gclwh6_6*x454))+(((0.00185555752610799)*x500)));
op[59]=((((-1.0)*x455*x495))+(((0.2840596)*gclwh13_12*x460))+(((-0.1420298)*gclwh12_12*x457))+(((-1.0)*gclwh13_8*x556))+(((-0.18756)*gclwh15_8*x450))+(((0.00185555752610799)*x478))+((gclwh7_12*x475))+(((0.00185555752610799)*x582))+(((-1.0)*gclwh8_8*x590))+(((0.2840596)*gclwh14_12*x490))+(((-0.1420298)*gclwh7_12*x457))+(((0.0214381693740059)*x471))+(((0.00185555752610799)*x455))+(((-0.1420298)*gclwh14_12*x451))+(((0.2840596)*gclwh15_12*x450))+(((-0.00122519488725892)*x652))+(((-0.1420298)*gclwh9_12*x451))+(((0.2840596)*gclwh9_12*x490))+(((0.1420298)*gclwh8_12*x476))+(((-0.18756)*gclwh9_8*x490))+(((-0.0324681052309254)*x616))+((gclwh13_12*x466))+(((0.0214381693740059)*x461))+(((-1.0)*x720))+(((-0.18756)*gclwh13_8*x460))+(((0.00122519488725892)*x484))+(((-0.09378)*gclwh6_8*x454))+(((-0.18756)*gclwh7_8*x453))+(((0.18756)*gclwh6_8*x460))+(((0.18756)*gclwh8_8*x450))+(((0.09378)*gclwh14_8*x451))+(((0.09378)*gclwh13_8*x454))+(((-1.0)*gclwh6_8*x556))+(((0.0214381693740059)*x527))+(((0.00122519488725892)*x536))+(((-0.2840596)*gclwh8_12*x450))+x718+(((-0.00122519488725892)*x503))+(((-0.18756)*gclwh14_8*x490))+(((0.09378)*gclwh15_8*x476))+(((0.09378)*gclwh7_8*x457))+(((-1.0)*gclwh12_12*x475))+(((-1.0)*gclwh15_8*x590))+(((0.0214381693740059)*x480))+(((-0.09378)*gclwh8_8*x476))+(((-0.00185555752610799)*x650))+(((-0.18756)*gclwh12_8*x453))+(((0.2840596)*gclwh7_12*x453))+(((0.2840596)*gclwh12_12*x453))+(((0.09378)*gclwh12_8*x457))+(((0.09378)*gclwh9_8*x451))+(((-0.1420298)*gclwh13_12*x454)));
IkReal x721=(gclwh9_8*r01);
IkReal x722=(npy*py);
IkReal x723=(gclwh13_12*r10);
IkReal x724=((0.00248592539078297)*r00);
IkReal x725=(pp*r11);
IkReal x726=(gclwh15_6*r11);
IkReal x727=((0.22860065444664)*npx);
IkReal x728=(gclwh12_14*r00);
IkReal x729=(gclwh2_8*npy);
IkReal x730=(npy*px);
IkReal x731=((0.22860065444664)*rxp1_2);
IkReal x732=((0.00371112027804189)*r01);
IkReal x733=(npx*py);
IkReal x734=(gclwh3_12*rxp1_2);
IkReal x735=(npx*px);
IkReal x736=(gclwh2_14*npy);
IkReal x737=((0.0130645648033581)*r01);
IkReal x738=(gclwh7_14*r00);
IkReal x739=(pp*r00);
IkReal x740=(gclwh13_11*r10);
IkReal x741=(gclwh1_6*rxp0_2);
IkReal x742=((0.00185556275193391)*r01);
IkReal x743=(pp*r10);
IkReal x744=((0.00185556275193391)*r00);
IkReal x745=((0.1420302)*pp);
IkReal x746=((0.00248592539078297)*r11);
IkReal x747=((0.00185556275193391)*r11);
IkReal x748=(gclwh14_6*r01);
IkReal x749=(gclwh3_8*rxp1_2);
IkReal x750=(gclwh1_8*rxp0_2);
IkReal x751=((1.0)*pp);
IkReal x752=(gclwh9_6*r01);
IkReal x753=(gclwh9_14*r01);
IkReal x754=((0.22860065444664)*rxp0_2);
IkReal x755=((4.0e-7)*pp);
IkReal x756=(gclwh3_6*rxp1_2);
IkReal x757=((0.09378)*pp);
IkReal x758=((5.22582592134323e-9)*r00);
IkReal x759=((0.0130645648033581)*r11);
IkReal x760=((0.1420298)*pp);
IkReal x761=((0.28406)*pp);
IkReal x762=(gclwh2_6*npy);
IkReal x763=((0.00371112027804189)*r11);
IkReal x764=((0.0130645648033581)*r00);
IkReal x765=(gclwh0_8*npx);
IkReal x766=((0.0130645648033581)*r10);
IkReal x767=((0.00122519488725892)*r00);
IkReal x768=(gclwh14_12*r01);
IkReal x769=((0.00122519488725892)*r10);
IkReal x770=((0.00122519488725892)*r11);
IkReal x771=(gclwh14_8*r01);
IkReal x772=(gclwh7_12*r00);
IkReal x773=((0.00185555752610799)*r11);
IkReal x774=((5.22582592134323e-9)*r11);
IkReal x775=((5.22582592134323e-9)*r10);
IkReal x776=((0.22860065444664)*npy);
IkReal x777=(gclwh14_14*r01);
IkReal x778=((0.19028)*pp);
IkReal x779=(pp*r01);
IkReal x780=(gclwh0_6*npx);
IkReal x781=(gclwh6_14*r10);
IkReal x782=(gclwh12_12*r00);
IkReal x783=((0.00248592539078297)*r10);
IkReal x784=(gclwh9_12*r01);
IkReal x785=(gclwh15_10*x759);
IkReal x786=(gclwh6_10*x766);
IkReal x787=(gclwh13_10*x743);
IkReal x788=(gclwh13_10*x766);
IkReal x789=(gclwh8_10*x759);
IkReal x790=(gclwh15_10*x725);
IkReal x791=(gclwh12_10*x764);
IkReal x792=(gclwh14_10*x737);
IkReal x793=(gclwh3_10*x731);
IkReal x794=(gclwh1_10*x754);
IkReal x795=(gclwh9_10*x737);
IkReal x796=(gclwh0_10*x727);
IkReal x797=(gclwh7_10*x764);
IkReal x798=(gclwh2_10*x776);
IkReal x799=(gclwh9_11*x737);
IkReal x800=(gclwh7_11*x739);
IkReal x801=(gclwh12_11*x739);
IkReal x802=(gclwh9_11*x779);
IkReal x803=(gclwh0_11*x727);
IkReal x804=(gclwh14_11*x779);
IkReal x805=(gclwh2_11*x776);
IkReal x806=(gclwh6_11*x743);
IkReal x807=(gclwh8_11*x725);
IkReal x808=(gclwh7_11*x764);
IkReal x809=(gclwh12_11*x764);
IkReal x810=(gclwh8_11*x759);
IkReal x811=(gclwh15_11*x759);
IkReal x812=((0.0130645648033581)*x740);
IkReal x813=(gclwh3_11*x731);
IkReal x814=(gclwh1_11*x754);
IkReal x815=(gclwh14_11*x737);
IkReal x816=(gclwh6_11*x766);
IkReal x817=(gclwh6_8*x743);
IkReal x818=(gclwh9_12*x779);
IkReal x819=((2.0)*gclwh14_10*x730);
IkReal x820=((2.0)*gclwh12_10*x735);
IkReal x821=((2.0)*gclwh6_10*x733);
IkReal x822=((2.0)*gclwh9_10*x730);
IkReal x823=((2.0)*gclwh8_10*x722);
IkReal x824=((2.0)*gclwh7_10*x735);
IkReal x825=((1.0)*gclwh6_10*x743);
IkReal x826=(gclwh14_10*r01*x751);
IkReal x827=((1.0)*gclwh8_10*x725);
IkReal x828=((1.0)*gclwh12_10*x739);
IkReal x829=((2.0)*gclwh15_10*x722);
IkReal x830=((2.0)*gclwh13_10*x733);
IkReal x831=(gclwh9_10*r01*x751);
IkReal x832=((1.0)*gclwh7_10*x739);
IkReal x833=((2.0)*gclwh13_11*x733);
IkReal x834=((2.0)*gclwh15_11*x722);
IkReal x835=((2.0)*gclwh9_11*x730);
IkReal x836=((2.0)*gclwh6_11*x733);
IkReal x837=(x740*x751);
IkReal x838=((2.0)*gclwh7_11*x735);
IkReal x839=((2.0)*gclwh14_11*x730);
IkReal x840=((2.0)*gclwh8_11*x722);
IkReal x841=((2.0)*gclwh12_11*x735);
IkReal x842=((1.0)*gclwh15_11*x725);
IkReal x843=(x799+x834+x833+x808+x805+x804+x807+x806+x801+x800+x803+x802);
IkReal x844=(x795+x797+x796+x798+x829+x828+x827+x826+x825+x830+x831+x832);
IkReal x845=(x791+x790+x793+x792+x794+x786+x787+x785+x788+x789+x819+x823+x822+x821+x820+x824);
IkReal x846=(x816+x814+x815+x812+x813+x810+x811+x835+x836+x837+x838+x839+x841+x840+x842+x809);
op[60]=((((-1.0)*gclwh6_6*x783))+((x745*x753))+((x748*x778))+(((-0.38056)*gclwh12_6*x735))+(((-0.2840604)*gclwh14_14*x730))+(((-0.38056)*gclwh9_6*x730))+(((-0.0434981325281067)*x756))+(((0.2840604)*gclwh15_14*x722))+((x738*x745))+(((0.19028)*gclwh8_6*x725))+(((-1.0)*gclwh8_14*x747))+((x745*x777))+(((-0.2840604)*gclwh8_14*x722))+(((-0.1420302)*gclwh15_14*x725))+(((0.00248592539078297)*x752))+(((-1.0)*gclwh8_6*x746))+(((-0.00185556275193391)*x728))+(((-0.0434981325281067)*x741))+(((0.1420302)*gclwh6_14*x743))+(((-0.38056)*gclwh6_6*x733))+((x752*x778))+(((0.19028)*gclwh7_6*x739))+(((0.38056)*gclwh13_6*x733))+(((0.19028)*gclwh12_6*x739))+(((0.1420302)*gclwh8_14*x725))+(((-1.0)*gclwh15_14*x747))+(((-0.2840604)*gclwh7_14*x735))+(((-1.0)*gclwh13_6*x783))+(((-0.00248592539078297)*x726))+((gclwh7_6*x724))+(((-0.19028)*gclwh15_6*x725))+(((-1.0)*gclwh14_14*x742))+(((0.19028)*gclwh6_6*x743))+(((-1.0)*x844))+((gclwh9_14*x742))+(((-0.38056)*gclwh8_6*x722))+(((-0.2840604)*gclwh9_14*x730))+(((0.00185556275193391)*x738))+(((-0.00185556275193391)*x781))+(((-1.0)*gclwh12_6*x724))+x845+(((0.0434981325281067)*x762))+(((-0.38056)*gclwh7_6*x735))+(((-0.00248592539078297)*x748))+(((-0.2840604)*gclwh12_14*x735))+(((-0.2840604)*gclwh6_14*x733))+((x728*x745))+(((-0.19028)*gclwh13_6*x743))+(((0.38056)*gclwh15_6*x722))+(((0.0434981325281067)*x780))+(((0.0324681966711872)*x736))+(((-0.38056)*gclwh14_6*x730)));
op[61]=((0.05637905611204)+((x745*x784))+(((0.00248592539078297)*x721))+((gclwh7_8*x724))+(((0.1420302)*gclwh7_12*x739))+(((-0.38056)*gclwh12_8*x735))+(((-0.0434981325281067)*x750))+((x771*x778))+(((-0.38056)*gclwh9_8*x730))+(((0.0434981325281067)*x729))+(((-0.00185556275193391)*x723))+(((0.19028)*gclwh12_8*x739))+(((0.1420302)*gclwh8_12*x725))+(((0.1420302)*gclwh12_12*x739))+(((-0.0434981325281067)*x749))+(((-0.2840604)*gclwh9_12*x730))+(((0.38056)*gclwh13_8*x733))+(((-0.1420302)*gclwh15_12*x725))+(((-1.0)*gclwh14_12*x742))+(((-1.0)*gclwh6_8*x783))+(((-0.0324681966711872)*x734))+(((-1.0)*gclwh15_8*x746))+(((-0.19028)*gclwh15_8*x725))+(((0.19028)*x817))+((gclwh7_12*x744))+(((-0.38056)*gclwh6_8*x733))+(((-1.0)*x846))+(((-1.0)*gclwh12_8*x724))+(((0.2840604)*gclwh13_12*x733))+(((-1.0)*gclwh8_12*x747))+(((-0.2840604)*gclwh7_12*x735))+(((0.19028)*gclwh7_8*x739))+(((-1.0)*gclwh13_8*x783))+(((-0.38056)*gclwh7_8*x735))+(((-0.2840604)*gclwh8_12*x722))+(((0.2840604)*gclwh15_12*x722))+((x721*x778))+(((-0.2840604)*gclwh12_12*x735))+(((-1.0)*gclwh12_12*x744))+(((-0.00248592539078297)*x771))+(((-0.38056)*gclwh14_8*x730))+x843+(((0.0434981325281067)*x765))+(((-0.2840604)*gclwh14_12*x730))+(((0.38056)*gclwh15_8*x722))+(((-0.19028)*gclwh13_8*x743))+(((0.19028)*gclwh8_8*x725))+(((-1.0)*gclwh15_12*x747))+(((-1.0)*gclwh8_8*x746))+((x745*x768))+((gclwh9_12*x742))+(((-1.0)*x723*x745))+(((-0.38056)*gclwh8_8*x722)));
op[62]=((((0.28406)*gclwh15_14*x725))+(((-5.22582592134323e-9)*x726))+(((-1.0)*x728*x761))+(((-0.00371112027804189)*x738))+(((-8.0e-7)*gclwh12_6*x735))+(((-1.0)*gclwh8_6*x774))+(((-8.0e-7)*gclwh6_6*x733))+((x752*x755))+(((-0.56812)*gclwh15_14*x722))+(((0.56812)*gclwh14_14*x730))+(((-1.0)*gclwh6_6*x775))+(((4.0e-7)*gclwh7_6*x739))+(((-8.0e-7)*gclwh14_6*x730))+(((-8.0e-7)*gclwh7_6*x735))+(((-1.0)*gclwh12_6*x758))+(((0.56812)*gclwh12_14*x735))+(((-1.0)*x738*x761))+(((4.0e-7)*gclwh12_6*x739))+(((9.14402617786561e-8)*x762))+(((8.0e-7)*gclwh13_6*x733))+(((-8.0e-7)*gclwh8_6*x722))+(((4.0e-7)*gclwh6_6*x743))+((gclwh8_14*x763))+(((-1.0)*x753*x761))+(((-9.14402617786561e-8)*x756))+(((0.56812)*gclwh6_14*x733))+(((9.14402617786561e-8)*x780))+(((-0.0649363019021127)*x736))+(((-1.0)*gclwh9_14*x732))+(((-0.28406)*gclwh6_14*x743))+(((-9.14402617786561e-8)*x741))+(((5.22582592134323e-9)*x752))+(((8.0e-7)*gclwh15_6*x722))+(((0.56812)*gclwh9_14*x730))+(((-1.0)*gclwh13_6*x775))+(((-5.22582592134323e-9)*x748))+(((0.56812)*gclwh7_14*x735))+(((-4.0e-7)*gclwh15_6*x725))+(((-1.0)*x761*x777))+(((-8.0e-7)*gclwh9_6*x730))+((x748*x755))+((gclwh7_6*x758))+(((0.00371112027804189)*x781))+(((0.56812)*gclwh8_14*x722))+(((-4.0e-7)*gclwh13_6*x743))+(((-0.28406)*gclwh8_14*x725))+(((0.00371112027804189)*x728))+((gclwh14_14*x732))+((gclwh15_14*x763))+(((4.0e-7)*gclwh8_6*x725)));
op[63]=((-0.080690045)+(((0.56812)*gclwh12_12*x735))+(((5.22582592134323e-9)*x721))+(((-0.56812)*gclwh13_12*x733))+((x723*x761))+(((-1.0)*x761*x784))+(((-0.28406)*gclwh7_12*x739))+(((0.0649363019021127)*x734))+(((4.0e-7)*gclwh12_8*x739))+((gclwh7_8*x758))+(((-4.0e-7)*gclwh13_8*x743))+(((0.56812)*gclwh8_12*x722))+(((9.14402617786561e-8)*x729))+(((8.0e-7)*gclwh15_8*x722))+(((0.28406)*gclwh15_12*x725))+(((-0.56812)*gclwh15_12*x722))+(((-1.0)*gclwh6_8*x775))+(((9.14402617786561e-8)*x765))+(((-1.0)*gclwh12_8*x758))+((gclwh8_12*x763))+(((4.0e-7)*x817))+(((-8.0e-7)*gclwh9_8*x730))+(((0.56812)*gclwh9_12*x730))+(((-1.0)*gclwh15_8*x774))+(((-9.14402617786561e-8)*x750))+(((-8.0e-7)*gclwh7_8*x735))+(((8.0e-7)*gclwh13_8*x733))+(((-4.0e-7)*gclwh15_8*x725))+(((-9.14402617786561e-8)*x749))+(((-0.28406)*gclwh8_12*x725))+((gclwh14_12*x732))+(((-1.0)*gclwh13_8*x775))+(((-8.0e-7)*gclwh8_8*x722))+(((-0.28406)*gclwh12_12*x739))+(((-0.00371112027804189)*x772))+(((-5.22582592134323e-9)*x771))+(((4.0e-7)*gclwh8_8*x725))+((gclwh15_12*x763))+(((-1.0)*gclwh9_12*x732))+(((4.0e-7)*gclwh7_8*x739))+((x721*x755))+(((0.56812)*gclwh14_12*x730))+(((-8.0e-7)*gclwh14_8*x730))+((x755*x771))+(((0.56812)*gclwh7_12*x735))+(((0.00371112027804189)*x782))+(((-1.0)*x761*x768))+(((-1.0)*gclwh8_8*x774))+(((-8.0e-7)*gclwh6_8*x733))+(((0.00371112027804189)*x723))+(((-8.0e-7)*gclwh12_8*x735)));
op[64]=((((0.0324681052309254)*x736))+(((0.00122519488725892)*x748))+(((-0.1420298)*gclwh15_14*x725))+(((0.00185555752610799)*x753))+(((-1.0)*gclwh8_14*x773))+((x738*x760))+(((-1.0)*gclwh7_6*x767))+(((-0.09378)*gclwh8_6*x725))+(((-0.2840596)*gclwh12_14*x735))+(((0.1420298)*gclwh8_14*x725))+((gclwh12_6*x767))+(((-0.18756)*gclwh15_6*x722))+(((0.0214381693740059)*x741))+(((-0.2840596)*gclwh7_14*x735))+(((-0.2840596)*gclwh14_14*x730))+((gclwh13_6*x769))+(((-0.09378)*gclwh6_6*x743))+(((0.00122519488725892)*x726))+(((-1.0)*gclwh15_14*x773))+(((-0.09378)*gclwh7_6*x739))+(((0.18756)*gclwh14_6*x730))+(((0.18756)*gclwh9_6*x730))+(((0.18756)*gclwh12_6*x735))+((gclwh8_6*x770))+(((0.18756)*gclwh7_6*x735))+(((0.0214381693740059)*x756))+(((-0.2840596)*gclwh6_14*x733))+((gclwh6_6*x769))+(((-1.0)*x844))+(((-0.2840596)*gclwh9_14*x730))+(((0.09378)*gclwh15_6*x725))+(((-0.00185555752610799)*x777))+(((-0.09378)*gclwh12_6*x739))+(((0.2840596)*gclwh15_14*x722))+(((0.18756)*gclwh6_6*x733))+(((0.00185555752610799)*x738))+(((0.1420298)*gclwh6_14*x743))+(((-1.0)*x752*x757))+(((-0.18756)*gclwh13_6*x733))+x845+(((-0.0214381693740059)*x780))+(((0.18756)*gclwh8_6*x722))+(((-0.2840596)*gclwh8_14*x722))+(((-0.00185555752610799)*x728))+((x728*x760))+(((-1.0)*x748*x757))+((x760*x777))+(((-0.00185555752610799)*x781))+((x753*x760))+(((0.09378)*gclwh13_6*x743))+(((-0.0214381693740059)*x762))+(((-0.00122519488725892)*x752)));
op[65]=((0.02896715248804)+(((-0.2840596)*gclwh8_12*x722))+(((-0.00185555752610799)*x768))+(((-1.0)*x757*x771))+(((-0.2840596)*gclwh12_12*x735))+(((-0.09378)*x817))+(((0.00122519488725892)*x771))+(((0.18756)*gclwh8_8*x722))+(((-0.18756)*gclwh13_8*x733))+(((0.00185555752610799)*x784))+(((-0.00122519488725892)*x721))+(((-0.09378)*gclwh7_8*x739))+(((0.09378)*gclwh13_8*x743))+((x760*x784))+((gclwh6_8*x769))+(((-0.09378)*gclwh12_8*x739))+(((0.0214381693740059)*x749))+((gclwh8_8*x770))+(((0.1420298)*gclwh8_12*x725))+((gclwh15_8*x770))+((x760*x768))+(((-1.0)*x723*x760))+(((-0.2840596)*gclwh14_12*x730))+(((0.0214381693740059)*x750))+((gclwh13_8*x769))+((gclwh12_8*x767))+(((-0.0324681052309254)*x734))+(((-0.1420298)*gclwh15_12*x725))+(((-1.0)*x846))+(((-0.09378)*gclwh8_8*x725))+(((0.18756)*gclwh7_8*x735))+(((0.09378)*gclwh15_8*x725))+(((0.18756)*gclwh14_8*x730))+(((-1.0)*gclwh8_12*x773))+(((0.1420298)*gclwh12_12*x739))+(((0.18756)*gclwh6_8*x733))+(((-0.0214381693740059)*x729))+(((-1.0)*x721*x757))+x843+(((0.1420298)*gclwh7_12*x739))+(((-0.18756)*gclwh15_8*x722))+(((-0.2840596)*gclwh7_12*x735))+(((-0.00185555752610799)*x723))+(((-0.2840596)*gclwh9_12*x730))+(((0.00185555752610799)*x772))+(((-1.0)*gclwh7_8*x767))+(((-0.00185555752610799)*x782))+(((-1.0)*gclwh15_12*x773))+(((-0.0214381693740059)*x765))+(((0.18756)*gclwh9_8*x730))+(((0.2840596)*gclwh15_12*x722))+(((0.2840596)*gclwh13_12*x733))+(((0.18756)*gclwh12_8*x735)));
op[66]=0;
op[67]=((-0.1420302)+pz);
op[68]=0;
op[69]=0.28406;
op[70]=0;
op[71]=((-0.1420298)+pz);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ij2 += 3)
{
IkReal htj2 = zeror[ij2+0], htj3 = zeror[ij2+1], htj1 = zeror[ij2+2];
if(isnan(htj2)||isnan(htj3)||isnan(htj1)){
continue;
}
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x847=htj2*htj2;
CheckValue<IkReal> x848=IKPowWithIntegerCheck(((1.0)+x847),-1);
if(!x848.valid){
continue;
}
cj2array[numsolutions]=((x848.value)*(((1.0)+(((-1.0)*x847)))));
CheckValue<IkReal> x849=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x849.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x849.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x850=htj3*htj3;
CheckValue<IkReal> x851=IKPowWithIntegerCheck(((1.0)+x850),-1);
if(!x851.valid){
continue;
}
cj3array[numsolutions]=((x851.value)*(((1.0)+(((-1.0)*x850)))));
CheckValue<IkReal> x852=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x852.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x852.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x853=htj1*htj1;
CheckValue<IkReal> x854=IKPowWithIntegerCheck(((1.0)+x853),-1);
if(!x854.valid){
continue;
}
cj1array[numsolutions]=((x854.value)*(((1.0)+(((-1.0)*x853)))));
CheckValue<IkReal> x855=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x855.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x855.value));
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j2valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj2 = 16;
_nj3 = 1;
_nj1 = 1;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( !j2valid[iij2] ) { continue; }
if( IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij2]-cj3array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij2]-sj3array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij2]-cj1array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij2]-sj1array[iij2]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j2valid[iij2]=false; _ij2[1] = iij2; _ij3[1] = 0; _ij1[1] = 0;  break; 
}
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

    j3 = j3array[ij2]; cj3 = cj3array[ij2]; sj3 = sj3array[ij2];

    j1 = j1array[ij2]; cj1 = cj1array[ij2]; sj1 = sj1array[ij2];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j0eval[3];
IkReal x856=cj1*cj1;
IkReal x857=((50000000.0)*r02);
IkReal x858=((50000000.0)*r12);
IkReal x859=(cj1*sj1);
j0eval[0]=rxp2_2;
j0eval[1]=((IKabs(((((-1.0)*x856*x858))+x858+(((-1.0)*x857*x859)))))+(IKabs(((((-1.0)*x857))+((x856*x857))+(((-1.0)*x858*x859))))));
j0eval[2]=IKsign(rxp2_2);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x860=pz*pz;
j0eval[0]=((((-1.0)*pp))+x860);
j0eval[1]=IKsign(((((437444067.0)*x860))+(((-437444067.0)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x861=((((-1.0)*pz*r22))+npz);
j0eval[0]=x861;
j0eval[1]=IKsign(x861);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj1=0;
cj1=1.0;
j1=0;
j5eval[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=1.0;
j1=0;
IkReal x862=sj2*sj2;
IkReal x863=sj3*sj3;
IkReal x864=cj2*cj2;
IkReal x865=cj3*cj3;
j4eval[0]=(((x863*x864))+((x862*x865))+((x862*x863))+((x864*x865)));
j4eval[1]=((IKabs((((cj2*cj3))+(((-1.0)*sj2*sj3)))))+(IKabs((((cj2*sj3))+((cj3*sj2))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x866=(cj2*r22);
IkReal x867=(r22*sj2);
if( IKabs((((cj3*x866))+(((-1.0)*sj3*x867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj3*x866))+((cj3*x867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*x866))+(((-1.0)*sj3*x867))))+IKsqr((((sj3*x866))+((cj3*x867))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj3*x866))+(((-1.0)*sj3*x867))), (((sj3*x866))+((cj3*x867))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x868=IKcos(j4);
IkReal x869=IKsin(j4);
IkReal x870=((1.0)*sj2);
IkReal x871=(cj2*x868);
IkReal x872=(cj3*x869);
IkReal x873=(sj3*x869);
evalcond[0]=((((-1.0)*sj3*x868*x870))+((cj3*x871))+(((-1.0)*x870*x872))+(((-1.0)*cj2*x873)));
evalcond[1]=(((cj2*x872))+((sj3*x871))+((cj3*sj2*x868))+(((-1.0)*r22))+(((-1.0)*x870*x873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x874=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x874);
rxp1_0=(pz*r11);
rxp1_1=(r01*x874);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x875=(px*sj2);
IkReal x876=((2.0e-7)*cj3);
IkReal x877=(cj2*py);
IkReal x878=((0.14203)*cj3);
IkReal x879=(cj2*px);
IkReal x880=((2.0e-7)*sj3);
IkReal x881=((((-1.0)*pp))+(pz*pz));
IkReal x882=((0.14203)*py*sj2);
j0eval[0]=x881;
j0eval[1]=((IKabs(((((-0.11430032722332)*py))+((py*sj2*x876))+((x877*x880))+(((0.04825)*x877))+x882+(((-1.0)*sj3*x882))+((x877*x878)))))+(IKabs(((((-0.11430032722332)*px))+((x879*x880))+(((-0.14203)*sj3*x875))+((x878*x879))+(((0.14203)*x875))+(((0.04825)*x879))+((x875*x876))))));
j0eval[2]=IKsign(x881);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x883=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x883);
rxp1_0=(pz*r11);
rxp1_1=(r01*x883);
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
px=0;
py=0;
pp=pz*pz;
rxp0_2=0;
rxp1_2=0;
IkReal x884=r10*r10;
IkReal x885=r11*r11;
IkReal x886=r01*r01;
IkReal x887=r00*r00;
IkReal x888=((16.0)*cj4);
IkReal x889=(cj3*sj2);
IkReal x890=(r01*r11);
IkReal x891=(cj2*sj3);
IkReal x892=((4.0)*sj4);
IkReal x893=(cj2*cj3);
IkReal x894=(sj2*sj3);
IkReal x895=((16.0)*sj4);
IkReal x896=(r00*r10);
IkReal x897=(r00*r11);
IkReal x898=(r01*r10);
IkReal x899=((4.0)*cj4*x885);
IkReal x900=((4.0)*cj4*x884);
IkReal x901=(x891*x900);
IkReal x902=(x891*x899);
IkReal x903=(x884*x892*x893);
IkReal x904=(x889*x899);
IkReal x905=(x885*x892*x893);
IkReal x906=(x889*x900);
IkReal x907=(x884*x892*x894);
IkReal x908=(x885*x892*x894);
IkReal x909=(((x894*x895*x896))+((x890*x894*x895)));
IkReal x910=(x907+x908);
IkReal x911=(((x893*x895*x896))+((x890*x893*x895))+((x888*x889*x896))+((x888*x889*x890))+((x888*x891*x896))+((x888*x890*x891)));
IkReal x912=(x904+x905+x906+x901+x902+x903);
j0eval[0]=((((0.5)*(IKabs(((((-1.0)*x912))+(((4.0)*x897))+(((-4.0)*x898))+x910)))))+(((0.5)*(IKabs(((((-1.0)*x909))+x911)))))+(IKabs((((x887*x894*x895))+(((-12.0)*x898))+(((-1.0)*x886*x888*x889))+(((-1.0)*x886*x893*x895))+(((-1.0)*x886*x888*x891))+(((-1.0)*x887*x888*x891))+(((-1.0)*x910))+(((-1.0)*x887*x888*x889))+(((-1.0)*x887*x893*x895))+((x886*x894*x895))+(((12.0)*x897))+x912)))+(((0.5)*(IKabs(((((-1.0)*x911))+x909))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x913=r10*r10;
IkReal x914=r11*r11;
IkReal x915=r01*r01;
IkReal x916=r00*r00;
IkReal x917=((16.0)*cj4);
IkReal x918=(cj3*sj2);
IkReal x919=(r01*r11);
IkReal x920=(cj2*sj3);
IkReal x921=((4.0)*sj4);
IkReal x922=(cj2*cj3);
IkReal x923=(sj2*sj3);
IkReal x924=((16.0)*sj4);
IkReal x925=(r00*r10);
IkReal x926=(r00*r11);
IkReal x927=(r01*r10);
IkReal x928=((4.0)*cj4*x914);
IkReal x929=((4.0)*cj4*x913);
IkReal x930=(x920*x929);
IkReal x931=(x920*x928);
IkReal x932=(x913*x921*x922);
IkReal x933=(x918*x928);
IkReal x934=(x914*x921*x922);
IkReal x935=(x918*x929);
IkReal x936=(x913*x921*x923);
IkReal x937=(x914*x921*x923);
IkReal x938=(((x919*x923*x924))+((x923*x924*x925)));
IkReal x939=(x937+x936);
IkReal x940=(((x917*x918*x919))+((x922*x924*x925))+((x917*x918*x925))+((x917*x919*x920))+((x917*x920*x925))+((x919*x922*x924)));
IkReal x941=(x935+x934+x931+x930+x933+x932);
IkReal x942=((((-1.0)*x941))+(((-4.0)*x927))+(((4.0)*x926))+x939);
IkReal x943=((((-12.0)*x927))+(((12.0)*x926))+(((-1.0)*x916*x922*x924))+(((-1.0)*x915*x917*x918))+(((-1.0)*x915*x922*x924))+(((-1.0)*x916*x917*x920))+(((-1.0)*x916*x917*x918))+((x915*x923*x924))+((x916*x923*x924))+(((-1.0)*x915*x917*x920))+x941+(((-1.0)*x939)));
op[0]=x942;
op[1]=((((-1.0)*x940))+x938);
op[2]=x943;
op[3]=0;
op[4]=x943;
op[5]=(x940+(((-1.0)*x938)));
op[6]=x942;
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x944=((1.0)*sj0);
if( IKabs(((((-1.0)*r00*x944))+((cj0*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x944))+((cj0*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x944))+((cj0*r10))))+IKsqr(((((-1.0)*r01*x944))+((cj0*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r00*x944))+((cj0*r10))), ((((-1.0)*r01*x944))+((cj0*r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x945=IKsin(j5);
IkReal x946=IKcos(j5);
IkReal x947=(cj0*r11);
IkReal x948=((1.0)*cj4);
IkReal x949=(cj0*r10);
IkReal x950=(cj0*r00);
IkReal x951=((1.0)*r01);
IkReal x952=(sj0*x945);
IkReal x953=((1.0)*x946);
IkReal x954=(sj0*x946);
evalcond[0]=(((cj0*r01*x946))+((r11*x954))+((x945*x950))+((r10*x952)));
evalcond[1]=(((x945*x947))+((r00*x954))+(((-1.0)*x949*x953))+(((-1.0)*x951*x952)));
evalcond[2]=((1.0)+(((-1.0)*x945*x949))+((r01*x954))+(((-1.0)*x947*x953))+((r00*x952)));
evalcond[3]=((((-1.0)*cj3*sj2*x948))+(((-1.0)*cj0*x945*x951))+(((-1.0)*r11*x952))+((sj2*sj3*sj4))+(((-1.0)*cj2*cj3*sj4))+((x946*x950))+(((-1.0)*cj2*sj3*x948))+((r10*x954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x955=((0.14203)*sj2);
IkReal x956=((-0.11430032722332)+(((0.14203)*cj2*cj3))+(((2.0e-7)*cj3*sj2))+(((-1.0)*sj3*x955))+(((2.0e-7)*cj2*sj3))+x955+(((0.04825)*cj2)));
CheckValue<IkReal> x957 = IKatan2WithCheck(IkReal((py*x956)),IkReal((px*x956)),IKFAST_ATAN2_MAGTHRESH);
if(!x957.valid){
continue;
}
CheckValue<IkReal> x958=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x958.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x957.value)+(((1.5707963267949)*(x958.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x959=IKsin(j0);
IkReal x960=IKcos(j0);
IkReal x961=((0.14203)*sj2);
evalcond[0]=(((px*x959))+(((-1.0)*py*x960)));
evalcond[1]=((-0.11430032722332)+((px*x960))+(((0.14203)*cj2*cj3))+((py*x959))+(((-1.0)*sj3*x961))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+x961+(((0.04825)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x962=((1.0)*sj0);
if( IKabs(((((-1.0)*r00*x962))+((cj0*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x962))+((cj0*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x962))+((cj0*r10))))+IKsqr(((((-1.0)*r01*x962))+((cj0*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r00*x962))+((cj0*r10))), ((((-1.0)*r01*x962))+((cj0*r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x963=IKsin(j5);
IkReal x964=IKcos(j5);
IkReal x965=(cj0*r11);
IkReal x966=((1.0)*cj4);
IkReal x967=(cj0*r10);
IkReal x968=(cj0*r00);
IkReal x969=((1.0)*r01);
IkReal x970=(sj0*x963);
IkReal x971=((1.0)*x964);
IkReal x972=(sj0*x964);
evalcond[0]=(((cj0*r01*x964))+((x963*x968))+((r10*x970))+((r11*x972)));
evalcond[1]=((((-1.0)*x969*x970))+((r00*x972))+(((-1.0)*x967*x971))+((x963*x965)));
evalcond[2]=((1.0)+(((-1.0)*x965*x971))+(((-1.0)*x963*x967))+((r01*x972))+((r00*x970)));
evalcond[3]=((((-1.0)*cj3*sj2*x966))+((x964*x968))+((sj2*sj3*sj4))+(((-1.0)*cj2*cj3*sj4))+(((-1.0)*cj0*x963*x969))+(((-1.0)*r11*x970))+((r10*x972))+(((-1.0)*cj2*sj3*x966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x973=(((cj2*sj3))+((cj3*sj2)));
IkReal x974=(((cj2*cj3))+(((-1.0)*sj2*sj3)));
CheckValue<IkReal> x977 = IKatan2WithCheck(IkReal(x973),IkReal(x974),IKFAST_ATAN2_MAGTHRESH);
if(!x977.valid){
continue;
}
IkReal x975=((1.0)*(x977.value));
if((((x973*x973)+(x974*x974))) < -0.00001)
continue;
CheckValue<IkReal> x978=IKPowWithIntegerCheck(IKabs(IKsqrt(((x973*x973)+(x974*x974)))),-1);
if(!x978.valid){
continue;
}
if( ((r22*(x978.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x978.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x976=IKasin((r22*(x978.value)));
j4array[0]=(x976+(((-1.0)*x975)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x976))+(((-1.0)*x975)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x979=((1.0)*cj2);
IkReal x980=(r21*sj4);
IkReal x981=(cj3*r20);
IkReal x982=((1.0)*sj2);
IkReal x983=(cj4*sj3);
IkReal x984=((-1.0)+(r22*r22));
j5eval[0]=x984;
j5eval[1]=((IKabs((((cj2*r20*sj3*sj4))+((sj2*sj4*x981))+((r20*sj2*x983))+(((-1.0)*cj4*x979*x981)))))+(IKabs(((((-1.0)*sj3*x979*x980))+(((-1.0)*cj3*x980*x982))+((cj2*cj3*cj4*r21))+(((-1.0)*r21*x982*x983))))));
j5eval[2]=IKsign(x984);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x985=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x985);
rxp1_0=(pz*r11);
rxp1_1=(r01*x985);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x986=(px*sj2);
IkReal x987=((2.0e-7)*cj3);
IkReal x988=(cj2*py);
IkReal x989=((0.14203)*cj3);
IkReal x990=(cj2*px);
IkReal x991=((2.0e-7)*sj3);
IkReal x992=((((-1.0)*pp))+(pz*pz));
IkReal x993=((0.14203)*py*sj2);
j0eval[0]=x992;
j0eval[1]=((IKabs(((((-0.11430032722332)*py))+((py*sj2*x987))+((x988*x991))+((x988*x989))+(((-1.0)*sj3*x993))+(((0.04825)*x988))+x993)))+(IKabs(((((-0.11430032722332)*px))+(((0.14203)*x986))+((x989*x990))+(((0.04825)*x990))+((x990*x991))+((x986*x987))+(((-0.14203)*sj3*x986))))));
j0eval[2]=IKsign(x992);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x994=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x994);
rxp1_0=(pz*r11);
rxp1_1=(r01*x994);
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
px=0;
py=0;
pp=pz*pz;
rxp0_2=0;
rxp1_2=0;
IkReal x995=r10*r10;
IkReal x996=r11*r11;
IkReal x997=r01*r01;
IkReal x998=r00*r00;
IkReal x999=((16.0)*cj4);
IkReal x1000=(cj3*sj2);
IkReal x1001=(r01*r11);
IkReal x1002=(cj2*sj3);
IkReal x1003=((4.0)*sj4);
IkReal x1004=(cj2*cj3);
IkReal x1005=(sj2*sj3);
IkReal x1006=((16.0)*sj4);
IkReal x1007=(r00*r10);
IkReal x1008=(r00*r11);
IkReal x1009=(r01*r10);
IkReal x1010=((4.0)*cj4*x996);
IkReal x1011=((4.0)*cj4*x995);
IkReal x1012=(x1002*x1011);
IkReal x1013=(x1002*x1010);
IkReal x1014=(x1003*x1004*x995);
IkReal x1015=(x1000*x1010);
IkReal x1016=(x1003*x1004*x996);
IkReal x1017=(x1000*x1011);
IkReal x1018=(x1003*x1005*x995);
IkReal x1019=(x1003*x1005*x996);
IkReal x1020=(((x1005*x1006*x1007))+((x1001*x1005*x1006)));
IkReal x1021=(x1018+x1019);
IkReal x1022=(((x1001*x1004*x1006))+((x1002*x1007*x999))+((x1000*x1001*x999))+((x1004*x1006*x1007))+((x1000*x1007*x999))+((x1001*x1002*x999)));
IkReal x1023=(x1014+x1015+x1016+x1017+x1012+x1013);
j0eval[0]=((((0.5)*(IKabs((x1022+(((-1.0)*x1020)))))))+(((0.5)*(IKabs((x1021+(((-4.0)*x1009))+(((-1.0)*x1023))+(((4.0)*x1008)))))))+(((0.5)*(IKabs((x1020+(((-1.0)*x1022)))))))+(IKabs((x1023+(((-1.0)*x1000*x998*x999))+(((-1.0)*x1004*x1006*x997))+(((-1.0)*x1004*x1006*x998))+(((-1.0)*x1021))+(((-1.0)*x1002*x997*x999))+(((-1.0)*x1000*x997*x999))+(((12.0)*x1008))+(((-1.0)*x1002*x998*x999))+((x1005*x1006*x997))+((x1005*x1006*x998))+(((-12.0)*x1009))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x1024=r10*r10;
IkReal x1025=r11*r11;
IkReal x1026=r01*r01;
IkReal x1027=r00*r00;
IkReal x1028=((16.0)*cj4);
IkReal x1029=(cj3*sj2);
IkReal x1030=(r01*r11);
IkReal x1031=(cj2*sj3);
IkReal x1032=((4.0)*sj4);
IkReal x1033=(cj2*cj3);
IkReal x1034=(sj2*sj3);
IkReal x1035=((16.0)*sj4);
IkReal x1036=(r00*r10);
IkReal x1037=(r00*r11);
IkReal x1038=(r01*r10);
IkReal x1039=((4.0)*cj4*x1025);
IkReal x1040=((4.0)*cj4*x1024);
IkReal x1041=(x1031*x1040);
IkReal x1042=(x1031*x1039);
IkReal x1043=(x1024*x1032*x1033);
IkReal x1044=(x1029*x1039);
IkReal x1045=(x1025*x1032*x1033);
IkReal x1046=(x1029*x1040);
IkReal x1047=(x1024*x1032*x1034);
IkReal x1048=(x1025*x1032*x1034);
IkReal x1049=(((x1034*x1035*x1036))+((x1030*x1034*x1035)));
IkReal x1050=(x1047+x1048);
IkReal x1051=(((x1028*x1029*x1036))+((x1028*x1029*x1030))+((x1028*x1030*x1031))+((x1028*x1031*x1036))+((x1033*x1035*x1036))+((x1030*x1033*x1035)));
IkReal x1052=(x1043+x1042+x1041+x1046+x1045+x1044);
IkReal x1053=((((-1.0)*x1052))+(((4.0)*x1037))+x1050+(((-4.0)*x1038)));
IkReal x1054=((((-1.0)*x1050))+(((-1.0)*x1026*x1028*x1029))+(((-1.0)*x1027*x1033*x1035))+x1052+(((-1.0)*x1026*x1028*x1031))+((x1027*x1034*x1035))+(((-1.0)*x1027*x1028*x1031))+((x1026*x1034*x1035))+(((12.0)*x1037))+(((-1.0)*x1027*x1028*x1029))+(((-12.0)*x1038))+(((-1.0)*x1026*x1033*x1035)));
op[0]=x1053;
op[1]=((((-1.0)*x1051))+x1049);
op[2]=x1054;
op[3]=0;
op[4]=x1054;
op[5]=(x1051+(((-1.0)*x1049)));
op[6]=x1053;
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1055=((1.0)*sj0);
if( IKabs(((((-1.0)*r00*x1055))+((cj0*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1055))+((cj0*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1055))+((cj0*r10))))+IKsqr(((((-1.0)*r01*x1055))+((cj0*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r00*x1055))+((cj0*r10))), ((((-1.0)*r01*x1055))+((cj0*r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1056=IKsin(j5);
IkReal x1057=IKcos(j5);
IkReal x1058=(cj0*r11);
IkReal x1059=((1.0)*cj4);
IkReal x1060=(cj0*r10);
IkReal x1061=(cj0*r00);
IkReal x1062=((1.0)*r01);
IkReal x1063=(sj0*x1056);
IkReal x1064=((1.0)*x1057);
IkReal x1065=(sj0*x1057);
evalcond[0]=(((x1056*x1061))+((r10*x1063))+((cj0*r01*x1057))+((r11*x1065)));
evalcond[1]=((((-1.0)*x1060*x1064))+((x1056*x1058))+(((-1.0)*x1062*x1063))+((r00*x1065)));
evalcond[2]=((1.0)+(((-1.0)*x1056*x1060))+(((-1.0)*x1058*x1064))+((r01*x1065))+((r00*x1063)));
evalcond[3]=((((-1.0)*r11*x1063))+(((-1.0)*cj0*x1056*x1062))+(((-1.0)*cj3*sj2*x1059))+((x1057*x1061))+((sj2*sj3*sj4))+(((-1.0)*cj2*cj3*sj4))+((r10*x1065))+(((-1.0)*cj2*sj3*x1059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1066=((0.14203)*sj2);
IkReal x1067=((-0.11430032722332)+(((0.14203)*cj2*cj3))+x1066+(((-1.0)*sj3*x1066))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
CheckValue<IkReal> x1068=IKPowWithIntegerCheck(IKsign(((((-1.0)*pp))+(pz*pz))),-1);
if(!x1068.valid){
continue;
}
CheckValue<IkReal> x1069 = IKatan2WithCheck(IkReal((py*x1067)),IkReal((px*x1067)),IKFAST_ATAN2_MAGTHRESH);
if(!x1069.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1068.value)))+(x1069.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1070=IKsin(j0);
IkReal x1071=IKcos(j0);
IkReal x1072=((0.14203)*sj2);
evalcond[0]=((((-1.0)*py*x1071))+((px*x1070)));
evalcond[1]=((-0.11430032722332)+(((0.14203)*cj2*cj3))+x1072+((px*x1071))+((py*x1070))+(((-1.0)*sj3*x1072))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1073=((1.0)*sj0);
if( IKabs(((((-1.0)*r00*x1073))+((cj0*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1073))+((cj0*r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1073))+((cj0*r10))))+IKsqr(((((-1.0)*r01*x1073))+((cj0*r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r00*x1073))+((cj0*r10))), ((((-1.0)*r01*x1073))+((cj0*r11))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1074=IKsin(j5);
IkReal x1075=IKcos(j5);
IkReal x1076=(cj0*r11);
IkReal x1077=((1.0)*cj4);
IkReal x1078=(cj0*r10);
IkReal x1079=(cj0*r00);
IkReal x1080=((1.0)*r01);
IkReal x1081=(sj0*x1074);
IkReal x1082=((1.0)*x1075);
IkReal x1083=(sj0*x1075);
evalcond[0]=(((x1074*x1079))+((r10*x1081))+((r11*x1083))+((cj0*r01*x1075)));
evalcond[1]=(((x1074*x1076))+((r00*x1083))+(((-1.0)*x1078*x1082))+(((-1.0)*x1080*x1081)));
evalcond[2]=((1.0)+((r00*x1081))+((r01*x1083))+(((-1.0)*x1074*x1078))+(((-1.0)*x1076*x1082)));
evalcond[3]=((((-1.0)*r11*x1081))+((r10*x1083))+((x1075*x1079))+(((-1.0)*cj3*sj2*x1077))+((sj2*sj3*sj4))+(((-1.0)*cj2*sj3*x1077))+(((-1.0)*cj2*cj3*sj4))+(((-1.0)*cj0*x1074*x1080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1084=((1.0)*r21);
IkReal x1085=(cj3*r20);
IkReal x1086=(cj2*cj4);
IkReal x1087=(sj2*sj4);
IkReal x1088=(cj2*sj3*sj4);
IkReal x1089=(cj4*sj2*sj3);
CheckValue<IkReal> x1090=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x1090.valid){
continue;
}
CheckValue<IkReal> x1091 = IKatan2WithCheck(IkReal((((cj3*r21*x1086))+(((-1.0)*x1084*x1089))+(((-1.0)*x1084*x1088))+(((-1.0)*cj3*x1084*x1087)))),IkReal(((((-1.0)*x1085*x1086))+((r20*x1089))+((r20*x1088))+((x1085*x1087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1091.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1090.value)))+(x1091.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1092=IKsin(j5);
IkReal x1093=IKcos(j5);
IkReal x1094=((1.0)*sj4);
IkReal x1095=((1.0)*x1093);
evalcond[0]=((((-1.0)*r20*x1092))+(((-1.0)*r21*x1095)));
evalcond[1]=(((r21*x1092))+((cj2*cj3*cj4))+(((-1.0)*cj4*sj2*sj3))+(((-1.0)*cj2*sj3*x1094))+(((-1.0)*cj3*sj2*x1094))+(((-1.0)*r20*x1095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1096=(((r21*sj5))+(((-1.0)*cj5*r20)));
j0eval[0]=x1096;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=IKsign(x1096);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1097=((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5)));
j0eval[0]=x1097;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=IKsign(x1097);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1098=(cj4*r12);
IkReal x1099=((1.0)*sj3);
IkReal x1100=(cj2*cj3);
IkReal x1101=(r02*sj4);
IkReal x1102=(cj4*r02);
IkReal x1103=(r12*sj4);
IkReal x1104=((-1.0)+(r22*r22));
IkReal x1105=((1.0)*cj3*sj2);
j0eval[0]=x1104;
j0eval[1]=((IKabs(((((-1.0)*x1103*x1105))+((x1098*x1100))+(((-1.0)*sj2*x1098*x1099))+(((-1.0)*cj2*x1099*x1103)))))+(IKabs(((((-1.0)*sj2*x1099*x1102))+(((-1.0)*cj2*x1099*x1101))+((x1100*x1102))+(((-1.0)*x1101*x1105))))));
j0eval[2]=IKsign(x1104);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1106=((-1.0)*rxp0_2);
IkReal x1108 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x1108)==0){
continue;
}
IkReal x1107=pow(x1108,-0.5);
CheckValue<IkReal> x1109 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(x1106),IKFAST_ATAN2_MAGTHRESH);
if(!x1109.valid){
continue;
}
IkReal gconst0=((-1.0)*(x1109.value));
IkReal gconst1=(rxp1_2*x1107);
IkReal gconst2=(x1106*x1107);
CheckValue<IkReal> x1110 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1110.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1110.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1111=((-1.0)*rxp0_2);
CheckValue<IkReal> x1114 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(x1111),IKFAST_ATAN2_MAGTHRESH);
if(!x1114.valid){
continue;
}
IkReal x1112=((-1.0)*(x1114.value));
IkReal x1113=x1107;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst1;
cj5=gconst2;
j5=x1112;
IkReal gconst0=x1112;
IkReal gconst1=(rxp1_2*x1113);
IkReal gconst2=(x1111*x1113);
IkReal x1115=((1.0)*sj4);
j0eval[0]=((IKabs(r12))+(((0.5)*(IKabs(((((-1.0)*r02))+((cj2*cj3*cj4))+(((-1.0)*cj3*sj2*x1115))+(((-1.0)*cj2*sj3*x1115))+(((-1.0)*cj4*sj2*sj3))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
IkReal x1116=((-1.0)*rxp0_2);
CheckValue<IkReal> x1119 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(x1116),IKFAST_ATAN2_MAGTHRESH);
if(!x1119.valid){
continue;
}
IkReal x1117=((-1.0)*(x1119.value));
IkReal x1118=x1107;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst1;
cj5=gconst2;
j5=x1117;
IkReal gconst0=x1117;
IkReal gconst1=(rxp1_2*x1118);
IkReal gconst2=(x1116*x1118);
IkReal x1120=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+((cj2*sj3))+x1120+(((-1.0)*sj3*x1120))+(((710150.0)*cj2*cj3))+(((-5000000.0)*px))+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1121=(cj2*sj3);
IkReal x1122=((5000000.0)*px);
IkReal x1123=((241250.0)*cj2);
IkReal x1124=((710150.0)*sj2);
IkReal x1125=(cj3*sj2);
IkReal x1126=((710150.0)*cj2*cj3);
IkReal x1127=(sj3*x1124);
IkReal x1128=((-571501.636116601)+x1121+x1123+x1124+x1125+x1126);
op[0]=(x1128+(((-1.0)*x1127))+(((-1.0)*x1122)));
op[1]=((10000000.0)*py);
op[2]=(x1128+x1122+(((-1.0)*x1127)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1129=((1.0)*sj4);
IkReal x1130=(cj2*cj3*cj4);
IkReal x1131=(cj3*sj2*x1129);
IkReal x1132=((1.0)*cj4*sj2*sj3);
IkReal x1133=(cj2*sj3*x1129);
IkReal x1134=(x1133+x1132+x1131);
op[0]=(x1130+(((-1.0)*r02))+(((-1.0)*x1134)));
op[1]=((2.0)*r12);
op[2]=(x1130+(((-1.0)*x1134))+r02);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1135=((-1.0)*rxp1_2);
IkReal x1137 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x1137)==0){
continue;
}
IkReal x1136=pow(x1137,-0.5);
CheckValue<IkReal> x1138 = IKatan2WithCheck(IkReal(x1135),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1138.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x1138.value))));
IkReal gconst4=(x1135*x1136);
IkReal gconst5=((1.0)*rxp0_2*x1136);
CheckValue<IkReal> x1139 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1139.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1139.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1140=((-1.0)*rxp1_2);
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(x1140),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
IkReal x1141=((1.0)*(x1143.value));
IkReal x1142=x1136;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1141)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1141)));
IkReal gconst4=(x1140*x1142);
IkReal gconst5=((1.0)*rxp0_2*x1142);
j0eval[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1144=((-1.0)*rxp1_2);
CheckValue<IkReal> x1147 = IKatan2WithCheck(IkReal(x1144),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1147.valid){
continue;
}
IkReal x1145=((1.0)*(x1147.value));
IkReal x1146=x1136;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1145)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1145)));
IkReal gconst4=(x1144*x1146);
IkReal gconst5=((1.0)*rxp0_2*x1146);
j0eval[0]=0;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1148=((-1.0)*rxp1_2);
CheckValue<IkReal> x1151 = IKatan2WithCheck(IkReal(x1148),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1151.valid){
continue;
}
IkReal x1149=((1.0)*(x1151.value));
IkReal x1150=x1136;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1149)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1149)));
IkReal gconst4=(x1148*x1150);
IkReal gconst5=((1.0)*rxp0_2*x1150);
IkReal x1152=(cj4*r12);
IkReal x1153=((1.0)*sj3);
IkReal x1154=(cj2*cj3);
IkReal x1155=(r02*sj4);
IkReal x1156=(cj4*r02);
IkReal x1157=(r12*sj4);
IkReal x1158=((-1.0)+(r22*r22));
IkReal x1159=((1.0)*cj3*sj2);
j0eval[0]=x1158;
j0eval[1]=((IKabs(((((-1.0)*x1157*x1159))+(((-1.0)*sj2*x1152*x1153))+((x1152*x1154))+(((-1.0)*cj2*x1153*x1157)))))+(IKabs(((((-1.0)*x1155*x1159))+(((-1.0)*sj2*x1153*x1156))+(((-1.0)*cj2*x1153*x1155))+((x1154*x1156))))));
j0eval[2]=IKsign(x1158);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1160=((-1.0)*pz);
IkReal x1161=((-1.0)*rxp1_2);
CheckValue<IkReal> x1164 = IKatan2WithCheck(IkReal(x1161),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1164.valid){
continue;
}
IkReal x1162=((1.0)*(x1164.value));
IkReal x1163=x1136;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1162)));
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1162)));
IkReal gconst4=(x1161*x1163);
IkReal gconst5=((1.0)*rxp0_2*x1163);
IkReal x1165=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+((cj2*sj3))+x1165+(((710150.0)*cj2*cj3))+(((-1.0)*sj3*x1165))+(((-5000000.0)*px))+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1166=(cj2*sj3);
IkReal x1167=((5000000.0)*px);
IkReal x1168=((241250.0)*cj2);
IkReal x1169=((710150.0)*sj2);
IkReal x1170=(cj3*sj2);
IkReal x1171=((710150.0)*cj2*cj3);
IkReal x1172=(sj3*x1169);
IkReal x1173=((-571501.636116601)+x1166+x1168+x1169+x1171+x1170);
op[0]=(x1173+(((-1.0)*x1172))+(((-1.0)*x1167)));
op[1]=((10000000.0)*py);
op[2]=(x1167+x1173+(((-1.0)*x1172)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1174=((-1.0)*pz);
IkReal x1175=((-1.0)*rxp1_2);
CheckValue<IkReal> x1178 = IKatan2WithCheck(IkReal(x1175),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1178.valid){
continue;
}
IkReal x1176=((1.0)*(x1178.value));
IkReal x1177=x1136;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x1176)));
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1174);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1174);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x1176)));
IkReal gconst4=(x1175*x1177);
IkReal gconst5=((1.0)*rxp0_2*x1177);
IkReal x1179=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+((cj2*sj3))+x1179+(((710150.0)*cj2*cj3))+(((-1.0)*sj3*x1179))+(((-5000000.0)*px))+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1180=(cj2*sj3);
IkReal x1181=((5000000.0)*px);
IkReal x1182=((241250.0)*cj2);
IkReal x1183=((710150.0)*sj2);
IkReal x1184=(cj3*sj2);
IkReal x1185=((710150.0)*cj2*cj3);
IkReal x1186=(sj3*x1183);
IkReal x1187=((-571501.636116601)+x1184+x1185+x1182+x1183+x1180);
op[0]=(x1187+(((-1.0)*x1186))+(((-1.0)*x1181)));
op[1]=((10000000.0)*py);
op[2]=(x1187+x1181+(((-1.0)*x1186)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1188=(cj4*r12);
IkReal x1189=((1.0)*sj3);
IkReal x1190=(cj2*cj3);
IkReal x1191=(r02*sj4);
IkReal x1192=(cj4*r02);
IkReal x1193=(r12*sj4);
IkReal x1194=((1.0)*cj3*sj2);
CheckValue<IkReal> x1195=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x1195.valid){
continue;
}
CheckValue<IkReal> x1196 = IKatan2WithCheck(IkReal(((((-1.0)*x1193*x1194))+((x1188*x1190))+(((-1.0)*sj2*x1188*x1189))+(((-1.0)*cj2*x1189*x1193)))),IkReal(((((-1.0)*x1191*x1194))+(((-1.0)*sj2*x1189*x1192))+((x1190*x1192))+(((-1.0)*cj2*x1189*x1191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1196.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1195.value)))+(x1196.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1197=IKsin(j0);
IkReal x1198=IKcos(j0);
IkReal x1199=((0.14203)*sj2);
IkReal x1200=((1.0)*r01);
IkReal x1201=(sj2*sj4);
IkReal x1202=(cj2*cj3);
IkReal x1203=((1.0)*cj3);
IkReal x1204=(cj4*sj2);
IkReal x1205=((1.0)*r10);
IkReal x1206=((1.0)*cj2*sj3);
IkReal x1207=(gconst4*x1197);
IkReal x1208=(gconst4*x1198);
IkReal x1209=(gconst5*x1197);
IkReal x1210=((1.0)*x1198);
IkReal x1211=(gconst5*x1198);
evalcond[0]=(((r02*x1197))+(((-1.0)*r12*x1210)));
evalcond[1]=(((px*x1197))+(((-1.0)*py*x1210)));
evalcond[2]=(((r10*x1207))+((r11*x1209))+((r01*x1211))+((r00*x1208)));
evalcond[3]=(((r11*x1208))+(((-1.0)*x1205*x1211))+(((-1.0)*x1200*x1207))+((r00*x1209)));
evalcond[4]=((1.0)+(((-1.0)*x1205*x1208))+((r01*x1209))+((r00*x1207))+(((-1.0)*gconst5*r11*x1210)));
evalcond[5]=((((-1.0)*sj3*x1204))+(((-1.0)*sj4*x1206))+((r02*x1198))+(((-1.0)*x1201*x1203))+((r12*x1197))+((cj4*x1202)));
evalcond[6]=((-0.11430032722332)+(((-1.0)*sj3*x1199))+x1199+((py*x1197))+(((0.14203)*x1202))+((px*x1198))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=(((r10*x1209))+((r00*x1211))+(((-1.0)*sj4*x1202))+(((-1.0)*x1200*x1208))+(((-1.0)*x1203*x1204))+((sj3*x1201))+(((-1.0)*r11*x1207))+(((-1.0)*cj4*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1212 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1212.valid){
continue;
}
CheckValue<IkReal> x1213=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst5*rxp1_2))+(((-1.0)*gconst4*rxp0_2)))),-1);
if(!x1213.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1212.value)+(((1.5707963267949)*(x1213.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1214=IKsin(j0);
IkReal x1215=IKcos(j0);
IkReal x1216=((0.14203)*sj2);
IkReal x1217=((1.0)*r01);
IkReal x1218=(sj2*sj4);
IkReal x1219=(cj2*cj3);
IkReal x1220=((1.0)*cj3);
IkReal x1221=(cj4*sj2);
IkReal x1222=((1.0)*r10);
IkReal x1223=((1.0)*cj2*sj3);
IkReal x1224=(gconst4*x1214);
IkReal x1225=(gconst4*x1215);
IkReal x1226=(gconst5*x1214);
IkReal x1227=((1.0)*x1215);
IkReal x1228=(gconst5*x1215);
evalcond[0]=(((r02*x1214))+(((-1.0)*r12*x1227)));
evalcond[1]=(((px*x1214))+(((-1.0)*py*x1227)));
evalcond[2]=(((r01*x1228))+((r00*x1225))+((r10*x1224))+((r11*x1226)));
evalcond[3]=(((r00*x1226))+(((-1.0)*x1222*x1228))+(((-1.0)*x1217*x1224))+((r11*x1225)));
evalcond[4]=((1.0)+(((-1.0)*gconst5*r11*x1227))+((r01*x1226))+((r00*x1224))+(((-1.0)*x1222*x1225)));
evalcond[5]=(((r12*x1214))+((r02*x1215))+(((-1.0)*x1218*x1220))+((cj4*x1219))+(((-1.0)*sj3*x1221))+(((-1.0)*sj4*x1223)));
evalcond[6]=((-0.11430032722332)+x1216+((px*x1215))+(((2.0e-7)*cj3*sj2))+(((-1.0)*sj3*x1216))+(((2.0e-7)*cj2*sj3))+(((0.14203)*x1219))+((py*x1214))+(((0.04825)*cj2)));
evalcond[7]=(((r00*x1228))+(((-1.0)*r11*x1224))+(((-1.0)*x1220*x1221))+(((-1.0)*cj4*x1223))+(((-1.0)*sj4*x1219))+((r10*x1226))+((sj3*x1218))+(((-1.0)*x1217*x1225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1229=IKPowWithIntegerCheck(IKsign((((gconst4*r21))+(((-1.0)*gconst5*r20)))),-1);
if(!x1229.valid){
continue;
}
CheckValue<IkReal> x1230 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1230.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1229.value)))+(x1230.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1231=IKsin(j0);
IkReal x1232=IKcos(j0);
IkReal x1233=((0.14203)*sj2);
IkReal x1234=((1.0)*r01);
IkReal x1235=(sj2*sj4);
IkReal x1236=(cj2*cj3);
IkReal x1237=((1.0)*cj3);
IkReal x1238=(cj4*sj2);
IkReal x1239=((1.0)*r10);
IkReal x1240=((1.0)*cj2*sj3);
IkReal x1241=(gconst4*x1231);
IkReal x1242=(gconst4*x1232);
IkReal x1243=(gconst5*x1231);
IkReal x1244=((1.0)*x1232);
IkReal x1245=(gconst5*x1232);
evalcond[0]=((((-1.0)*r12*x1244))+((r02*x1231)));
evalcond[1]=((((-1.0)*py*x1244))+((px*x1231)));
evalcond[2]=(((r01*x1245))+((r00*x1242))+((r11*x1243))+((r10*x1241)));
evalcond[3]=((((-1.0)*x1239*x1245))+((r00*x1243))+((r11*x1242))+(((-1.0)*x1234*x1241)));
evalcond[4]=((1.0)+(((-1.0)*x1239*x1242))+((r01*x1243))+(((-1.0)*gconst5*r11*x1244))+((r00*x1241)));
evalcond[5]=((((-1.0)*x1235*x1237))+((r02*x1232))+((cj4*x1236))+(((-1.0)*sj3*x1238))+(((-1.0)*sj4*x1240))+((r12*x1231)));
evalcond[6]=((-0.11430032722332)+x1233+((py*x1231))+((px*x1232))+(((2.0e-7)*cj3*sj2))+(((-1.0)*sj3*x1233))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2))+(((0.14203)*x1236)));
evalcond[7]=(((sj3*x1235))+(((-1.0)*r11*x1241))+(((-1.0)*cj4*x1240))+(((-1.0)*x1237*x1238))+((r00*x1245))+((r10*x1243))+(((-1.0)*sj4*x1236))+(((-1.0)*x1234*x1242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1247 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1247)==0){
continue;
}
IkReal x1246=pow(x1247,-0.5);
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
IkReal gconst6=((-1.0)*(x1248.value));
IkReal gconst7=(r20*x1246);
IkReal gconst8=(r21*x1246);
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1249.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x1252 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1252.valid){
continue;
}
IkReal x1250=((-1.0)*(x1252.value));
IkReal x1251=x1246;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst7;
cj5=gconst8;
j5=x1250;
IkReal gconst6=x1250;
IkReal gconst7=(r20*x1251);
IkReal gconst8=(r21*x1251);
IkReal x1253=((1.0)*sj4);
j0eval[0]=((IKabs(r12))+(((0.5)*(IKabs(((((-1.0)*cj2*sj3*x1253))+(((-1.0)*r02))+((cj2*cj3*cj4))+(((-1.0)*cj4*sj2*sj3))+(((-1.0)*cj3*sj2*x1253))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1256 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1256.valid){
continue;
}
IkReal x1254=((-1.0)*(x1256.value));
IkReal x1255=x1246;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst7;
cj5=gconst8;
j5=x1254;
IkReal gconst6=x1254;
IkReal gconst7=(r20*x1255);
IkReal gconst8=(r21*x1255);
IkReal x1257=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+((cj2*sj3))+x1257+(((710150.0)*cj2*cj3))+(((-1.0)*sj3*x1257))+(((-5000000.0)*px))+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1260 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1260.valid){
continue;
}
IkReal x1258=((-1.0)*(x1260.value));
IkReal x1259=x1246;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst7;
cj5=gconst8;
j5=x1258;
IkReal gconst6=x1258;
IkReal gconst7=(r20*x1259);
IkReal gconst8=(r21*x1259);
IkReal x1261=((-1.0)*cj4);
IkReal x1262=x1246;
IkReal x1263=((2.0)*x1262);
j0eval[0]=((IKabs((((cj2*sj3*x1261))+((sj2*sj3*sj4))+((cj3*sj2*x1261))+(((-1.0)*cj2*cj3*sj4))+(((-1.0)*r00*r21*x1262))+((r01*r20*x1262)))))+(IKabs((((r10*r21*x1263))+(((-1.0)*r11*r20*x1263))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1264=((1.0)*cj2);
IkReal x1265=(gconst7*r01);
IkReal x1266=(gconst8*r00);
IkReal x1267=(sj2*sj3*sj4);
IkReal x1268=((1.0)*cj3*cj4*sj2);
IkReal x1269=(cj3*sj4*x1264);
IkReal x1270=(cj4*sj3*x1264);
IkReal x1271=(x1270+x1269+x1268);
op[0]=(x1267+x1265+(((-1.0)*x1271))+(((-1.0)*x1266)));
op[1]=((((-2.0)*gconst7*r11))+(((2.0)*gconst8*r10)));
op[2]=(x1267+x1266+(((-1.0)*x1271))+(((-1.0)*x1265)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1272=(cj2*sj3);
IkReal x1273=((5000000.0)*px);
IkReal x1274=((241250.0)*cj2);
IkReal x1275=((710150.0)*sj2);
IkReal x1276=(cj3*sj2);
IkReal x1277=((710150.0)*cj2*cj3);
IkReal x1278=(sj3*x1275);
IkReal x1279=((-571501.636116601)+x1272+x1274+x1275+x1276+x1277);
op[0]=(x1279+(((-1.0)*x1278))+(((-1.0)*x1273)));
op[1]=((10000000.0)*py);
op[2]=(x1279+x1273+(((-1.0)*x1278)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1280=((1.0)*sj4);
IkReal x1281=(cj2*cj3*cj4);
IkReal x1282=(cj3*sj2*x1280);
IkReal x1283=((1.0)*cj4*sj2*sj3);
IkReal x1284=(cj2*sj3*x1280);
IkReal x1285=(x1284+x1283+x1282);
op[0]=(x1281+(((-1.0)*r02))+(((-1.0)*x1285)));
op[1]=((2.0)*r12);
op[2]=(x1281+r02+(((-1.0)*x1285)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1288 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1288)==0){
continue;
}
IkReal x1286=pow(x1288,-0.5);
IkReal x1287=((-1.0)*x1286);
CheckValue<IkReal> x1289 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1289.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x1289.value))));
IkReal gconst10=(r20*x1287);
IkReal gconst11=(r21*x1287);
CheckValue<IkReal> x1290 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1290.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1290.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x1294 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1294.valid){
continue;
}
IkReal x1291=((1.0)*(x1294.value));
IkReal x1292=x1286;
IkReal x1293=((-1.0)*x1292);
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x1291)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1291)));
IkReal gconst10=(r20*x1293);
IkReal gconst11=(r21*x1293);
j0eval[0]=0;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1298 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1298.valid){
continue;
}
IkReal x1295=((1.0)*(x1298.value));
IkReal x1296=x1286;
IkReal x1297=((-1.0)*x1296);
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x1295)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1295)));
IkReal gconst10=(r20*x1297);
IkReal gconst11=(r21*x1297);
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
CheckValue<IkReal> x1302 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1302.valid){
continue;
}
IkReal x1299=((1.0)*(x1302.value));
IkReal x1300=x1286;
IkReal x1301=((-1.0)*x1300);
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x1299)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x1299)));
IkReal gconst10=(r20*x1301);
IkReal gconst11=(r21*x1301);
IkReal x1303=(cj4*r12);
IkReal x1304=((1.0)*sj3);
IkReal x1305=(cj2*cj3);
IkReal x1306=(r02*sj4);
IkReal x1307=(cj4*r02);
IkReal x1308=(r12*sj4);
IkReal x1309=((-1.0)+(r22*r22));
IkReal x1310=((1.0)*cj3*sj2);
j0eval[0]=x1309;
j0eval[1]=((IKabs(((((-1.0)*sj2*x1304*x1307))+(((-1.0)*cj2*x1304*x1306))+((x1305*x1307))+(((-1.0)*x1306*x1310)))))+(IKabs(((((-1.0)*x1308*x1310))+(((-1.0)*cj2*x1304*x1308))+(((-1.0)*sj2*x1303*x1304))+((x1303*x1305))))));
j0eval[2]=IKsign(x1309);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1311=(cj4*r12);
IkReal x1312=((1.0)*sj3);
IkReal x1313=(cj2*cj3);
IkReal x1314=(r02*sj4);
IkReal x1315=(cj4*r02);
IkReal x1316=(r12*sj4);
IkReal x1317=((1.0)*cj3*sj2);
CheckValue<IkReal> x1318=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x1318.valid){
continue;
}
CheckValue<IkReal> x1319 = IKatan2WithCheck(IkReal((((x1311*x1313))+(((-1.0)*cj2*x1312*x1316))+(((-1.0)*x1316*x1317))+(((-1.0)*sj2*x1311*x1312)))),IkReal((((x1313*x1315))+(((-1.0)*sj2*x1312*x1315))+(((-1.0)*cj2*x1312*x1314))+(((-1.0)*x1314*x1317)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1319.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1318.value)))+(x1319.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1320=IKsin(j0);
IkReal x1321=IKcos(j0);
IkReal x1322=((0.14203)*sj2);
IkReal x1323=(cj3*cj4);
IkReal x1324=((1.0)*sj2);
IkReal x1325=(cj2*cj3);
IkReal x1326=(gconst10*x1320);
IkReal x1327=((1.0)*x1321);
IkReal x1328=((1.0)*cj2*sj3);
IkReal x1329=(gconst11*x1320);
IkReal x1330=(gconst10*x1321);
IkReal x1331=(gconst11*x1321);
evalcond[0]=((((-1.0)*r12*x1327))+((r02*x1320)));
evalcond[1]=(((px*x1320))+(((-1.0)*py*x1327)));
evalcond[2]=(((r00*x1330))+((r11*x1329))+((r01*x1331))+((r10*x1326)));
evalcond[3]=(((r00*x1329))+((r11*x1330))+(((-1.0)*r01*x1326))+(((-1.0)*gconst11*r10*x1327)));
evalcond[4]=((1.0)+((r01*x1329))+((r00*x1326))+(((-1.0)*gconst10*r10*x1327))+(((-1.0)*gconst11*r11*x1327)));
evalcond[5]=((((-1.0)*cj4*sj3*x1324))+((r12*x1320))+(((-1.0)*sj4*x1328))+((cj2*x1323))+(((-1.0)*cj3*sj4*x1324))+((r02*x1321)));
evalcond[6]=((-0.11430032722332)+x1322+((py*x1320))+((px*x1321))+(((0.14203)*x1325))+(((-1.0)*sj3*x1322))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x1323*x1324))+(((-1.0)*r11*x1326))+((r00*x1331))+(((-1.0)*sj4*x1325))+(((-1.0)*cj4*x1328))+((r10*x1329))+(((-1.0)*gconst10*r01*x1327))+((sj2*sj3*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1332 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1332.valid){
continue;
}
CheckValue<IkReal> x1333=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*rxp1_2))+(((-1.0)*gconst10*rxp0_2)))),-1);
if(!x1333.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1332.value)+(((1.5707963267949)*(x1333.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1334=IKsin(j0);
IkReal x1335=IKcos(j0);
IkReal x1336=((0.14203)*sj2);
IkReal x1337=(cj3*cj4);
IkReal x1338=((1.0)*sj2);
IkReal x1339=(cj2*cj3);
IkReal x1340=(gconst10*x1334);
IkReal x1341=((1.0)*x1335);
IkReal x1342=((1.0)*cj2*sj3);
IkReal x1343=(gconst11*x1334);
IkReal x1344=(gconst10*x1335);
IkReal x1345=(gconst11*x1335);
evalcond[0]=((((-1.0)*r12*x1341))+((r02*x1334)));
evalcond[1]=(((px*x1334))+(((-1.0)*py*x1341)));
evalcond[2]=(((r00*x1344))+((r01*x1345))+((r11*x1343))+((r10*x1340)));
evalcond[3]=((((-1.0)*gconst11*r10*x1341))+((r00*x1343))+((r11*x1344))+(((-1.0)*r01*x1340)));
evalcond[4]=((1.0)+(((-1.0)*gconst10*r10*x1341))+((r00*x1340))+(((-1.0)*gconst11*r11*x1341))+((r01*x1343)));
evalcond[5]=(((r12*x1334))+(((-1.0)*cj3*sj4*x1338))+(((-1.0)*sj4*x1342))+(((-1.0)*cj4*sj3*x1338))+((cj2*x1337))+((r02*x1335)));
evalcond[6]=((-0.11430032722332)+x1336+((px*x1335))+((py*x1334))+(((2.0e-7)*cj3*sj2))+(((-1.0)*sj3*x1336))+(((2.0e-7)*cj2*sj3))+(((0.14203)*x1339))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*sj4*x1339))+(((-1.0)*gconst10*r01*x1341))+(((-1.0)*x1337*x1338))+(((-1.0)*r11*x1340))+((sj2*sj3*sj4))+((r00*x1345))+(((-1.0)*cj4*x1342))+((r10*x1343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1346 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1346.valid){
continue;
}
CheckValue<IkReal> x1347=IKPowWithIntegerCheck(IKsign((((gconst10*r21))+(((-1.0)*gconst11*r20)))),-1);
if(!x1347.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1346.value)+(((1.5707963267949)*(x1347.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1348=IKsin(j0);
IkReal x1349=IKcos(j0);
IkReal x1350=((0.14203)*sj2);
IkReal x1351=(cj3*cj4);
IkReal x1352=((1.0)*sj2);
IkReal x1353=(cj2*cj3);
IkReal x1354=(gconst10*x1348);
IkReal x1355=((1.0)*x1349);
IkReal x1356=((1.0)*cj2*sj3);
IkReal x1357=(gconst11*x1348);
IkReal x1358=(gconst10*x1349);
IkReal x1359=(gconst11*x1349);
evalcond[0]=((((-1.0)*r12*x1355))+((r02*x1348)));
evalcond[1]=(((px*x1348))+(((-1.0)*py*x1355)));
evalcond[2]=(((r10*x1354))+((r11*x1357))+((r00*x1358))+((r01*x1359)));
evalcond[3]=((((-1.0)*gconst11*r10*x1355))+((r11*x1358))+((r00*x1357))+(((-1.0)*r01*x1354)));
evalcond[4]=((1.0)+(((-1.0)*gconst10*r10*x1355))+(((-1.0)*gconst11*r11*x1355))+((r00*x1354))+((r01*x1357)));
evalcond[5]=((((-1.0)*cj3*sj4*x1352))+(((-1.0)*sj4*x1356))+((r02*x1349))+((r12*x1348))+(((-1.0)*cj4*sj3*x1352))+((cj2*x1351)));
evalcond[6]=((-0.11430032722332)+x1350+(((-1.0)*sj3*x1350))+((px*x1349))+(((2.0e-7)*cj3*sj2))+(((0.14203)*x1353))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2))+((py*x1348)));
evalcond[7]=(((r10*x1357))+(((-1.0)*gconst10*r01*x1355))+(((-1.0)*r11*x1354))+((sj2*sj3*sj4))+(((-1.0)*sj4*x1353))+((r00*x1359))+(((-1.0)*cj4*x1356))+(((-1.0)*x1351*x1352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1360=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1360);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1360);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1361=((710150.0)*sj2);
j0eval[0]=((((1.0e-7)*(IKabs(((-571501.636116601)+x1361+((cj2*sj3))+(((710150.0)*cj2*cj3))+(((-1.0)*sj3*x1361))+(((-5000000.0)*px))+(((241250.0)*cj2))+((cj3*sj2)))))))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
IkReal x1362=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1362);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1362);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=((IKabs(((1.0)+((cj5*r11))+((r10*sj5)))))+(IKabs(((((2.0)*cj5*r01))+(((2.0)*r00*sj5))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1363=(cj5*r11);
IkReal x1364=(r10*sj5);
op[0]=((1.0)+x1364+x1363);
op[1]=((((2.0)*cj5*r01))+(((2.0)*r00*sj5)));
op[2]=((1.0)+(((-1.0)*x1363))+(((-1.0)*x1364)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1365=(cj2*sj3);
IkReal x1366=((5000000.0)*px);
IkReal x1367=((241250.0)*cj2);
IkReal x1368=((710150.0)*sj2);
IkReal x1369=(cj3*sj2);
IkReal x1370=((710150.0)*cj2*cj3);
IkReal x1371=(sj3*x1368);
IkReal x1372=((-571501.636116601)+x1367+x1365+x1368+x1369+x1370);
op[0]=(x1372+(((-1.0)*x1371))+(((-1.0)*x1366)));
op[1]=((10000000.0)*py);
op[2]=(x1366+x1372+(((-1.0)*x1371)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1373=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1373);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1373);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1374=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+x1374+((cj2*sj3))+(((710150.0)*cj2*cj3))+(((-5000000.0)*px))+(((-1.0)*sj3*x1374))+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
IkReal x1375=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1375);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1375);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=((IKabs(((1.0)+((cj5*r11))+((r10*sj5)))))+(IKabs(((((2.0)*cj5*r01))+(((2.0)*r00*sj5))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1376=(cj5*r11);
IkReal x1377=(r10*sj5);
op[0]=((1.0)+x1377+x1376);
op[1]=((((2.0)*cj5*r01))+(((2.0)*r00*sj5)));
op[2]=((1.0)+(((-1.0)*x1377))+(((-1.0)*x1376)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1378=(cj2*sj3);
IkReal x1379=((5000000.0)*px);
IkReal x1380=((241250.0)*cj2);
IkReal x1381=((710150.0)*sj2);
IkReal x1382=(cj3*sj2);
IkReal x1383=((710150.0)*cj2*cj3);
IkReal x1384=(sj3*x1381);
IkReal x1385=((-571501.636116601)+x1378+x1380+x1381+x1382+x1383);
op[0]=((((-1.0)*x1384))+x1385+(((-1.0)*x1379)));
op[1]=((10000000.0)*py);
op[2]=((((-1.0)*x1384))+x1379+x1385);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1386=(cj4*r12);
IkReal x1387=((1.0)*sj3);
IkReal x1388=(cj2*cj3);
IkReal x1389=(r02*sj4);
IkReal x1390=(cj4*r02);
IkReal x1391=(r12*sj4);
IkReal x1392=((1.0)*cj3*sj2);
CheckValue<IkReal> x1393=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x1393.valid){
continue;
}
CheckValue<IkReal> x1394 = IKatan2WithCheck(IkReal(((((-1.0)*x1391*x1392))+(((-1.0)*cj2*x1387*x1391))+((x1386*x1388))+(((-1.0)*sj2*x1386*x1387)))),IkReal((((x1388*x1390))+(((-1.0)*x1389*x1392))+(((-1.0)*cj2*x1387*x1389))+(((-1.0)*sj2*x1387*x1390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1394.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1393.value)))+(x1394.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1395=IKsin(j0);
IkReal x1396=IKcos(j0);
IkReal x1397=(r11*sj5);
IkReal x1398=((0.14203)*sj2);
IkReal x1399=(r00*sj5);
IkReal x1400=(r10*sj5);
IkReal x1401=((1.0)*cj3);
IkReal x1402=(cj4*sj2);
IkReal x1403=(cj2*cj3);
IkReal x1404=(sj2*sj4);
IkReal x1405=(r01*sj5);
IkReal x1406=((1.0)*cj2*sj3);
IkReal x1407=((1.0)*x1395);
IkReal x1408=(cj5*x1395);
IkReal x1409=((1.0)*x1396);
IkReal x1410=(cj5*x1396);
evalcond[0]=((((-1.0)*r12*x1409))+((r02*x1395)));
evalcond[1]=(((px*x1395))+(((-1.0)*py*x1409)));
evalcond[2]=(((r11*x1408))+((x1395*x1400))+((r01*x1410))+((x1396*x1399)));
evalcond[3]=((((-1.0)*cj5*r10*x1409))+((r00*x1408))+(((-1.0)*x1405*x1407))+((x1396*x1397)));
evalcond[4]=((1.0)+((x1395*x1399))+((r01*x1408))+(((-1.0)*x1400*x1409))+(((-1.0)*cj5*r11*x1409)));
evalcond[5]=((((-1.0)*sj3*x1402))+((cj4*x1403))+(((-1.0)*sj4*x1406))+(((-1.0)*x1401*x1404))+((r12*x1395))+((r02*x1396)));
evalcond[6]=((-0.11430032722332)+x1398+((px*x1396))+((py*x1395))+(((2.0e-7)*cj3*sj2))+(((0.14203)*x1403))+(((2.0e-7)*cj2*sj3))+(((-1.0)*sj3*x1398))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*cj2*sj4*x1401))+((sj3*x1404))+(((-1.0)*x1405*x1409))+((r00*x1410))+(((-1.0)*x1401*x1402))+(((-1.0)*cj4*x1406))+((r10*x1408))+(((-1.0)*x1397*x1407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1411 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1411.valid){
continue;
}
CheckValue<IkReal> x1412=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5)))),-1);
if(!x1412.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1411.value)+(((1.5707963267949)*(x1412.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1413=IKsin(j0);
IkReal x1414=IKcos(j0);
IkReal x1415=(r11*sj5);
IkReal x1416=((0.14203)*sj2);
IkReal x1417=(r00*sj5);
IkReal x1418=(r10*sj5);
IkReal x1419=((1.0)*cj3);
IkReal x1420=(cj4*sj2);
IkReal x1421=(cj2*cj3);
IkReal x1422=(sj2*sj4);
IkReal x1423=(r01*sj5);
IkReal x1424=((1.0)*cj2*sj3);
IkReal x1425=((1.0)*x1413);
IkReal x1426=(cj5*x1413);
IkReal x1427=((1.0)*x1414);
IkReal x1428=(cj5*x1414);
evalcond[0]=((((-1.0)*r12*x1427))+((r02*x1413)));
evalcond[1]=((((-1.0)*py*x1427))+((px*x1413)));
evalcond[2]=(((r11*x1426))+((r01*x1428))+((x1413*x1418))+((x1414*x1417)));
evalcond[3]=(((r00*x1426))+(((-1.0)*x1423*x1425))+(((-1.0)*cj5*r10*x1427))+((x1414*x1415)));
evalcond[4]=((1.0)+((r01*x1426))+((x1413*x1417))+(((-1.0)*x1418*x1427))+(((-1.0)*cj5*r11*x1427)));
evalcond[5]=((((-1.0)*sj3*x1420))+(((-1.0)*x1419*x1422))+(((-1.0)*sj4*x1424))+((r02*x1414))+((r12*x1413))+((cj4*x1421)));
evalcond[6]=((-0.11430032722332)+((py*x1413))+(((0.14203)*x1421))+((px*x1414))+(((-1.0)*sj3*x1416))+(((2.0e-7)*cj3*sj2))+x1416+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x1415*x1425))+((r00*x1428))+(((-1.0)*cj4*x1424))+(((-1.0)*x1423*x1427))+((r10*x1426))+(((-1.0)*x1419*x1420))+(((-1.0)*cj2*sj4*x1419))+((sj3*x1422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1429 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1429.valid){
continue;
}
CheckValue<IkReal> x1430=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x1430.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1429.value)+(((1.5707963267949)*(x1430.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1431=IKsin(j0);
IkReal x1432=IKcos(j0);
IkReal x1433=(r11*sj5);
IkReal x1434=((0.14203)*sj2);
IkReal x1435=(r00*sj5);
IkReal x1436=(r10*sj5);
IkReal x1437=((1.0)*cj3);
IkReal x1438=(cj4*sj2);
IkReal x1439=(cj2*cj3);
IkReal x1440=(sj2*sj4);
IkReal x1441=(r01*sj5);
IkReal x1442=((1.0)*cj2*sj3);
IkReal x1443=((1.0)*x1431);
IkReal x1444=(cj5*x1431);
IkReal x1445=((1.0)*x1432);
IkReal x1446=(cj5*x1432);
evalcond[0]=(((r02*x1431))+(((-1.0)*r12*x1445)));
evalcond[1]=(((px*x1431))+(((-1.0)*py*x1445)));
evalcond[2]=(((x1432*x1435))+((r11*x1444))+((r01*x1446))+((x1431*x1436)));
evalcond[3]=(((x1432*x1433))+(((-1.0)*cj5*r10*x1445))+(((-1.0)*x1441*x1443))+((r00*x1444)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r11*x1445))+(((-1.0)*x1436*x1445))+((r01*x1444))+((x1431*x1435)));
evalcond[5]=((((-1.0)*sj3*x1438))+((r02*x1432))+((cj4*x1439))+((r12*x1431))+(((-1.0)*x1437*x1440))+(((-1.0)*sj4*x1442)));
evalcond[6]=((-0.11430032722332)+(((-1.0)*sj3*x1434))+((px*x1432))+((py*x1431))+(((2.0e-7)*cj3*sj2))+x1434+(((0.14203)*x1439))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x1437*x1438))+(((-1.0)*x1433*x1443))+((r10*x1444))+(((-1.0)*cj2*sj4*x1437))+(((-1.0)*x1441*x1445))+(((-1.0)*cj4*x1442))+((sj3*x1440))+((r00*x1446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1448 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1448.valid){
continue;
}
IkReal x1447=x1448.value;
j5array[0]=((-1.0)*x1447);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1447)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1449=(r22*sj3);
IkReal x1450=(cj3*sj2);
IkReal x1451=((1.0)*sj2);
IkReal x1452=(cj5*r20);
IkReal x1453=(cj2*cj3);
IkReal x1454=(r21*sj5);
IkReal x1455=(cj2*sj3);
if( IKabs((((x1454*x1455))+((x1450*x1454))+(((-1.0)*x1450*x1452))+(((-1.0)*x1452*x1455))+((r22*x1453))+(((-1.0)*x1449*x1451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x1451*x1452))+((sj2*sj3*x1454))+((cj2*x1449))+((r22*x1450))+((x1452*x1453))+(((-1.0)*x1453*x1454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1454*x1455))+((x1450*x1454))+(((-1.0)*x1450*x1452))+(((-1.0)*x1452*x1455))+((r22*x1453))+(((-1.0)*x1449*x1451))))+IKsqr(((((-1.0)*sj3*x1451*x1452))+((sj2*sj3*x1454))+((cj2*x1449))+((r22*x1450))+((x1452*x1453))+(((-1.0)*x1453*x1454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x1454*x1455))+((x1450*x1454))+(((-1.0)*x1450*x1452))+(((-1.0)*x1452*x1455))+((r22*x1453))+(((-1.0)*x1449*x1451))), ((((-1.0)*sj3*x1451*x1452))+((sj2*sj3*x1454))+((cj2*x1449))+((r22*x1450))+((x1452*x1453))+(((-1.0)*x1453*x1454))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1456=IKcos(j4);
IkReal x1457=IKsin(j4);
IkReal x1458=((1.0)*sj3);
IkReal x1459=(cj2*x1456);
IkReal x1460=(sj2*x1456);
IkReal x1461=(cj2*x1457);
IkReal x1462=(sj2*x1457);
evalcond[0]=((((-1.0)*x1458*x1462))+((cj3*x1460))+((cj3*x1461))+((sj3*x1459))+(((-1.0)*r22)));
evalcond[1]=((((-1.0)*x1458*x1461))+(((-1.0)*x1458*x1460))+((r21*sj5))+(((-1.0)*cj5*r20))+((cj3*x1459))+(((-1.0)*cj3*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1463=(((r21*sj5))+(((-1.0)*cj5*r20)));
j0eval[0]=x1463;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=IKsign(x1463);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1464=((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5)));
j0eval[0]=x1464;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=IKsign(x1464);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=1.0;
j1=0;
IkReal x1465=(cj4*r12);
IkReal x1466=((1.0)*sj3);
IkReal x1467=(cj2*cj3);
IkReal x1468=(r02*sj4);
IkReal x1469=(cj4*r02);
IkReal x1470=(r12*sj4);
IkReal x1471=((-1.0)+(r22*r22));
IkReal x1472=((1.0)*cj3*sj2);
j0eval[0]=x1471;
j0eval[1]=((IKabs(((((-1.0)*x1470*x1472))+(((-1.0)*cj2*x1466*x1470))+((x1465*x1467))+(((-1.0)*sj2*x1465*x1466)))))+(IKabs(((((-1.0)*sj2*x1466*x1469))+(((-1.0)*cj2*x1466*x1468))+(((-1.0)*x1468*x1472))+((x1467*x1469))))));
j0eval[2]=IKsign(x1471);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1473=((-1.0)*rxp0_2);
IkReal x1475 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x1475)==0){
continue;
}
IkReal x1474=pow(x1475,-0.5);
CheckValue<IkReal> x1476 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(x1473),IKFAST_ATAN2_MAGTHRESH);
if(!x1476.valid){
continue;
}
IkReal gconst12=((-1.0)*(x1476.value));
IkReal gconst13=(rxp1_2*x1474);
IkReal gconst14=(x1473*x1474);
CheckValue<IkReal> x1477 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1477.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1478=((-1.0)*rxp0_2);
CheckValue<IkReal> x1481 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(x1478),IKFAST_ATAN2_MAGTHRESH);
if(!x1481.valid){
continue;
}
IkReal x1479=((-1.0)*(x1481.value));
IkReal x1480=x1474;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst13;
cj5=gconst14;
j5=x1479;
IkReal gconst12=x1479;
IkReal gconst13=(rxp1_2*x1480);
IkReal gconst14=(x1478*x1480);
IkReal x1482=((1.0)*sj4);
j0eval[0]=((((0.5)*(IKabs(((((-1.0)*r02))+((cj2*cj3*cj4))+(((-1.0)*cj4*sj2*sj3))+(((-1.0)*cj3*sj2*x1482))+(((-1.0)*cj2*sj3*x1482)))))))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
IkReal x1483=((-1.0)*rxp0_2);
CheckValue<IkReal> x1486 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(x1483),IKFAST_ATAN2_MAGTHRESH);
if(!x1486.valid){
continue;
}
IkReal x1484=((-1.0)*(x1486.value));
IkReal x1485=x1474;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst13;
cj5=gconst14;
j5=x1484;
IkReal gconst12=x1484;
IkReal gconst13=(rxp1_2*x1485);
IkReal gconst14=(x1483*x1485);
IkReal x1487=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+((cj2*sj3))+(((710150.0)*cj2*cj3))+(((-5000000.0)*px))+(((-1.0)*sj3*x1487))+x1487+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1488=(cj2*sj3);
IkReal x1489=((5000000.0)*px);
IkReal x1490=((241250.0)*cj2);
IkReal x1491=((710150.0)*sj2);
IkReal x1492=(cj3*sj2);
IkReal x1493=((710150.0)*cj2*cj3);
IkReal x1494=(sj3*x1491);
IkReal x1495=((-571501.636116601)+x1490+x1491+x1492+x1493+x1488);
op[0]=((((-1.0)*x1489))+(((-1.0)*x1494))+x1495);
op[1]=((10000000.0)*py);
op[2]=((((-1.0)*x1494))+x1495+x1489);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1496=((1.0)*sj4);
IkReal x1497=(cj2*cj3*cj4);
IkReal x1498=(cj3*sj2*x1496);
IkReal x1499=((1.0)*cj4*sj2*sj3);
IkReal x1500=(cj2*sj3*x1496);
IkReal x1501=(x1500+x1498+x1499);
op[0]=((((-1.0)*x1501))+(((-1.0)*r02))+x1497);
op[1]=((2.0)*r12);
op[2]=((((-1.0)*x1501))+x1497+r02);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1502=((-1.0)*rxp1_2);
IkReal x1504 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x1504)==0){
continue;
}
IkReal x1503=pow(x1504,-0.5);
CheckValue<IkReal> x1505 = IKatan2WithCheck(IkReal(x1502),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1505.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x1505.value))));
IkReal gconst16=(x1502*x1503);
IkReal gconst17=((1.0)*rxp0_2*x1503);
CheckValue<IkReal> x1506 = IKatan2WithCheck(IkReal(((-1.0)*rxp1_2)),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1506.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1506.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1507=((-1.0)*rxp1_2);
CheckValue<IkReal> x1510 = IKatan2WithCheck(IkReal(x1507),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1510.valid){
continue;
}
IkReal x1508=((1.0)*(x1510.value));
IkReal x1509=x1503;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1508)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1508)));
IkReal gconst16=(x1507*x1509);
IkReal gconst17=((1.0)*rxp0_2*x1509);
j0eval[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1511=((-1.0)*rxp1_2);
CheckValue<IkReal> x1514 = IKatan2WithCheck(IkReal(x1511),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1514.valid){
continue;
}
IkReal x1512=((1.0)*(x1514.value));
IkReal x1513=x1503;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1512)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1512)));
IkReal gconst16=(x1511*x1513);
IkReal gconst17=((1.0)*rxp0_2*x1513);
j0eval[0]=0;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x1515=((-1.0)*rxp1_2);
CheckValue<IkReal> x1518 = IKatan2WithCheck(IkReal(x1515),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1518.valid){
continue;
}
IkReal x1516=((1.0)*(x1518.value));
IkReal x1517=x1503;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1516)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1516)));
IkReal gconst16=(x1515*x1517);
IkReal gconst17=((1.0)*rxp0_2*x1517);
IkReal x1519=(cj4*r12);
IkReal x1520=((1.0)*sj3);
IkReal x1521=(cj2*cj3);
IkReal x1522=(r02*sj4);
IkReal x1523=(cj4*r02);
IkReal x1524=(r12*sj4);
IkReal x1525=((-1.0)+(r22*r22));
IkReal x1526=((1.0)*cj3*sj2);
j0eval[0]=x1525;
j0eval[1]=((IKabs(((((-1.0)*x1524*x1526))+((x1519*x1521))+(((-1.0)*sj2*x1519*x1520))+(((-1.0)*cj2*x1520*x1524)))))+(IKabs(((((-1.0)*sj2*x1520*x1523))+(((-1.0)*cj2*x1520*x1522))+((x1521*x1523))+(((-1.0)*x1522*x1526))))));
j0eval[2]=IKsign(x1525);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1527=((-1.0)*pz);
IkReal x1528=((-1.0)*rxp1_2);
CheckValue<IkReal> x1531 = IKatan2WithCheck(IkReal(x1528),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1531.valid){
continue;
}
IkReal x1529=((1.0)*(x1531.value));
IkReal x1530=x1503;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1529)));
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1527);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1527);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1529)));
IkReal gconst16=(x1528*x1530);
IkReal gconst17=((1.0)*rxp0_2*x1530);
IkReal x1532=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+((cj2*sj3))+(((710150.0)*cj2*cj3))+(((-1.0)*sj3*x1532))+(((-5000000.0)*px))+x1532+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1533=(cj2*sj3);
IkReal x1534=((5000000.0)*px);
IkReal x1535=((241250.0)*cj2);
IkReal x1536=((710150.0)*sj2);
IkReal x1537=(cj3*sj2);
IkReal x1538=((710150.0)*cj2*cj3);
IkReal x1539=(sj3*x1536);
IkReal x1540=((-571501.636116601)+x1537+x1536+x1535+x1533+x1538);
op[0]=((((-1.0)*x1534))+(((-1.0)*x1539))+x1540);
op[1]=((10000000.0)*py);
op[2]=((((-1.0)*x1539))+x1540+x1534);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1541=((-1.0)*pz);
IkReal x1542=((-1.0)*rxp1_2);
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal(x1542),IkReal(((-1.0)*rxp0_2)),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
IkReal x1543=((1.0)*(x1545.value));
IkReal x1544=x1503;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x1543)));
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1541);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1541);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x1543)));
IkReal gconst16=(x1542*x1544);
IkReal gconst17=((1.0)*rxp0_2*x1544);
IkReal x1546=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+(((-1.0)*sj3*x1546))+((cj2*sj3))+(((710150.0)*cj2*cj3))+(((-5000000.0)*px))+x1546+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1547=(cj2*sj3);
IkReal x1548=((5000000.0)*px);
IkReal x1549=((241250.0)*cj2);
IkReal x1550=((710150.0)*sj2);
IkReal x1551=(cj3*sj2);
IkReal x1552=((710150.0)*cj2*cj3);
IkReal x1553=(sj3*x1550);
IkReal x1554=((-571501.636116601)+x1547+x1549+x1551+x1550+x1552);
op[0]=(x1554+(((-1.0)*x1553))+(((-1.0)*x1548)));
op[1]=((10000000.0)*py);
op[2]=(x1548+x1554+(((-1.0)*x1553)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1555=(cj4*r12);
IkReal x1556=((1.0)*sj3);
IkReal x1557=(cj2*cj3);
IkReal x1558=(r02*sj4);
IkReal x1559=(cj4*r02);
IkReal x1560=(r12*sj4);
IkReal x1561=((1.0)*cj3*sj2);
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal((((x1555*x1557))+(((-1.0)*cj2*x1556*x1560))+(((-1.0)*sj2*x1555*x1556))+(((-1.0)*x1560*x1561)))),IkReal(((((-1.0)*cj2*x1556*x1558))+((x1557*x1559))+(((-1.0)*sj2*x1556*x1559))+(((-1.0)*x1558*x1561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
CheckValue<IkReal> x1563=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x1563.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1562.value)+(((1.5707963267949)*(x1563.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1564=IKsin(j0);
IkReal x1565=IKcos(j0);
IkReal x1566=(gconst17*r11);
IkReal x1567=((0.14203)*sj2);
IkReal x1568=(gconst16*r10);
IkReal x1569=(gconst16*r00);
IkReal x1570=(gconst16*r11);
IkReal x1571=(sj2*sj4);
IkReal x1572=(cj2*cj3);
IkReal x1573=((1.0)*cj3);
IkReal x1574=(cj4*sj2);
IkReal x1575=(gconst16*r01);
IkReal x1576=((1.0)*cj2*sj3);
IkReal x1577=((1.0)*x1565);
IkReal x1578=(gconst17*x1564);
IkReal x1579=((1.0)*x1564);
IkReal x1580=(gconst17*x1565);
evalcond[0]=(((r02*x1564))+(((-1.0)*r12*x1577)));
evalcond[1]=((((-1.0)*py*x1577))+((px*x1564)));
evalcond[2]=(((r01*x1580))+((x1564*x1568))+((x1564*x1566))+((x1565*x1569)));
evalcond[3]=((((-1.0)*gconst17*r10*x1577))+(((-1.0)*x1575*x1579))+((x1565*x1570))+((r00*x1578)));
evalcond[4]=((1.0)+(((-1.0)*x1566*x1577))+(((-1.0)*x1568*x1577))+((x1564*x1569))+((r01*x1578)));
evalcond[5]=(((cj4*x1572))+(((-1.0)*x1571*x1573))+((r12*x1564))+(((-1.0)*sj4*x1576))+((r02*x1565))+(((-1.0)*sj3*x1574)));
evalcond[6]=((-0.11430032722332)+(((-1.0)*sj3*x1567))+(((0.14203)*x1572))+x1567+((px*x1565))+(((2.0e-7)*cj3*sj2))+((py*x1564))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x1575*x1577))+(((-1.0)*cj4*x1576))+(((-1.0)*x1573*x1574))+(((-1.0)*x1570*x1579))+(((-1.0)*sj4*x1572))+((r10*x1578))+((r00*x1580))+((sj3*x1571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*rxp0_2))+(((-1.0)*gconst17*rxp1_2)))),-1);
if(!x1581.valid){
continue;
}
CheckValue<IkReal> x1582 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1582.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1581.value)))+(x1582.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1583=IKsin(j0);
IkReal x1584=IKcos(j0);
IkReal x1585=(gconst17*r11);
IkReal x1586=((0.14203)*sj2);
IkReal x1587=(gconst16*r10);
IkReal x1588=(gconst16*r00);
IkReal x1589=(gconst16*r11);
IkReal x1590=(sj2*sj4);
IkReal x1591=(cj2*cj3);
IkReal x1592=((1.0)*cj3);
IkReal x1593=(cj4*sj2);
IkReal x1594=(gconst16*r01);
IkReal x1595=((1.0)*cj2*sj3);
IkReal x1596=((1.0)*x1584);
IkReal x1597=(gconst17*x1583);
IkReal x1598=((1.0)*x1583);
IkReal x1599=(gconst17*x1584);
evalcond[0]=(((r02*x1583))+(((-1.0)*r12*x1596)));
evalcond[1]=((((-1.0)*py*x1596))+((px*x1583)));
evalcond[2]=(((r01*x1599))+((x1584*x1588))+((x1583*x1587))+((x1583*x1585)));
evalcond[3]=(((r00*x1597))+((x1584*x1589))+(((-1.0)*x1594*x1598))+(((-1.0)*gconst17*r10*x1596)));
evalcond[4]=((1.0)+((r01*x1597))+(((-1.0)*x1585*x1596))+((x1583*x1588))+(((-1.0)*x1587*x1596)));
evalcond[5]=(((cj4*x1591))+(((-1.0)*sj4*x1595))+((r12*x1583))+((r02*x1584))+(((-1.0)*sj3*x1593))+(((-1.0)*x1590*x1592)));
evalcond[6]=((-0.11430032722332)+(((0.14203)*x1591))+x1586+(((2.0e-7)*cj3*sj2))+((py*x1583))+((px*x1584))+(((-1.0)*sj3*x1586))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=(((r00*x1599))+(((-1.0)*x1592*x1593))+(((-1.0)*sj4*x1591))+(((-1.0)*x1594*x1596))+(((-1.0)*cj4*x1595))+(((-1.0)*x1589*x1598))+((r10*x1597))+((sj3*x1590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1600 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1600.valid){
continue;
}
CheckValue<IkReal> x1601=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst17*r20))+((gconst16*r21)))),-1);
if(!x1601.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1600.value)+(((1.5707963267949)*(x1601.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1602=IKsin(j0);
IkReal x1603=IKcos(j0);
IkReal x1604=(gconst17*r11);
IkReal x1605=((0.14203)*sj2);
IkReal x1606=(gconst16*r10);
IkReal x1607=(gconst16*r00);
IkReal x1608=(gconst16*r11);
IkReal x1609=(sj2*sj4);
IkReal x1610=(cj2*cj3);
IkReal x1611=((1.0)*cj3);
IkReal x1612=(cj4*sj2);
IkReal x1613=(gconst16*r01);
IkReal x1614=((1.0)*cj2*sj3);
IkReal x1615=((1.0)*x1603);
IkReal x1616=(gconst17*x1602);
IkReal x1617=((1.0)*x1602);
IkReal x1618=(gconst17*x1603);
evalcond[0]=((((-1.0)*r12*x1615))+((r02*x1602)));
evalcond[1]=((((-1.0)*py*x1615))+((px*x1602)));
evalcond[2]=(((r01*x1618))+((x1603*x1607))+((x1602*x1604))+((x1602*x1606)));
evalcond[3]=(((r00*x1616))+(((-1.0)*gconst17*r10*x1615))+((x1603*x1608))+(((-1.0)*x1613*x1617)));
evalcond[4]=((1.0)+(((-1.0)*x1606*x1615))+((r01*x1616))+((x1602*x1607))+(((-1.0)*x1604*x1615)));
evalcond[5]=(((cj4*x1610))+((r12*x1602))+(((-1.0)*x1609*x1611))+(((-1.0)*sj3*x1612))+((r02*x1603))+(((-1.0)*sj4*x1614)));
evalcond[6]=((-0.11430032722332)+((py*x1602))+(((0.14203)*x1610))+x1605+(((2.0e-7)*cj3*sj2))+((px*x1603))+(((-1.0)*sj3*x1605))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=(((sj3*x1609))+(((-1.0)*x1611*x1612))+((r00*x1618))+(((-1.0)*sj4*x1610))+(((-1.0)*cj4*x1614))+(((-1.0)*x1608*x1617))+((r10*x1616))+(((-1.0)*x1613*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1620 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1620)==0){
continue;
}
IkReal x1619=pow(x1620,-0.5);
CheckValue<IkReal> x1621 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1621.valid){
continue;
}
IkReal gconst18=((-1.0)*(x1621.value));
IkReal gconst19=(r20*x1619);
IkReal gconst20=(r21*x1619);
CheckValue<IkReal> x1622 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1622.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1622.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x1625 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1625.valid){
continue;
}
IkReal x1623=((-1.0)*(x1625.value));
IkReal x1624=x1619;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst19;
cj5=gconst20;
j5=x1623;
IkReal gconst18=x1623;
IkReal gconst19=(r20*x1624);
IkReal gconst20=(r21*x1624);
IkReal x1626=((1.0)*sj4);
j0eval[0]=((IKabs(r12))+(((0.5)*(IKabs(((((-1.0)*r02))+(((-1.0)*cj3*sj2*x1626))+((cj2*cj3*cj4))+(((-1.0)*cj4*sj2*sj3))+(((-1.0)*cj2*sj3*x1626))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1629 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1629.valid){
continue;
}
IkReal x1627=((-1.0)*(x1629.value));
IkReal x1628=x1619;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst19;
cj5=gconst20;
j5=x1627;
IkReal gconst18=x1627;
IkReal gconst19=(r20*x1628);
IkReal gconst20=(r21*x1628);
IkReal x1630=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+((cj2*sj3))+(((710150.0)*cj2*cj3))+(((-1.0)*sj3*x1630))+x1630+(((-5000000.0)*px))+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1633 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1633.valid){
continue;
}
IkReal x1631=((-1.0)*(x1633.value));
IkReal x1632=x1619;
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst19;
cj5=gconst20;
j5=x1631;
IkReal gconst18=x1631;
IkReal gconst19=(r20*x1632);
IkReal gconst20=(r21*x1632);
IkReal x1634=((-1.0)*cj4);
IkReal x1635=x1619;
IkReal x1636=((2.0)*x1635);
j0eval[0]=((IKabs(((((-1.0)*r11*r20*x1636))+((r10*r21*x1636)))))+(IKabs((((sj2*sj3*sj4))+(((-1.0)*cj2*cj3*sj4))+((cj3*sj2*x1634))+((cj2*sj3*x1634))+(((-1.0)*r00*r21*x1635))+((r01*r20*x1635))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1637=((1.0)*cj2);
IkReal x1638=(gconst20*r00);
IkReal x1639=(gconst19*r01);
IkReal x1640=(sj2*sj3*sj4);
IkReal x1641=((1.0)*cj3*cj4*sj2);
IkReal x1642=(cj3*sj4*x1637);
IkReal x1643=(cj4*sj3*x1637);
IkReal x1644=(x1641+x1643+x1642);
op[0]=(x1640+x1639+(((-1.0)*x1644))+(((-1.0)*x1638)));
op[1]=((((-2.0)*gconst19*r11))+(((2.0)*gconst20*r10)));
op[2]=(x1640+x1638+(((-1.0)*x1644))+(((-1.0)*x1639)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1645=(cj2*sj3);
IkReal x1646=((5000000.0)*px);
IkReal x1647=((241250.0)*cj2);
IkReal x1648=((710150.0)*sj2);
IkReal x1649=(cj3*sj2);
IkReal x1650=((710150.0)*cj2*cj3);
IkReal x1651=(sj3*x1648);
IkReal x1652=((-571501.636116601)+x1650+x1645+x1647+x1649+x1648);
op[0]=(x1652+(((-1.0)*x1646))+(((-1.0)*x1651)));
op[1]=((10000000.0)*py);
op[2]=(x1652+x1646+(((-1.0)*x1651)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1653=((1.0)*sj4);
IkReal x1654=(cj2*cj3*cj4);
IkReal x1655=(cj3*sj2*x1653);
IkReal x1656=((1.0)*cj4*sj2*sj3);
IkReal x1657=(cj2*sj3*x1653);
IkReal x1658=(x1656+x1657+x1655);
op[0]=(x1654+(((-1.0)*r02))+(((-1.0)*x1658)));
op[1]=((2.0)*r12);
op[2]=(x1654+(((-1.0)*x1658))+r02);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1661 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1661)==0){
continue;
}
IkReal x1659=pow(x1661,-0.5);
IkReal x1660=((-1.0)*x1659);
CheckValue<IkReal> x1662 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1662.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x1662.value))));
IkReal gconst22=(r20*x1660);
IkReal gconst23=(r21*x1660);
CheckValue<IkReal> x1663 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1663.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1663.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x1667 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1667.valid){
continue;
}
IkReal x1664=((1.0)*(x1667.value));
IkReal x1665=x1659;
IkReal x1666=((-1.0)*x1665);
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x1664)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1664)));
IkReal gconst22=(r20*x1666);
IkReal gconst23=(r21*x1666);
j0eval[0]=0;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x1671 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1671.valid){
continue;
}
IkReal x1668=((1.0)*(x1671.value));
IkReal x1669=x1659;
IkReal x1670=((-1.0)*x1669);
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x1668)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1668)));
IkReal gconst22=(r20*x1670);
IkReal gconst23=(r21*x1670);
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal(((-1.0)*r20)),IkReal(r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
IkReal x1672=((1.0)*(x1675.value));
IkReal x1673=x1659;
IkReal x1674=((-1.0)*x1673);
sj1=0;
cj1=1.0;
j1=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x1672)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x1672)));
IkReal gconst22=(r20*x1674);
IkReal gconst23=(r21*x1674);
IkReal x1676=(cj4*r12);
IkReal x1677=((1.0)*sj3);
IkReal x1678=(cj2*cj3);
IkReal x1679=(r02*sj4);
IkReal x1680=(cj4*r02);
IkReal x1681=(r12*sj4);
IkReal x1682=((-1.0)+(r22*r22));
IkReal x1683=((1.0)*cj3*sj2);
j0eval[0]=x1682;
j0eval[1]=((IKabs(((((-1.0)*cj2*x1677*x1679))+(((-1.0)*x1679*x1683))+(((-1.0)*sj2*x1677*x1680))+((x1678*x1680)))))+(IKabs((((x1676*x1678))+(((-1.0)*x1681*x1683))+(((-1.0)*cj2*x1677*x1681))+(((-1.0)*sj2*x1676*x1677))))));
j0eval[2]=IKsign(x1682);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1684=(cj4*r12);
IkReal x1685=((1.0)*sj3);
IkReal x1686=(cj2*cj3);
IkReal x1687=(r02*sj4);
IkReal x1688=(cj4*r02);
IkReal x1689=(r12*sj4);
IkReal x1690=((1.0)*cj3*sj2);
CheckValue<IkReal> x1691=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x1691.valid){
continue;
}
CheckValue<IkReal> x1692 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x1684*x1685))+((x1684*x1686))+(((-1.0)*cj2*x1685*x1689))+(((-1.0)*x1689*x1690)))),IkReal(((((-1.0)*sj2*x1685*x1688))+(((-1.0)*x1687*x1690))+((x1686*x1688))+(((-1.0)*cj2*x1685*x1687)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1692.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1691.value)))+(x1692.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1693=IKsin(j0);
IkReal x1694=IKcos(j0);
IkReal x1695=(gconst22*r00);
IkReal x1696=(gconst22*r10);
IkReal x1697=(cj3*cj4);
IkReal x1698=((1.0)*sj2);
IkReal x1699=(sj2*sj3);
IkReal x1700=(cj2*cj3);
IkReal x1701=((1.0)*gconst22);
IkReal x1702=((1.0)*cj2*sj3);
IkReal x1703=(gconst23*x1693);
IkReal x1704=(r01*x1694);
IkReal x1705=((1.0)*x1694);
IkReal x1706=(gconst23*x1705);
evalcond[0]=(((r02*x1693))+(((-1.0)*r12*x1705)));
evalcond[1]=((((-1.0)*py*x1705))+((px*x1693)));
evalcond[2]=(((r11*x1703))+((gconst23*x1704))+((x1693*x1696))+((x1694*x1695)));
evalcond[3]=(((gconst22*r11*x1694))+(((-1.0)*r01*x1693*x1701))+(((-1.0)*r10*x1706))+((r00*x1703)));
evalcond[4]=((1.0)+((r01*x1703))+((x1693*x1695))+(((-1.0)*x1696*x1705))+(((-1.0)*r11*x1706)));
evalcond[5]=(((r12*x1693))+(((-1.0)*sj4*x1702))+((r02*x1694))+(((-1.0)*cj4*sj3*x1698))+(((-1.0)*cj3*sj4*x1698))+((cj2*x1697)));
evalcond[6]=((-0.11430032722332)+((px*x1694))+(((2.0e-7)*cj3*sj2))+((py*x1693))+(((2.0e-7)*cj2*sj3))+(((0.14203)*x1700))+(((-0.14203)*x1699))+(((0.04825)*cj2))+(((0.14203)*sj2)));
evalcond[7]=((((-1.0)*sj4*x1700))+(((-1.0)*x1697*x1698))+(((-1.0)*cj4*x1702))+(((-1.0)*r11*x1693*x1701))+((r10*x1703))+((sj4*x1699))+(((-1.0)*x1701*x1704))+((gconst23*r00*x1694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1707=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*rxp1_2))+(((-1.0)*gconst22*rxp0_2)))),-1);
if(!x1707.valid){
continue;
}
CheckValue<IkReal> x1708 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1708.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1707.value)))+(x1708.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1709=IKsin(j0);
IkReal x1710=IKcos(j0);
IkReal x1711=(gconst22*r00);
IkReal x1712=(gconst22*r10);
IkReal x1713=(cj3*cj4);
IkReal x1714=((1.0)*sj2);
IkReal x1715=(sj2*sj3);
IkReal x1716=(cj2*cj3);
IkReal x1717=((1.0)*gconst22);
IkReal x1718=((1.0)*cj2*sj3);
IkReal x1719=(gconst23*x1709);
IkReal x1720=(r01*x1710);
IkReal x1721=((1.0)*x1710);
IkReal x1722=(gconst23*x1721);
evalcond[0]=(((r02*x1709))+(((-1.0)*r12*x1721)));
evalcond[1]=((((-1.0)*py*x1721))+((px*x1709)));
evalcond[2]=(((x1710*x1711))+((r11*x1719))+((x1709*x1712))+((gconst23*x1720)));
evalcond[3]=(((gconst22*r11*x1710))+(((-1.0)*r10*x1722))+((r00*x1719))+(((-1.0)*r01*x1709*x1717)));
evalcond[4]=((1.0)+(((-1.0)*r11*x1722))+((x1709*x1711))+((r01*x1719))+(((-1.0)*x1712*x1721)));
evalcond[5]=(((r02*x1710))+((r12*x1709))+(((-1.0)*sj4*x1718))+(((-1.0)*cj3*sj4*x1714))+((cj2*x1713))+(((-1.0)*cj4*sj3*x1714)));
evalcond[6]=((-0.11430032722332)+(((0.14203)*x1716))+((px*x1710))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+((py*x1709))+(((0.04825)*cj2))+(((0.14203)*sj2))+(((-0.14203)*x1715)));
evalcond[7]=(((sj4*x1715))+(((-1.0)*sj4*x1716))+(((-1.0)*x1713*x1714))+(((-1.0)*r11*x1709*x1717))+(((-1.0)*cj4*x1718))+(((-1.0)*x1717*x1720))+((r10*x1719))+((gconst23*r00*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1723 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1723.valid){
continue;
}
CheckValue<IkReal> x1724=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst23*r20))+((gconst22*r21)))),-1);
if(!x1724.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1723.value)+(((1.5707963267949)*(x1724.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1725=IKsin(j0);
IkReal x1726=IKcos(j0);
IkReal x1727=(gconst22*r00);
IkReal x1728=(gconst22*r10);
IkReal x1729=(cj3*cj4);
IkReal x1730=((1.0)*sj2);
IkReal x1731=(sj2*sj3);
IkReal x1732=(cj2*cj3);
IkReal x1733=((1.0)*gconst22);
IkReal x1734=((1.0)*cj2*sj3);
IkReal x1735=(gconst23*x1725);
IkReal x1736=(r01*x1726);
IkReal x1737=((1.0)*x1726);
IkReal x1738=(gconst23*x1737);
evalcond[0]=((((-1.0)*r12*x1737))+((r02*x1725)));
evalcond[1]=(((px*x1725))+(((-1.0)*py*x1737)));
evalcond[2]=(((x1725*x1728))+((x1726*x1727))+((gconst23*x1736))+((r11*x1735)));
evalcond[3]=(((r00*x1735))+(((-1.0)*r10*x1738))+((gconst22*r11*x1726))+(((-1.0)*r01*x1725*x1733)));
evalcond[4]=((1.0)+((r01*x1735))+(((-1.0)*r11*x1738))+((x1725*x1727))+(((-1.0)*x1728*x1737)));
evalcond[5]=(((cj2*x1729))+(((-1.0)*cj4*sj3*x1730))+((r02*x1726))+(((-1.0)*sj4*x1734))+((r12*x1725))+(((-1.0)*cj3*sj4*x1730)));
evalcond[6]=((-0.11430032722332)+((px*x1726))+((py*x1725))+(((0.14203)*x1732))+(((-0.14203)*x1731))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2))+(((0.14203)*sj2)));
evalcond[7]=((((-1.0)*x1733*x1736))+((r10*x1735))+((gconst23*r00*x1726))+(((-1.0)*x1729*x1730))+(((-1.0)*r11*x1725*x1733))+((sj4*x1731))+(((-1.0)*sj4*x1732))+(((-1.0)*cj4*x1734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1739=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1739);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1739);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1740=((710150.0)*sj2);
j0eval[0]=((((1.0e-7)*(IKabs(((-571501.636116601)+((cj2*sj3))+(((710150.0)*cj2*cj3))+x1740+(((-1.0)*sj3*x1740))+(((-5000000.0)*px))+(((241250.0)*cj2))+((cj3*sj2)))))))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
IkReal x1741=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1741);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1741);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=((IKabs(((1.0)+((cj5*r11))+((r10*sj5)))))+(IKabs(((((2.0)*cj5*r01))+(((2.0)*r00*sj5))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1742=(cj5*r11);
IkReal x1743=(r10*sj5);
op[0]=((1.0)+x1742+x1743);
op[1]=((((2.0)*cj5*r01))+(((2.0)*r00*sj5)));
op[2]=((1.0)+(((-1.0)*x1742))+(((-1.0)*x1743)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1744=(cj2*sj3);
IkReal x1745=((5000000.0)*px);
IkReal x1746=((241250.0)*cj2);
IkReal x1747=((710150.0)*sj2);
IkReal x1748=(cj3*sj2);
IkReal x1749=((710150.0)*cj2*cj3);
IkReal x1750=(sj3*x1747);
IkReal x1751=((-571501.636116601)+x1748+x1749+x1744+x1746+x1747);
op[0]=(x1751+(((-1.0)*x1750))+(((-1.0)*x1745)));
op[1]=((10000000.0)*py);
op[2]=(x1745+x1751+(((-1.0)*x1750)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1752=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1752);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1752);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1753=((710150.0)*sj2);
j0eval[0]=((IKabs(py))+(((1.0e-7)*(IKabs(((-571501.636116601)+((cj2*sj3))+(((710150.0)*cj2*cj3))+x1753+(((-5000000.0)*px))+(((-1.0)*sj3*x1753))+(((241250.0)*cj2))+((cj3*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
IkReal x1754=((-1.0)*pz);
sj1=0;
cj1=1.0;
j1=0;
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1754);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1754);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j0eval[0]=((IKabs(((1.0)+((cj5*r11))+((r10*sj5)))))+(IKabs(((((2.0)*cj5*r01))+(((2.0)*r00*sj5))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1755=(cj5*r11);
IkReal x1756=(r10*sj5);
op[0]=((1.0)+x1756+x1755);
op[1]=((((2.0)*cj5*r01))+(((2.0)*r00*sj5)));
op[2]=((1.0)+(((-1.0)*x1756))+(((-1.0)*x1755)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1757=(cj2*sj3);
IkReal x1758=((5000000.0)*px);
IkReal x1759=((241250.0)*cj2);
IkReal x1760=((710150.0)*sj2);
IkReal x1761=(cj3*sj2);
IkReal x1762=((710150.0)*cj2*cj3);
IkReal x1763=(sj3*x1760);
IkReal x1764=((-571501.636116601)+x1762+x1760+x1761+x1759+x1757);
op[0]=((((-1.0)*x1763))+x1764+(((-1.0)*x1758)));
op[1]=((10000000.0)*py);
op[2]=((((-1.0)*x1763))+x1764+x1758);
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1765=(cj4*r12);
IkReal x1766=((1.0)*sj3);
IkReal x1767=(cj2*cj3);
IkReal x1768=(r02*sj4);
IkReal x1769=(cj4*r02);
IkReal x1770=(r12*sj4);
IkReal x1771=((1.0)*cj3*sj2);
CheckValue<IkReal> x1772 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x1766*x1770))+(((-1.0)*sj2*x1765*x1766))+((x1765*x1767))+(((-1.0)*x1770*x1771)))),IkReal(((((-1.0)*cj2*x1766*x1768))+(((-1.0)*sj2*x1766*x1769))+((x1767*x1769))+(((-1.0)*x1768*x1771)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1772.valid){
continue;
}
CheckValue<IkReal> x1773=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x1773.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1772.value)+(((1.5707963267949)*(x1773.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1774=IKsin(j0);
IkReal x1775=IKcos(j0);
IkReal x1776=(r11*sj5);
IkReal x1777=((0.14203)*sj2);
IkReal x1778=(r00*sj5);
IkReal x1779=(r10*sj5);
IkReal x1780=((1.0)*cj3);
IkReal x1781=(cj4*sj2);
IkReal x1782=(cj2*cj3);
IkReal x1783=(sj2*sj4);
IkReal x1784=(r01*sj5);
IkReal x1785=((1.0)*cj2*sj3);
IkReal x1786=((1.0)*x1774);
IkReal x1787=(cj5*x1774);
IkReal x1788=((1.0)*x1775);
IkReal x1789=(cj5*x1775);
evalcond[0]=(((r02*x1774))+(((-1.0)*r12*x1788)));
evalcond[1]=(((px*x1774))+(((-1.0)*py*x1788)));
evalcond[2]=(((x1775*x1778))+((r11*x1787))+((x1774*x1779))+((r01*x1789)));
evalcond[3]=((((-1.0)*cj5*r10*x1788))+(((-1.0)*x1784*x1786))+((x1775*x1776))+((r00*x1787)));
evalcond[4]=((1.0)+(((-1.0)*x1779*x1788))+(((-1.0)*cj5*r11*x1788))+((x1774*x1778))+((r01*x1787)));
evalcond[5]=((((-1.0)*sj3*x1781))+((r12*x1774))+((r02*x1775))+(((-1.0)*x1780*x1783))+(((-1.0)*sj4*x1785))+((cj4*x1782)));
evalcond[6]=((-0.11430032722332)+x1777+(((-1.0)*sj3*x1777))+((px*x1775))+(((0.14203)*x1782))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+((py*x1774))+(((0.04825)*cj2)));
evalcond[7]=(((r10*x1787))+((sj3*x1783))+(((-1.0)*cj4*x1785))+(((-1.0)*x1784*x1788))+(((-1.0)*x1780*x1781))+(((-1.0)*x1776*x1786))+((r00*x1789))+(((-1.0)*cj2*sj4*x1780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1790 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x1790.valid){
continue;
}
CheckValue<IkReal> x1791=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*rxp1_2))+(((-1.0)*rxp0_2*sj5)))),-1);
if(!x1791.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1790.value)+(((1.5707963267949)*(x1791.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1792=IKsin(j0);
IkReal x1793=IKcos(j0);
IkReal x1794=(r11*sj5);
IkReal x1795=((0.14203)*sj2);
IkReal x1796=(r00*sj5);
IkReal x1797=(r10*sj5);
IkReal x1798=((1.0)*cj3);
IkReal x1799=(cj4*sj2);
IkReal x1800=(cj2*cj3);
IkReal x1801=(sj2*sj4);
IkReal x1802=(r01*sj5);
IkReal x1803=((1.0)*cj2*sj3);
IkReal x1804=((1.0)*x1792);
IkReal x1805=(cj5*x1792);
IkReal x1806=((1.0)*x1793);
IkReal x1807=(cj5*x1793);
evalcond[0]=(((r02*x1792))+(((-1.0)*r12*x1806)));
evalcond[1]=((((-1.0)*py*x1806))+((px*x1792)));
evalcond[2]=(((x1793*x1796))+((r11*x1805))+((x1792*x1797))+((r01*x1807)));
evalcond[3]=(((x1793*x1794))+(((-1.0)*cj5*r10*x1806))+(((-1.0)*x1802*x1804))+((r00*x1805)));
evalcond[4]=((1.0)+(((-1.0)*x1797*x1806))+(((-1.0)*cj5*r11*x1806))+((x1792*x1796))+((r01*x1805)));
evalcond[5]=((((-1.0)*sj4*x1803))+(((-1.0)*x1798*x1801))+((r02*x1793))+((r12*x1792))+((cj4*x1800))+(((-1.0)*sj3*x1799)));
evalcond[6]=((-0.11430032722332)+(((-1.0)*sj3*x1795))+(((0.14203)*x1800))+x1795+((py*x1792))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2))+((px*x1793)));
evalcond[7]=((((-1.0)*x1794*x1804))+(((-1.0)*x1802*x1806))+((sj3*x1801))+(((-1.0)*cj4*x1803))+((r00*x1807))+(((-1.0)*cj2*sj4*x1798))+(((-1.0)*x1798*x1799))+((r10*x1805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x1808 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1808.valid){
continue;
}
CheckValue<IkReal> x1809=IKPowWithIntegerCheck(IKsign((((r21*sj5))+(((-1.0)*cj5*r20)))),-1);
if(!x1809.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x1808.value)+(((1.5707963267949)*(x1809.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1810=IKsin(j0);
IkReal x1811=IKcos(j0);
IkReal x1812=(r11*sj5);
IkReal x1813=((0.14203)*sj2);
IkReal x1814=(r00*sj5);
IkReal x1815=(r10*sj5);
IkReal x1816=((1.0)*cj3);
IkReal x1817=(cj4*sj2);
IkReal x1818=(cj2*cj3);
IkReal x1819=(sj2*sj4);
IkReal x1820=(r01*sj5);
IkReal x1821=((1.0)*cj2*sj3);
IkReal x1822=((1.0)*x1810);
IkReal x1823=(cj5*x1810);
IkReal x1824=((1.0)*x1811);
IkReal x1825=(cj5*x1811);
evalcond[0]=(((r02*x1810))+(((-1.0)*r12*x1824)));
evalcond[1]=((((-1.0)*py*x1824))+((px*x1810)));
evalcond[2]=(((r01*x1825))+((r11*x1823))+((x1811*x1814))+((x1810*x1815)));
evalcond[3]=(((r00*x1823))+(((-1.0)*x1820*x1822))+((x1811*x1812))+(((-1.0)*cj5*r10*x1824)));
evalcond[4]=((1.0)+((r01*x1823))+(((-1.0)*cj5*r11*x1824))+(((-1.0)*x1815*x1824))+((x1810*x1814)));
evalcond[5]=(((r02*x1811))+(((-1.0)*sj4*x1821))+(((-1.0)*x1816*x1819))+((cj4*x1818))+(((-1.0)*sj3*x1817))+((r12*x1810)));
evalcond[6]=((-0.11430032722332)+(((-1.0)*sj3*x1813))+((px*x1811))+((py*x1810))+(((0.14203)*x1818))+x1813+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=(((r10*x1823))+((sj3*x1819))+((r00*x1825))+(((-1.0)*x1812*x1822))+(((-1.0)*x1816*x1817))+(((-1.0)*cj4*x1821))+(((-1.0)*x1820*x1824))+(((-1.0)*cj2*sj4*x1816)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[1];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j5eval[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1826=sj2*sj2;
IkReal x1827=sj3*sj3;
IkReal x1828=cj2*cj2;
IkReal x1829=cj3*cj3;
j4eval[0]=(((x1826*x1827))+((x1826*x1829))+((x1827*x1828))+((x1828*x1829)));
j4eval[1]=((IKabs((((cj2*cj3))+(((-1.0)*sj2*sj3)))))+(IKabs((((cj2*sj3))+((cj3*sj2))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1830=(cj2*r22);
IkReal x1831=(r22*sj2);
if( IKabs(((((-1.0)*sj3*x1831))+((cj3*x1830)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj3*x1830))+((cj3*x1831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj3*x1831))+((cj3*x1830))))+IKsqr((((sj3*x1830))+((cj3*x1831))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*sj3*x1831))+((cj3*x1830))), (((sj3*x1830))+((cj3*x1831))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1832=IKcos(j4);
IkReal x1833=IKsin(j4);
IkReal x1834=((1.0)*sj2);
IkReal x1835=(cj2*x1832);
IkReal x1836=(cj3*x1833);
IkReal x1837=(sj3*x1833);
evalcond[0]=((((-1.0)*x1834*x1836))+(((-1.0)*sj3*x1832*x1834))+(((-1.0)*cj2*x1837))+((cj3*x1835)));
evalcond[1]=((((-1.0)*x1834*x1837))+((cj2*x1836))+((sj3*x1835))+(((-1.0)*r22))+((cj3*sj2*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
IkReal x1838=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1838);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1838);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1839=(cj2*py);
IkReal x1840=(px*sj2);
IkReal x1841=((2.0e-7)*cj3);
IkReal x1842=((0.14203)*cj3);
IkReal x1843=(cj2*px);
IkReal x1844=((2.0e-7)*sj3);
IkReal x1845=(pp+(((-1.0)*(pz*pz))));
IkReal x1846=((0.14203)*py*sj2);
j0eval[0]=x1845;
j0eval[1]=IKsign(x1845);
j0eval[2]=((IKabs((((py*sj2*x1841))+(((0.04825)*x1839))+(((-1.0)*sj3*x1846))+((x1839*x1842))+((x1839*x1844))+x1846+(((0.11430032722332)*py)))))+(IKabs((((x1840*x1841))+(((0.14203)*x1840))+(((0.11430032722332)*px))+((x1842*x1843))+((x1843*x1844))+(((0.04825)*x1843))+(((-0.14203)*sj3*x1840))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1847=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1847);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1847);
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
px=0;
py=0;
pp=pz*pz;
rxp0_2=0;
rxp1_2=0;
IkReal x1848=r10*r10;
IkReal x1849=r11*r11;
IkReal x1850=r01*r01;
IkReal x1851=r00*r00;
IkReal x1852=((16.0)*cj4);
IkReal x1853=(cj3*sj2);
IkReal x1854=(r01*r11);
IkReal x1855=(cj2*sj3);
IkReal x1856=((4.0)*sj4);
IkReal x1857=(cj2*cj3);
IkReal x1858=(sj2*sj3);
IkReal x1859=((16.0)*sj4);
IkReal x1860=(r00*r10);
IkReal x1861=(r00*r11);
IkReal x1862=(r01*r10);
IkReal x1863=((4.0)*cj4*x1849);
IkReal x1864=((4.0)*cj4*x1848);
IkReal x1865=(x1855*x1864);
IkReal x1866=(x1855*x1863);
IkReal x1867=(x1848*x1856*x1857);
IkReal x1868=(x1853*x1863);
IkReal x1869=(x1849*x1856*x1857);
IkReal x1870=(x1853*x1864);
IkReal x1871=(x1848*x1856*x1858);
IkReal x1872=(x1849*x1856*x1858);
IkReal x1873=(((x1854*x1858*x1859))+((x1858*x1859*x1860)));
IkReal x1874=(x1872+x1871);
IkReal x1875=(((x1857*x1859*x1860))+((x1852*x1855*x1860))+((x1852*x1853*x1854))+((x1852*x1854*x1855))+((x1854*x1857*x1859))+((x1852*x1853*x1860)));
IkReal x1876=(x1865+x1867+x1866+x1869+x1868+x1870);
j0eval[0]=((((0.5)*(IKabs(((((-1.0)*x1875))+x1873)))))+(IKabs(((((-1.0)*x1850*x1852*x1855))+(((-1.0)*x1850*x1852*x1853))+(((-1.0)*x1874))+((x1851*x1858*x1859))+(((-12.0)*x1862))+(((-1.0)*x1851*x1857*x1859))+((x1850*x1858*x1859))+(((-1.0)*x1850*x1857*x1859))+x1876+(((-1.0)*x1851*x1852*x1853))+(((-1.0)*x1851*x1852*x1855))+(((12.0)*x1861)))))+(((0.5)*(IKabs(((((-1.0)*x1876))+(((4.0)*x1861))+(((-4.0)*x1862))+x1874)))))+(((0.5)*(IKabs(((((-1.0)*x1873))+x1875))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x1877=r10*r10;
IkReal x1878=r11*r11;
IkReal x1879=r01*r01;
IkReal x1880=r00*r00;
IkReal x1881=((16.0)*cj4);
IkReal x1882=(cj3*sj2);
IkReal x1883=(r01*r11);
IkReal x1884=(cj2*sj3);
IkReal x1885=((4.0)*sj4);
IkReal x1886=(cj2*cj3);
IkReal x1887=(sj2*sj3);
IkReal x1888=((16.0)*sj4);
IkReal x1889=(r00*r10);
IkReal x1890=(r00*r11);
IkReal x1891=(r01*r10);
IkReal x1892=((4.0)*cj4*x1878);
IkReal x1893=((4.0)*cj4*x1877);
IkReal x1894=(x1884*x1893);
IkReal x1895=(x1884*x1892);
IkReal x1896=(x1877*x1885*x1886);
IkReal x1897=(x1882*x1892);
IkReal x1898=(x1878*x1885*x1886);
IkReal x1899=(x1882*x1893);
IkReal x1900=(x1877*x1885*x1887);
IkReal x1901=(x1878*x1885*x1887);
IkReal x1902=(((x1887*x1888*x1889))+((x1883*x1887*x1888)));
IkReal x1903=(x1900+x1901);
IkReal x1904=(((x1881*x1882*x1889))+((x1881*x1882*x1883))+((x1883*x1886*x1888))+((x1881*x1884*x1889))+((x1886*x1888*x1889))+((x1881*x1883*x1884)));
IkReal x1905=(x1898+x1899+x1894+x1895+x1896+x1897);
IkReal x1906=((((4.0)*x1890))+(((-4.0)*x1891))+x1903+(((-1.0)*x1905)));
IkReal x1907=((((-12.0)*x1891))+(((12.0)*x1890))+(((-1.0)*x1880*x1881*x1882))+(((-1.0)*x1880*x1881*x1884))+((x1880*x1887*x1888))+x1905+(((-1.0)*x1879*x1881*x1882))+(((-1.0)*x1879*x1881*x1884))+(((-1.0)*x1879*x1886*x1888))+((x1879*x1887*x1888))+(((-1.0)*x1880*x1886*x1888))+(((-1.0)*x1903)));
op[0]=x1906;
op[1]=(x1902+(((-1.0)*x1904)));
op[2]=x1907;
op[3]=0;
op[4]=x1907;
op[5]=(x1904+(((-1.0)*x1902)));
op[6]=x1906;
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1908=((1.0)*cj0);
if( IKabs((((r00*sj0))+(((-1.0)*r10*x1908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj0))+(((-1.0)*r11*x1908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*r10*x1908))))+IKsqr((((r01*sj0))+(((-1.0)*r11*x1908))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r00*sj0))+(((-1.0)*r10*x1908))), (((r01*sj0))+(((-1.0)*r11*x1908))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1909=IKcos(j5);
IkReal x1910=IKsin(j5);
IkReal x1911=((1.0)*cj0);
IkReal x1912=(cj0*r10);
IkReal x1913=((1.0)*sj0);
IkReal x1914=((1.0)*cj2);
IkReal x1915=(r01*x1910);
IkReal x1916=(r01*x1909);
IkReal x1917=(r11*x1910);
IkReal x1918=(r00*x1910);
IkReal x1919=(r00*x1909);
IkReal x1920=(r11*x1909);
evalcond[0]=((((-1.0)*x1911*x1917))+((x1909*x1912))+(((-1.0)*x1913*x1919))+((sj0*x1915)));
evalcond[1]=((1.0)+((x1910*x1912))+((cj0*x1920))+(((-1.0)*x1913*x1916))+(((-1.0)*x1913*x1918)));
evalcond[2]=((((-1.0)*x1911*x1916))+(((-1.0)*x1911*x1918))+(((-1.0)*x1913*x1920))+(((-1.0)*r10*x1910*x1913)));
evalcond[3]=((((-1.0)*cj4*sj3*x1914))+(((-1.0)*x1911*x1919))+(((-1.0)*r10*x1909*x1913))+((sj2*sj3*sj4))+((cj0*x1915))+((sj0*x1917))+(((-1.0)*cj3*cj4*sj2))+(((-1.0)*cj3*sj4*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1921=((0.14203)*sj2);
IkReal x1922=((0.11430032722332)+(((0.14203)*cj2*cj3))+x1921+(((2.0e-7)*cj3*sj2))+(((-1.0)*sj3*x1921))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
CheckValue<IkReal> x1923=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x1923.valid){
continue;
}
CheckValue<IkReal> x1924 = IKatan2WithCheck(IkReal((py*x1922)),IkReal((px*x1922)),IKFAST_ATAN2_MAGTHRESH);
if(!x1924.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1923.value)))+(x1924.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1925=IKcos(j0);
IkReal x1926=IKsin(j0);
IkReal x1927=((1.0)*px);
IkReal x1928=((0.14203)*sj2);
evalcond[0]=((((-1.0)*x1926*x1927))+((py*x1925)));
evalcond[1]=((0.11430032722332)+(((0.14203)*cj2*cj3))+(((-1.0)*py*x1926))+x1928+(((2.0e-7)*cj3*sj2))+(((-1.0)*x1925*x1927))+(((-1.0)*sj3*x1928))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1929=((1.0)*cj0);
if( IKabs((((r00*sj0))+(((-1.0)*r10*x1929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1929))+((r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*r10*x1929))))+IKsqr(((((-1.0)*r11*x1929))+((r01*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r00*sj0))+(((-1.0)*r10*x1929))), ((((-1.0)*r11*x1929))+((r01*sj0))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x1930=IKcos(j5);
IkReal x1931=IKsin(j5);
IkReal x1932=((1.0)*cj0);
IkReal x1933=(cj0*r10);
IkReal x1934=((1.0)*sj0);
IkReal x1935=((1.0)*cj2);
IkReal x1936=(r01*x1931);
IkReal x1937=(r01*x1930);
IkReal x1938=(r11*x1931);
IkReal x1939=(r00*x1931);
IkReal x1940=(r00*x1930);
IkReal x1941=(r11*x1930);
evalcond[0]=(((x1930*x1933))+(((-1.0)*x1932*x1938))+((sj0*x1936))+(((-1.0)*x1934*x1940)));
evalcond[1]=((1.0)+((cj0*x1941))+((x1931*x1933))+(((-1.0)*x1934*x1937))+(((-1.0)*x1934*x1939)));
evalcond[2]=((((-1.0)*x1932*x1937))+(((-1.0)*x1932*x1939))+(((-1.0)*r10*x1931*x1934))+(((-1.0)*x1934*x1941)));
evalcond[3]=((((-1.0)*r10*x1930*x1934))+(((-1.0)*cj3*sj4*x1935))+(((-1.0)*cj4*sj3*x1935))+((sj0*x1938))+((sj2*sj3*sj4))+((cj0*x1936))+(((-1.0)*x1932*x1940))+(((-1.0)*cj3*cj4*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x1942=(((cj2*sj3))+((cj3*sj2)));
IkReal x1943=(((cj2*cj3))+(((-1.0)*sj2*sj3)));
CheckValue<IkReal> x1946 = IKatan2WithCheck(IkReal(x1942),IkReal(x1943),IKFAST_ATAN2_MAGTHRESH);
if(!x1946.valid){
continue;
}
IkReal x1944=((1.0)*(x1946.value));
if((((x1943*x1943)+(x1942*x1942))) < -0.00001)
continue;
CheckValue<IkReal> x1947=IKPowWithIntegerCheck(IKabs(IKsqrt(((x1943*x1943)+(x1942*x1942)))),-1);
if(!x1947.valid){
continue;
}
if( ((r22*(x1947.value))) < -1-IKFAST_SINCOS_THRESH || ((r22*(x1947.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1945=IKasin((r22*(x1947.value)));
j4array[0]=((((-1.0)*x1944))+x1945);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x1944))+(((-1.0)*x1945)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x1948=((1.0)*cj2);
IkReal x1949=(r21*sj4);
IkReal x1950=(cj3*r20);
IkReal x1951=((1.0)*sj2);
IkReal x1952=(cj4*sj3);
IkReal x1953=((-1.0)+(r22*r22));
j5eval[0]=x1953;
j5eval[1]=((IKabs(((((-1.0)*cj4*x1948*x1950))+((cj2*r20*sj3*sj4))+((r20*sj2*x1952))+((sj2*sj4*x1950)))))+(IKabs(((((-1.0)*sj3*x1948*x1949))+((cj2*cj3*cj4*r21))+(((-1.0)*cj3*x1949*x1951))+(((-1.0)*r21*x1951*x1952))))));
j5eval[2]=IKsign(x1953);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x1954=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1954);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1954);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1955=(cj2*py);
IkReal x1956=(px*sj2);
IkReal x1957=((2.0e-7)*cj3);
IkReal x1958=((0.14203)*cj3);
IkReal x1959=(cj2*px);
IkReal x1960=((2.0e-7)*sj3);
IkReal x1961=(pp+(((-1.0)*(pz*pz))));
IkReal x1962=((0.14203)*py*sj2);
j0eval[0]=x1961;
j0eval[1]=IKsign(x1961);
j0eval[2]=((IKabs(((((-1.0)*sj3*x1962))+((x1955*x1958))+((x1955*x1960))+x1962+(((0.04825)*x1955))+(((0.11430032722332)*py))+((py*sj2*x1957)))))+(IKabs((((x1959*x1960))+((x1958*x1959))+(((-0.14203)*sj3*x1956))+(((0.04825)*x1959))+(((0.11430032722332)*px))+((x1956*x1957))+(((0.14203)*x1956))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x1963=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
r20=0;
r21=0;
r02=0;
r12=0;
npx=0;
npy=0;
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1963);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1963);
rxp2_0=0;
rxp2_1=0;
rxp2_2=0;
px=0;
py=0;
pp=pz*pz;
rxp0_2=0;
rxp1_2=0;
IkReal x1964=r10*r10;
IkReal x1965=r11*r11;
IkReal x1966=r01*r01;
IkReal x1967=r00*r00;
IkReal x1968=((16.0)*cj4);
IkReal x1969=(cj3*sj2);
IkReal x1970=(r01*r11);
IkReal x1971=(cj2*sj3);
IkReal x1972=((4.0)*sj4);
IkReal x1973=(cj2*cj3);
IkReal x1974=(sj2*sj3);
IkReal x1975=((16.0)*sj4);
IkReal x1976=(r00*r10);
IkReal x1977=(r00*r11);
IkReal x1978=(r01*r10);
IkReal x1979=((4.0)*cj4*x1965);
IkReal x1980=((4.0)*cj4*x1964);
IkReal x1981=(x1971*x1980);
IkReal x1982=(x1971*x1979);
IkReal x1983=(x1964*x1972*x1973);
IkReal x1984=(x1969*x1979);
IkReal x1985=(x1965*x1972*x1973);
IkReal x1986=(x1969*x1980);
IkReal x1987=(x1964*x1972*x1974);
IkReal x1988=(x1965*x1972*x1974);
IkReal x1989=(((x1970*x1974*x1975))+((x1974*x1975*x1976)));
IkReal x1990=(x1987+x1988);
IkReal x1991=(((x1973*x1975*x1976))+((x1968*x1969*x1976))+((x1968*x1969*x1970))+((x1970*x1973*x1975))+((x1968*x1971*x1976))+((x1968*x1970*x1971)));
IkReal x1992=(x1986+x1984+x1985+x1982+x1983+x1981);
j0eval[0]=((((0.5)*(IKabs(((((-1.0)*x1989))+x1991)))))+(((0.5)*(IKabs((x1989+(((-1.0)*x1991)))))))+(((0.5)*(IKabs(((((4.0)*x1977))+x1990+(((-1.0)*x1992))+(((-4.0)*x1978)))))))+(IKabs(((((-12.0)*x1978))+(((-1.0)*x1966*x1968*x1971))+(((-1.0)*x1966*x1968*x1969))+(((-1.0)*x1967*x1973*x1975))+x1992+(((-1.0)*x1967*x1968*x1969))+(((-1.0)*x1990))+(((-1.0)*x1967*x1968*x1971))+(((-1.0)*x1966*x1973*x1975))+((x1967*x1974*x1975))+((x1966*x1974*x1975))+(((12.0)*x1977))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x1993=r10*r10;
IkReal x1994=r11*r11;
IkReal x1995=r01*r01;
IkReal x1996=r00*r00;
IkReal x1997=((16.0)*cj4);
IkReal x1998=(cj3*sj2);
IkReal x1999=(r01*r11);
IkReal x2000=(cj2*sj3);
IkReal x2001=((4.0)*sj4);
IkReal x2002=(cj2*cj3);
IkReal x2003=(sj2*sj3);
IkReal x2004=((16.0)*sj4);
IkReal x2005=(r00*r10);
IkReal x2006=(r00*r11);
IkReal x2007=(r01*r10);
IkReal x2008=((4.0)*cj4*x1994);
IkReal x2009=((4.0)*cj4*x1993);
IkReal x2010=(x2000*x2009);
IkReal x2011=(x2000*x2008);
IkReal x2012=(x1993*x2001*x2002);
IkReal x2013=(x1998*x2008);
IkReal x2014=(x1994*x2001*x2002);
IkReal x2015=(x1998*x2009);
IkReal x2016=(x1993*x2001*x2003);
IkReal x2017=(x1994*x2001*x2003);
IkReal x2018=(((x2003*x2004*x2005))+((x1999*x2003*x2004)));
IkReal x2019=(x2017+x2016);
IkReal x2020=(((x2002*x2004*x2005))+((x1999*x2002*x2004))+((x1997*x1998*x1999))+((x1997*x1999*x2000))+((x1997*x2000*x2005))+((x1997*x1998*x2005)));
IkReal x2021=(x2015+x2014+x2011+x2010+x2013+x2012);
IkReal x2022=(x2019+(((-4.0)*x2007))+(((-1.0)*x2021))+(((4.0)*x2006)));
IkReal x2023=((((-1.0)*x1995*x2002*x2004))+(((-1.0)*x1996*x1997*x1998))+(((-1.0)*x2019))+((x1996*x2003*x2004))+(((12.0)*x2006))+x2021+(((-1.0)*x1996*x1997*x2000))+(((-1.0)*x1995*x1997*x1998))+(((-1.0)*x1995*x1997*x2000))+(((-1.0)*x1996*x2002*x2004))+(((-12.0)*x2007))+((x1995*x2003*x2004)));
op[0]=x2022;
op[1]=(x2018+(((-1.0)*x2020)));
op[2]=x2023;
op[3]=0;
op[4]=x2023;
op[5]=((((-1.0)*x2018))+x2020);
op[6]=x2022;
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2024=((1.0)*cj0);
if( IKabs((((r00*sj0))+(((-1.0)*r10*x2024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj0))+(((-1.0)*r11*x2024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*r10*x2024))))+IKsqr((((r01*sj0))+(((-1.0)*r11*x2024))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r00*sj0))+(((-1.0)*r10*x2024))), (((r01*sj0))+(((-1.0)*r11*x2024))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x2025=IKcos(j5);
IkReal x2026=IKsin(j5);
IkReal x2027=((1.0)*cj0);
IkReal x2028=(cj0*r10);
IkReal x2029=((1.0)*sj0);
IkReal x2030=((1.0)*cj2);
IkReal x2031=(r01*x2026);
IkReal x2032=(r01*x2025);
IkReal x2033=(r11*x2026);
IkReal x2034=(r00*x2026);
IkReal x2035=(r00*x2025);
IkReal x2036=(r11*x2025);
evalcond[0]=(((x2025*x2028))+(((-1.0)*x2029*x2035))+((sj0*x2031))+(((-1.0)*x2027*x2033)));
evalcond[1]=((1.0)+((x2026*x2028))+(((-1.0)*x2029*x2032))+(((-1.0)*x2029*x2034))+((cj0*x2036)));
evalcond[2]=((((-1.0)*x2029*x2036))+(((-1.0)*r10*x2026*x2029))+(((-1.0)*x2027*x2032))+(((-1.0)*x2027*x2034)));
evalcond[3]=((((-1.0)*r10*x2025*x2029))+(((-1.0)*cj4*sj3*x2030))+(((-1.0)*cj3*sj4*x2030))+((cj0*x2031))+((sj2*sj3*sj4))+((sj0*x2033))+(((-1.0)*cj3*cj4*sj2))+(((-1.0)*x2027*x2035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2037=((0.14203)*sj2);
IkReal x2038=((0.11430032722332)+(((0.14203)*cj2*cj3))+x2037+(((-1.0)*sj3*x2037))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
CheckValue<IkReal> x2039=IKPowWithIntegerCheck(IKsign((pp+(((-1.0)*(pz*pz))))),-1);
if(!x2039.valid){
continue;
}
CheckValue<IkReal> x2040 = IKatan2WithCheck(IkReal((py*x2038)),IkReal((px*x2038)),IKFAST_ATAN2_MAGTHRESH);
if(!x2040.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2039.value)))+(x2040.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2041=IKcos(j0);
IkReal x2042=IKsin(j0);
IkReal x2043=((1.0)*px);
IkReal x2044=((0.14203)*sj2);
evalcond[0]=(((py*x2041))+(((-1.0)*x2042*x2043)));
evalcond[1]=((0.11430032722332)+(((0.14203)*cj2*cj3))+x2044+(((-1.0)*sj3*x2044))+(((-1.0)*x2041*x2043))+(((2.0e-7)*cj3*sj2))+(((-1.0)*py*x2042))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2045=((1.0)*cj0);
if( IKabs((((r00*sj0))+(((-1.0)*r10*x2045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*sj0))+(((-1.0)*r11*x2045)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*r10*x2045))))+IKsqr((((r01*sj0))+(((-1.0)*r11*x2045))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r00*sj0))+(((-1.0)*r10*x2045))), (((r01*sj0))+(((-1.0)*r11*x2045))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x2046=IKcos(j5);
IkReal x2047=IKsin(j5);
IkReal x2048=((1.0)*cj0);
IkReal x2049=(cj0*r10);
IkReal x2050=((1.0)*sj0);
IkReal x2051=((1.0)*cj2);
IkReal x2052=(r01*x2047);
IkReal x2053=(r01*x2046);
IkReal x2054=(r11*x2047);
IkReal x2055=(r00*x2047);
IkReal x2056=(r00*x2046);
IkReal x2057=(r11*x2046);
evalcond[0]=(((sj0*x2052))+(((-1.0)*x2048*x2054))+((x2046*x2049))+(((-1.0)*x2050*x2056)));
evalcond[1]=((1.0)+((cj0*x2057))+(((-1.0)*x2050*x2053))+(((-1.0)*x2050*x2055))+((x2047*x2049)));
evalcond[2]=((((-1.0)*x2048*x2055))+(((-1.0)*x2048*x2053))+(((-1.0)*x2050*x2057))+(((-1.0)*r10*x2047*x2050)));
evalcond[3]=((((-1.0)*cj4*sj3*x2051))+(((-1.0)*r10*x2046*x2050))+((sj0*x2054))+((cj0*x2052))+(((-1.0)*x2048*x2056))+((sj2*sj3*sj4))+(((-1.0)*cj3*sj4*x2051))+(((-1.0)*cj3*cj4*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x2058=((1.0)*r21);
IkReal x2059=(cj3*r20);
IkReal x2060=(cj2*cj4);
IkReal x2061=(sj2*sj4);
IkReal x2062=(cj2*sj3*sj4);
IkReal x2063=(cj4*sj2*sj3);
CheckValue<IkReal> x2064=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x2064.valid){
continue;
}
CheckValue<IkReal> x2065 = IKatan2WithCheck(IkReal((((cj3*r21*x2060))+(((-1.0)*x2058*x2062))+(((-1.0)*x2058*x2063))+(((-1.0)*cj3*x2058*x2061)))),IkReal((((x2059*x2061))+((r20*x2062))+((r20*x2063))+(((-1.0)*x2059*x2060)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2065.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2064.value)))+(x2065.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x2066=IKsin(j5);
IkReal x2067=IKcos(j5);
IkReal x2068=((1.0)*sj4);
IkReal x2069=((1.0)*x2067);
evalcond[0]=((((-1.0)*r21*x2069))+(((-1.0)*r20*x2066)));
evalcond[1]=(((r21*x2066))+(((-1.0)*cj2*sj3*x2068))+((cj2*cj3*cj4))+(((-1.0)*r20*x2069))+(((-1.0)*cj3*sj2*x2068))+(((-1.0)*cj4*sj2*sj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x2070=(((cj5*rxp1_2))+((rxp0_2*sj5)));
j0eval[0]=x2070;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=IKsign(x2070);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x2071=(((cj5*r20))+(((-1.0)*r21*sj5)));
j0eval[0]=x2071;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=IKsign(x2071);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x2072=(cj4*sj2);
IkReal x2073=(cj2*sj4);
IkReal x2074=((1.0)*py);
IkReal x2075=((((-1.0)*pz*r22))+npz);
IkReal x2076=((1.0)*px*sj3);
IkReal x2077=(cj3*sj2*sj4);
IkReal x2078=(cj2*cj3*cj4);
j0eval[0]=x2075;
j0eval[1]=IKsign(x2075);
j0eval[2]=((IKabs(((((-1.0)*px*x2077))+((px*x2078))+(((-1.0)*x2073*x2076))+(((-1.0)*x2072*x2076)))))+(IKabs(((((-1.0)*sj3*x2073*x2074))+(((-1.0)*x2074*x2077))+((py*x2078))+(((-1.0)*sj3*x2072*x2074))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2079=((-1.0)*r21);
IkReal x2081 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2081)==0){
continue;
}
IkReal x2080=pow(x2081,-0.5);
CheckValue<IkReal> x2082 = IKatan2WithCheck(IkReal(r20),IkReal(x2079),IKFAST_ATAN2_MAGTHRESH);
if(!x2082.valid){
continue;
}
IkReal gconst24=((-1.0)*(x2082.value));
IkReal gconst25=((-1.0)*r20*x2080);
IkReal gconst26=(x2079*x2080);
CheckValue<IkReal> x2083 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2083.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2083.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x2084=((-1.0)*r21);
CheckValue<IkReal> x2087 = IKatan2WithCheck(IkReal(r20),IkReal(x2084),IKFAST_ATAN2_MAGTHRESH);
if(!x2087.valid){
continue;
}
IkReal x2085=((-1.0)*(x2087.value));
IkReal x2086=x2080;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst25;
cj5=gconst26;
j5=x2085;
IkReal gconst24=x2085;
IkReal gconst25=((-1.0)*r20*x2086);
IkReal gconst26=(x2084*x2086);
IkReal x2088=((-1.0)*cj4);
IkReal x2089=x2080;
IkReal x2090=((2.0)*x2089);
j0eval[0]=((IKabs((((r10*r21*x2090))+(((-1.0)*r11*r20*x2090)))))+(IKabs(((((-1.0)*r00*r21*x2089))+((r01*r20*x2089))+((cj3*sj2*x2088))+((sj2*sj3*sj4))+(((-1.0)*cj2*cj3*sj4))+((cj2*sj3*x2088))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2091=(gconst26*r00);
IkReal x2092=((1.0)*cj4);
IkReal x2093=(gconst25*r01);
IkReal x2094=(sj2*sj3*sj4);
IkReal x2095=(cj3*sj2*x2092);
IkReal x2096=((1.0)*cj2*cj3*sj4);
IkReal x2097=(cj2*sj3*x2092);
IkReal x2098=(x2095+x2097+x2096);
op[0]=((((-1.0)*x2098))+x2094+x2091+(((-1.0)*x2093)));
op[1]=((((-2.0)*gconst26*r10))+(((2.0)*gconst25*r11)));
op[2]=((((-1.0)*x2098))+x2094+x2093+(((-1.0)*x2091)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2101 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2101)==0){
continue;
}
IkReal x2099=pow(x2101,-0.5);
IkReal x2100=((1.0)*x2099);
CheckValue<IkReal> x2102 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2102.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x2102.value))));
IkReal gconst28=(r20*x2100);
IkReal gconst29=(r21*x2100);
CheckValue<IkReal> x2103 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2103.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2103.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x2107 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2107.valid){
continue;
}
IkReal x2104=((1.0)*(x2107.value));
IkReal x2105=x2099;
IkReal x2106=((1.0)*x2105);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x2104)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x2104)));
IkReal gconst28=(r20*x2106);
IkReal gconst29=(r21*x2106);
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
CheckValue<IkReal> x2111 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2111.valid){
continue;
}
IkReal x2108=((1.0)*(x2111.value));
IkReal x2109=x2099;
IkReal x2110=((1.0)*x2109);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x2108)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x2108)));
IkReal gconst28=(r20*x2110);
IkReal gconst29=(r21*x2110);
j0eval[0]=0;
j0eval[1]=0;
j0eval[2]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
CheckValue<IkReal> x2115 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2115.valid){
continue;
}
IkReal x2112=((1.0)*(x2115.value));
IkReal x2113=x2099;
IkReal x2114=((1.0)*x2113);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x2112)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x2112)));
IkReal gconst28=(r20*x2114);
IkReal gconst29=(r21*x2114);
IkReal x2116=(cj4*sj2);
IkReal x2117=(cj2*sj4);
IkReal x2118=((1.0)*py);
IkReal x2119=((((-1.0)*pz*r22))+npz);
IkReal x2120=((1.0)*px*sj3);
IkReal x2121=(cj3*sj2*sj4);
IkReal x2122=(cj2*cj3*cj4);
j0eval[0]=x2119;
j0eval[1]=IKsign(x2119);
j0eval[2]=((IKabs(((((-1.0)*x2117*x2120))+(((-1.0)*x2116*x2120))+((px*x2122))+(((-1.0)*px*x2121)))))+(IKabs(((((-1.0)*x2118*x2121))+((py*x2122))+(((-1.0)*sj3*x2117*x2118))+(((-1.0)*sj3*x2116*x2118))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2123=((-1.0)*pz);
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
IkReal x2124=((1.0)*(x2127.value));
IkReal x2125=x2099;
IkReal x2126=((1.0)*x2125);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x2124)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2123);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2123);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2123);
rxp2_2=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x2124)));
IkReal gconst28=(r20*x2126);
IkReal gconst29=(r21*x2126);
j0eval[0]=0;
j0eval[1]=0;
j0eval[2]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2128=((-1.0)*pz);
CheckValue<IkReal> x2132 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2132.valid){
continue;
}
IkReal x2129=((1.0)*(x2132.value));
IkReal x2130=x2099;
IkReal x2131=((1.0)*x2130);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x2129)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2128);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2128);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2128);
rxp2_2=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x2129)));
IkReal gconst28=(r20*x2131);
IkReal gconst29=(r21*x2131);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2133=((-1.0)*pz);
CheckValue<IkReal> x2137 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2137.valid){
continue;
}
IkReal x2134=((1.0)*(x2137.value));
IkReal x2135=x2099;
IkReal x2136=((1.0)*x2135);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x2134)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2133);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2133);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2133);
rxp2_2=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x2134)));
IkReal gconst28=(r20*x2136);
IkReal gconst29=(r21*x2136);
j0eval[0]=r22;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2138=gconst29*gconst29;
IkReal x2139=gconst28*gconst28;
CheckValue<IkReal> x2140 = IKatan2WithCheck(IkReal(((((-1.0)*gconst28*r00))+(((-1.0)*gconst29*r01)))),IkReal((((gconst28*r10))+((gconst29*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2140.valid){
continue;
}
CheckValue<IkReal> x2141=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst28*gconst29*r20*r21))+((x2138*(r21*r21)))+(((-1.0)*x2138))+(((-1.0)*x2139))+((x2139*(r20*r20))))),-1);
if(!x2141.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2140.value)+(((1.5707963267949)*(x2141.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2142=IKsin(j0);
IkReal x2143=IKcos(j0);
IkReal x2144=(gconst29*r00);
IkReal x2145=(gconst28*r10);
IkReal x2146=(gconst29*r10);
IkReal x2147=(gconst28*r11);
IkReal x2148=(gconst29*r11);
IkReal x2149=(gconst29*r01);
IkReal x2150=((1.0)*cj3);
IkReal x2151=(cj4*sj2);
IkReal x2152=(sj2*sj4);
IkReal x2153=(gconst28*r01);
IkReal x2154=(gconst28*r00);
IkReal x2155=((1.0)*cj2*sj3);
IkReal x2156=((1.0)*x2142);
IkReal x2157=((1.0)*x2143);
evalcond[0]=((((-1.0)*r02*x2156))+((r12*x2143)));
evalcond[1]=((((-1.0)*x2144*x2156))+((x2143*x2146))+((x2142*x2153))+(((-1.0)*x2147*x2157)));
evalcond[2]=((1.0)+(((-1.0)*x2149*x2156))+((x2143*x2148))+((x2143*x2145))+(((-1.0)*x2154*x2156)));
evalcond[3]=((((-1.0)*x2149*x2157))+(((-1.0)*x2148*x2156))+(((-1.0)*x2154*x2157))+(((-1.0)*x2145*x2156)));
evalcond[4]=((((-1.0)*sj4*x2155))+(((-1.0)*r02*x2157))+((cj2*cj3*cj4))+(((-1.0)*r12*x2156))+(((-1.0)*x2150*x2152))+(((-1.0)*sj3*x2151)));
evalcond[5]=((((-1.0)*cj2*sj4*x2150))+(((-1.0)*x2144*x2157))+((x2143*x2153))+((x2142*x2147))+(((-1.0)*cj4*x2155))+(((-1.0)*x2150*x2151))+(((-1.0)*x2146*x2156))+((sj3*x2152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2158=((1.0)*gconst28);
CheckValue<IkReal> x2159=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*gconst28*x2158))+(((-1.0)*(gconst29*gconst29))))))),-1);
if(!x2159.valid){
continue;
}
CheckValue<IkReal> x2160 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2158))+((gconst29*r10)))),IkReal(((((-1.0)*r01*x2158))+((gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2160.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2159.value)))+(x2160.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2161=IKsin(j0);
IkReal x2162=IKcos(j0);
IkReal x2163=(gconst29*r00);
IkReal x2164=(gconst28*r10);
IkReal x2165=(gconst29*r10);
IkReal x2166=(gconst28*r11);
IkReal x2167=(gconst29*r11);
IkReal x2168=(gconst29*r01);
IkReal x2169=((1.0)*cj3);
IkReal x2170=(cj4*sj2);
IkReal x2171=(sj2*sj4);
IkReal x2172=(gconst28*r01);
IkReal x2173=(gconst28*r00);
IkReal x2174=((1.0)*cj2*sj3);
IkReal x2175=((1.0)*x2161);
IkReal x2176=((1.0)*x2162);
evalcond[0]=(((r12*x2162))+(((-1.0)*r02*x2175)));
evalcond[1]=((((-1.0)*x2163*x2175))+((x2161*x2172))+(((-1.0)*x2166*x2176))+((x2162*x2165)));
evalcond[2]=((1.0)+(((-1.0)*x2168*x2175))+((x2162*x2167))+((x2162*x2164))+(((-1.0)*x2173*x2175)));
evalcond[3]=((((-1.0)*x2168*x2176))+(((-1.0)*x2164*x2175))+(((-1.0)*x2173*x2176))+(((-1.0)*x2167*x2175)));
evalcond[4]=((((-1.0)*x2169*x2171))+(((-1.0)*sj4*x2174))+((cj2*cj3*cj4))+(((-1.0)*r02*x2176))+(((-1.0)*sj3*x2170))+(((-1.0)*r12*x2175)));
evalcond[5]=((((-1.0)*x2169*x2170))+(((-1.0)*x2163*x2176))+(((-1.0)*cj2*sj4*x2169))+(((-1.0)*cj4*x2174))+((x2161*x2166))+((sj3*x2171))+((x2162*x2172))+(((-1.0)*x2165*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2177=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r21))+((gconst29*r20)))),-1);
if(!x2177.valid){
continue;
}
CheckValue<IkReal> x2178 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2178.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2177.value)))+(x2178.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2179=IKsin(j0);
IkReal x2180=IKcos(j0);
IkReal x2181=(gconst29*r00);
IkReal x2182=(gconst28*r10);
IkReal x2183=(gconst29*r10);
IkReal x2184=(gconst28*r11);
IkReal x2185=(gconst29*r11);
IkReal x2186=(gconst29*r01);
IkReal x2187=((1.0)*cj3);
IkReal x2188=(cj4*sj2);
IkReal x2189=(sj2*sj4);
IkReal x2190=(gconst28*r01);
IkReal x2191=(gconst28*r00);
IkReal x2192=((1.0)*cj2*sj3);
IkReal x2193=((1.0)*x2179);
IkReal x2194=((1.0)*x2180);
evalcond[0]=(((r12*x2180))+(((-1.0)*r02*x2193)));
evalcond[1]=(((x2179*x2190))+((x2180*x2183))+(((-1.0)*x2181*x2193))+(((-1.0)*x2184*x2194)));
evalcond[2]=((1.0)+((x2180*x2182))+((x2180*x2185))+(((-1.0)*x2186*x2193))+(((-1.0)*x2191*x2193)));
evalcond[3]=((((-1.0)*x2186*x2194))+(((-1.0)*x2191*x2194))+(((-1.0)*x2185*x2193))+(((-1.0)*x2182*x2193)));
evalcond[4]=((((-1.0)*x2187*x2189))+((cj2*cj3*cj4))+(((-1.0)*sj4*x2192))+(((-1.0)*r02*x2194))+(((-1.0)*sj3*x2188))+(((-1.0)*r12*x2193)));
evalcond[5]=(((x2179*x2184))+(((-1.0)*x2187*x2188))+(((-1.0)*cj4*x2192))+((sj3*x2189))+((x2180*x2190))+(((-1.0)*x2183*x2193))+(((-1.0)*cj2*sj4*x2187))+(((-1.0)*x2181*x2194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2195=(cj3*sj2);
IkReal x2196=(cj2*sj3);
IkReal x2197=(cj4*px);
IkReal x2198=(cj2*cj3);
IkReal x2199=(cj4*py);
IkReal x2200=((1.0)*px*sj4);
IkReal x2201=((1.0)*py*sj4);
IkReal x2202=((1.0)*sj2*sj3);
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(((((-1.0)*x2195*x2201))+(((-1.0)*x2196*x2201))+(((-1.0)*x2199*x2202))+((x2198*x2199)))),IkReal(((((-1.0)*x2195*x2200))+(((-1.0)*x2196*x2200))+(((-1.0)*x2197*x2202))+((x2197*x2198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
CheckValue<IkReal> x2204=IKPowWithIntegerCheck(IKsign(((((-1.0)*pz*r22))+npz)),-1);
if(!x2204.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2203.value)+(((1.5707963267949)*(x2204.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2205=IKcos(j0);
IkReal x2206=IKsin(j0);
IkReal x2207=(gconst29*r00);
IkReal x2208=(gconst28*r10);
IkReal x2209=(gconst29*r10);
IkReal x2210=(gconst28*r11);
IkReal x2211=(sj3*sj4);
IkReal x2212=((1.0)*cj2);
IkReal x2213=(gconst29*r11);
IkReal x2214=(gconst29*r01);
IkReal x2215=(cj3*cj4);
IkReal x2216=((1.0)*sj2);
IkReal x2217=(gconst28*r01);
IkReal x2218=(cj3*sj4);
IkReal x2219=(gconst28*r00);
IkReal x2220=(cj4*sj3);
IkReal x2221=((0.14203)*sj2);
IkReal x2222=((1.0)*x2205);
IkReal x2223=((1.0)*x2206);
evalcond[0]=(((r12*x2205))+(((-1.0)*r02*x2223)));
evalcond[1]=(((py*x2205))+(((-1.0)*px*x2223)));
evalcond[2]=(((x2206*x2217))+(((-1.0)*x2207*x2223))+(((-1.0)*x2210*x2222))+((x2205*x2209)));
evalcond[3]=((1.0)+(((-1.0)*x2219*x2223))+((x2205*x2213))+((x2205*x2208))+(((-1.0)*x2214*x2223)));
evalcond[4]=((((-1.0)*x2219*x2222))+(((-1.0)*x2208*x2223))+(((-1.0)*x2214*x2222))+(((-1.0)*x2213*x2223)));
evalcond[5]=(((cj2*x2215))+(((-1.0)*r02*x2222))+(((-1.0)*r12*x2223))+(((-1.0)*x2216*x2218))+(((-1.0)*x2211*x2212))+(((-1.0)*x2216*x2220)));
evalcond[6]=((0.11430032722332)+(((0.14203)*cj2*cj3))+x2221+(((-1.0)*py*x2223))+(((-1.0)*sj3*x2221))+(((2.0e-7)*cj3*sj2))+(((-1.0)*px*x2222))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=(((sj2*x2211))+(((-1.0)*x2215*x2216))+(((-1.0)*x2209*x2223))+((x2206*x2210))+(((-1.0)*x2207*x2222))+((x2205*x2217))+(((-1.0)*x2212*x2220))+(((-1.0)*x2212*x2218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2224=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r21))+((gconst29*r20)))),-1);
if(!x2224.valid){
continue;
}
CheckValue<IkReal> x2225 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2225.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2224.value)))+(x2225.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2226=IKcos(j0);
IkReal x2227=IKsin(j0);
IkReal x2228=(gconst29*r00);
IkReal x2229=(gconst28*r10);
IkReal x2230=(gconst29*r10);
IkReal x2231=(gconst28*r11);
IkReal x2232=(sj3*sj4);
IkReal x2233=((1.0)*cj2);
IkReal x2234=(gconst29*r11);
IkReal x2235=(gconst29*r01);
IkReal x2236=(cj3*cj4);
IkReal x2237=((1.0)*sj2);
IkReal x2238=(gconst28*r01);
IkReal x2239=(cj3*sj4);
IkReal x2240=(gconst28*r00);
IkReal x2241=(cj4*sj3);
IkReal x2242=((0.14203)*sj2);
IkReal x2243=((1.0)*x2226);
IkReal x2244=((1.0)*x2227);
evalcond[0]=(((r12*x2226))+(((-1.0)*r02*x2244)));
evalcond[1]=(((py*x2226))+(((-1.0)*px*x2244)));
evalcond[2]=((((-1.0)*x2228*x2244))+((x2226*x2230))+(((-1.0)*x2231*x2243))+((x2227*x2238)));
evalcond[3]=((1.0)+((x2226*x2229))+((x2226*x2234))+(((-1.0)*x2240*x2244))+(((-1.0)*x2235*x2244)));
evalcond[4]=((((-1.0)*x2229*x2244))+(((-1.0)*x2234*x2244))+(((-1.0)*x2240*x2243))+(((-1.0)*x2235*x2243)));
evalcond[5]=((((-1.0)*x2237*x2241))+(((-1.0)*x2237*x2239))+(((-1.0)*r02*x2243))+(((-1.0)*x2232*x2233))+(((-1.0)*r12*x2244))+((cj2*x2236)));
evalcond[6]=((0.11430032722332)+(((0.14203)*cj2*cj3))+x2242+(((-1.0)*sj3*x2242))+(((-1.0)*px*x2243))+(((-1.0)*py*x2244))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x2228*x2243))+((x2226*x2238))+(((-1.0)*x2236*x2237))+(((-1.0)*x2233*x2241))+(((-1.0)*x2230*x2244))+((sj2*x2232))+((x2227*x2231))+(((-1.0)*x2233*x2239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2245 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x2245.valid){
continue;
}
CheckValue<IkReal> x2246=IKPowWithIntegerCheck(IKsign((((gconst29*rxp1_2))+((gconst28*rxp0_2)))),-1);
if(!x2246.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2245.value)+(((1.5707963267949)*(x2246.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2247=IKcos(j0);
IkReal x2248=IKsin(j0);
IkReal x2249=(gconst29*r00);
IkReal x2250=(gconst28*r10);
IkReal x2251=(gconst29*r10);
IkReal x2252=(gconst28*r11);
IkReal x2253=(sj3*sj4);
IkReal x2254=((1.0)*cj2);
IkReal x2255=(gconst29*r11);
IkReal x2256=(gconst29*r01);
IkReal x2257=(cj3*cj4);
IkReal x2258=((1.0)*sj2);
IkReal x2259=(gconst28*r01);
IkReal x2260=(cj3*sj4);
IkReal x2261=(gconst28*r00);
IkReal x2262=(cj4*sj3);
IkReal x2263=((0.14203)*sj2);
IkReal x2264=((1.0)*x2247);
IkReal x2265=((1.0)*x2248);
evalcond[0]=((((-1.0)*r02*x2265))+((r12*x2247)));
evalcond[1]=((((-1.0)*px*x2265))+((py*x2247)));
evalcond[2]=((((-1.0)*x2252*x2264))+(((-1.0)*x2249*x2265))+((x2247*x2251))+((x2248*x2259)));
evalcond[3]=((1.0)+(((-1.0)*x2256*x2265))+((x2247*x2250))+((x2247*x2255))+(((-1.0)*x2261*x2265)));
evalcond[4]=((((-1.0)*x2256*x2264))+(((-1.0)*x2255*x2265))+(((-1.0)*x2250*x2265))+(((-1.0)*x2261*x2264)));
evalcond[5]=((((-1.0)*x2253*x2254))+((cj2*x2257))+(((-1.0)*x2258*x2262))+(((-1.0)*x2258*x2260))+(((-1.0)*r02*x2264))+(((-1.0)*r12*x2265)));
evalcond[6]=((0.11430032722332)+(((0.14203)*cj2*cj3))+x2263+(((-1.0)*py*x2265))+(((-1.0)*px*x2264))+(((-1.0)*sj3*x2263))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x2254*x2260))+(((-1.0)*x2254*x2262))+(((-1.0)*x2249*x2264))+((sj2*x2253))+(((-1.0)*x2257*x2258))+(((-1.0)*x2251*x2265))+((x2247*x2259))+((x2248*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2267 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x2267)==0){
continue;
}
IkReal x2266=pow(x2267,-0.5);
CheckValue<IkReal> x2268 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2268.valid){
continue;
}
IkReal gconst30=((-1.0)*(x2268.value));
IkReal gconst31=((-1.0)*rxp1_2*x2266);
IkReal gconst32=(rxp0_2*x2266);
CheckValue<IkReal> x2269 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2269.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2269.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2271 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x2271)==0){
continue;
}
IkReal x2270=pow(x2271,-0.5);
CheckValue<IkReal> x2272 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2272.valid){
continue;
}
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x2272.value))));
IkReal gconst34=((1.0)*rxp1_2*x2270);
IkReal gconst35=((-1.0)*rxp0_2*x2270);
CheckValue<IkReal> x2273 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2273.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2273.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x2276 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2276.valid){
continue;
}
IkReal x2274=((1.0)*(x2276.value));
IkReal x2275=x2270;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x2274)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x2274)));
IkReal gconst34=((1.0)*rxp1_2*x2275);
IkReal gconst35=((-1.0)*rxp0_2*x2275);
j0eval[0]=0;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=0;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2279 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2279.valid){
continue;
}
IkReal x2277=((1.0)*(x2279.value));
IkReal x2278=x2270;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x2277)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x2277)));
IkReal gconst34=((1.0)*rxp1_2*x2278);
IkReal gconst35=((-1.0)*rxp0_2*x2278);
j0eval[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
CheckValue<IkReal> x2282 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2282.valid){
continue;
}
IkReal x2280=((1.0)*(x2282.value));
IkReal x2281=x2270;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst34;
cj5=gconst35;
j5=((3.14159265)+(((-1.0)*x2280)));
IkReal gconst33=((3.14159265358979)+(((-1.0)*x2280)));
IkReal gconst34=((1.0)*rxp1_2*x2281);
IkReal gconst35=((-1.0)*rxp0_2*x2281);
IkReal x2283=(cj4*sj2);
IkReal x2284=(cj2*sj4);
IkReal x2285=((1.0)*py);
IkReal x2286=((((-1.0)*pz*r22))+npz);
IkReal x2287=((1.0)*px*sj3);
IkReal x2288=(cj3*sj2*sj4);
IkReal x2289=(cj2*cj3*cj4);
j0eval[0]=x2286;
j0eval[1]=IKsign(x2286);
j0eval[2]=((IKabs(((((-1.0)*sj3*x2284*x2285))+(((-1.0)*sj3*x2283*x2285))+((py*x2289))+(((-1.0)*x2285*x2288)))))+(IKabs(((((-1.0)*x2284*x2287))+((px*x2289))+(((-1.0)*px*x2288))+(((-1.0)*x2283*x2287))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2290=(cj3*sj2);
IkReal x2291=(cj2*sj3);
IkReal x2292=(cj4*px);
IkReal x2293=(cj2*cj3);
IkReal x2294=(cj4*py);
IkReal x2295=((1.0)*px*sj4);
IkReal x2296=((1.0)*py*sj4);
IkReal x2297=((1.0)*sj2*sj3);
CheckValue<IkReal> x2298=IKPowWithIntegerCheck(IKsign(((((-1.0)*pz*r22))+npz)),-1);
if(!x2298.valid){
continue;
}
CheckValue<IkReal> x2299 = IKatan2WithCheck(IkReal(((((-1.0)*x2291*x2296))+(((-1.0)*x2290*x2296))+((x2293*x2294))+(((-1.0)*x2294*x2297)))),IkReal(((((-1.0)*x2292*x2297))+(((-1.0)*x2291*x2295))+(((-1.0)*x2290*x2295))+((x2292*x2293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2299.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2298.value)))+(x2299.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2300=IKcos(j0);
IkReal x2301=IKsin(j0);
IkReal x2302=((0.14203)*sj2);
IkReal x2303=((1.0)*cj4);
IkReal x2304=(cj2*sj3);
IkReal x2305=(gconst34*r10);
IkReal x2306=(gconst35*r00);
IkReal x2307=(gconst34*r01);
IkReal x2308=(gconst35*r01);
IkReal x2309=(gconst34*r11);
IkReal x2310=(cj3*sj2);
IkReal x2311=(sj2*sj3);
IkReal x2312=(cj2*cj3);
IkReal x2313=((1.0)*sj4);
IkReal x2314=(gconst34*r00);
IkReal x2315=((1.0)*x2300);
IkReal x2316=((1.0)*x2301);
IkReal x2317=(gconst35*x2300);
evalcond[0]=(((r12*x2300))+(((-1.0)*r02*x2316)));
evalcond[1]=(((py*x2300))+(((-1.0)*px*x2316)));
evalcond[2]=(((r10*x2317))+(((-1.0)*x2309*x2315))+((x2301*x2307))+(((-1.0)*x2306*x2316)));
evalcond[3]=((1.0)+((x2300*x2305))+((r11*x2317))+(((-1.0)*x2308*x2316))+(((-1.0)*x2314*x2316)));
evalcond[4]=((((-1.0)*gconst35*r11*x2316))+(((-1.0)*x2308*x2315))+(((-1.0)*x2314*x2315))+(((-1.0)*x2305*x2316)));
evalcond[5]=((((-1.0)*x2304*x2313))+(((-1.0)*x2310*x2313))+((cj4*x2312))+(((-1.0)*r12*x2316))+(((-1.0)*r02*x2315))+(((-1.0)*x2303*x2311)));
evalcond[6]=((0.11430032722332)+(((-1.0)*py*x2316))+(((2.0e-7)*x2310))+(((-1.0)*sj3*x2302))+x2302+(((0.14203)*x2312))+(((2.0e-7)*x2304))+(((-1.0)*px*x2315))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*gconst35*r10*x2316))+((x2300*x2307))+(((-1.0)*x2303*x2304))+(((-1.0)*x2312*x2313))+((sj4*x2311))+((x2301*x2309))+(((-1.0)*x2303*x2310))+(((-1.0)*x2306*x2315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2318 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2318.valid){
continue;
}
CheckValue<IkReal> x2319=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*r21))+((gconst35*r20)))),-1);
if(!x2319.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2318.value)+(((1.5707963267949)*(x2319.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2320=IKcos(j0);
IkReal x2321=IKsin(j0);
IkReal x2322=((0.14203)*sj2);
IkReal x2323=((1.0)*cj4);
IkReal x2324=(cj2*sj3);
IkReal x2325=(gconst34*r10);
IkReal x2326=(gconst35*r00);
IkReal x2327=(gconst34*r01);
IkReal x2328=(gconst35*r01);
IkReal x2329=(gconst34*r11);
IkReal x2330=(cj3*sj2);
IkReal x2331=(sj2*sj3);
IkReal x2332=(cj2*cj3);
IkReal x2333=((1.0)*sj4);
IkReal x2334=(gconst34*r00);
IkReal x2335=((1.0)*x2320);
IkReal x2336=((1.0)*x2321);
IkReal x2337=(gconst35*x2320);
evalcond[0]=(((r12*x2320))+(((-1.0)*r02*x2336)));
evalcond[1]=((((-1.0)*px*x2336))+((py*x2320)));
evalcond[2]=(((x2321*x2327))+(((-1.0)*x2329*x2335))+(((-1.0)*x2326*x2336))+((r10*x2337)));
evalcond[3]=((1.0)+(((-1.0)*x2328*x2336))+((r11*x2337))+((x2320*x2325))+(((-1.0)*x2334*x2336)));
evalcond[4]=((((-1.0)*x2328*x2335))+(((-1.0)*gconst35*r11*x2336))+(((-1.0)*x2334*x2335))+(((-1.0)*x2325*x2336)));
evalcond[5]=((((-1.0)*r02*x2335))+(((-1.0)*x2323*x2331))+((cj4*x2332))+(((-1.0)*r12*x2336))+(((-1.0)*x2330*x2333))+(((-1.0)*x2324*x2333)));
evalcond[6]=((0.11430032722332)+(((2.0e-7)*x2324))+(((2.0e-7)*x2330))+(((-1.0)*py*x2336))+x2322+(((0.14203)*x2332))+(((-1.0)*sj3*x2322))+(((-1.0)*px*x2335))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x2332*x2333))+((x2321*x2329))+(((-1.0)*x2323*x2330))+(((-1.0)*x2323*x2324))+((x2320*x2327))+((sj4*x2331))+(((-1.0)*x2326*x2335))+(((-1.0)*gconst35*r10*x2336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2338 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x2338.valid){
continue;
}
CheckValue<IkReal> x2339=IKPowWithIntegerCheck(IKsign((((gconst35*rxp1_2))+((gconst34*rxp0_2)))),-1);
if(!x2339.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2338.value)+(((1.5707963267949)*(x2339.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2340=IKcos(j0);
IkReal x2341=IKsin(j0);
IkReal x2342=((0.14203)*sj2);
IkReal x2343=((1.0)*cj4);
IkReal x2344=(cj2*sj3);
IkReal x2345=(gconst34*r10);
IkReal x2346=(gconst35*r00);
IkReal x2347=(gconst34*r01);
IkReal x2348=(gconst35*r01);
IkReal x2349=(gconst34*r11);
IkReal x2350=(cj3*sj2);
IkReal x2351=(sj2*sj3);
IkReal x2352=(cj2*cj3);
IkReal x2353=((1.0)*sj4);
IkReal x2354=(gconst34*r00);
IkReal x2355=((1.0)*x2340);
IkReal x2356=((1.0)*x2341);
IkReal x2357=(gconst35*x2340);
evalcond[0]=(((r12*x2340))+(((-1.0)*r02*x2356)));
evalcond[1]=((((-1.0)*px*x2356))+((py*x2340)));
evalcond[2]=(((r10*x2357))+(((-1.0)*x2346*x2356))+((x2341*x2347))+(((-1.0)*x2349*x2355)));
evalcond[3]=((1.0)+(((-1.0)*x2354*x2356))+((x2340*x2345))+(((-1.0)*x2348*x2356))+((r11*x2357)));
evalcond[4]=((((-1.0)*x2354*x2355))+(((-1.0)*x2345*x2356))+(((-1.0)*gconst35*r11*x2356))+(((-1.0)*x2348*x2355)));
evalcond[5]=(((cj4*x2352))+(((-1.0)*x2344*x2353))+(((-1.0)*x2343*x2351))+(((-1.0)*x2350*x2353))+(((-1.0)*r02*x2355))+(((-1.0)*r12*x2356)));
evalcond[6]=((0.11430032722332)+(((0.14203)*x2352))+x2342+(((-1.0)*py*x2356))+(((-1.0)*sj3*x2342))+(((-1.0)*px*x2355))+(((2.0e-7)*x2344))+(((2.0e-7)*x2350))+(((0.04825)*cj2)));
evalcond[7]=(((x2340*x2347))+(((-1.0)*x2346*x2355))+((x2341*x2349))+((sj4*x2351))+(((-1.0)*gconst35*r10*x2356))+(((-1.0)*x2352*x2353))+(((-1.0)*x2343*x2350))+(((-1.0)*x2343*x2344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2358=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2358);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2358);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2358);
rxp2_2=0;
IkReal x2359=(((cj5*r20))+(((-1.0)*r21*sj5)));
j0eval[0]=x2359;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=IKsign(x2359);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2360=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2360);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2360);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2360);
rxp2_2=0;
IkReal x2361=((1.0)*sj5);
j0eval[0]=r22;
j0eval[1]=IKsign(r22);
j0eval[2]=((IKabs((((cj5*r10))+(((-1.0)*r11*x2361)))))+(IKabs(((((-1.0)*r01*x2361))+((cj5*r00))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2362=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2362);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2362);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2362);
rxp2_2=0;
IkReal x2363=cj5*cj5;
IkReal x2364=r20*r20;
IkReal x2365=((-1.0)+(((2.0)*cj5*r20*r21*sj5))+x2364+(((-1.0)*x2363*x2364))+((x2363*(r21*r21))));
j0eval[0]=x2365;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x2365);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2366=(cj4*r12);
IkReal x2367=((1.0)*sj3);
IkReal x2368=(cj2*cj3);
IkReal x2369=(r02*sj4);
IkReal x2370=(cj4*r02);
IkReal x2371=(r12*sj4);
IkReal x2372=((1.0)*cj3*sj2);
if( IKabs((((x2366*x2368))+(((-1.0)*cj2*x2367*x2371))+(((-1.0)*sj2*x2366*x2367))+(((-1.0)*x2371*x2372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2368*x2370))+(((-1.0)*cj2*x2367*x2369))+(((-1.0)*sj2*x2367*x2370))+(((-1.0)*x2369*x2372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2366*x2368))+(((-1.0)*cj2*x2367*x2371))+(((-1.0)*sj2*x2366*x2367))+(((-1.0)*x2371*x2372))))+IKsqr((((x2368*x2370))+(((-1.0)*cj2*x2367*x2369))+(((-1.0)*sj2*x2367*x2370))+(((-1.0)*x2369*x2372))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x2366*x2368))+(((-1.0)*cj2*x2367*x2371))+(((-1.0)*sj2*x2366*x2367))+(((-1.0)*x2371*x2372))), (((x2368*x2370))+(((-1.0)*cj2*x2367*x2369))+(((-1.0)*sj2*x2367*x2370))+(((-1.0)*x2369*x2372))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2373=IKcos(j0);
IkReal x2374=IKsin(j0);
IkReal x2375=((1.0)*cj5);
IkReal x2376=(r10*sj5);
IkReal x2377=((1.0)*sj5);
IkReal x2378=(cj2*cj3);
IkReal x2379=((1.0)*sj4);
IkReal x2380=(cj3*sj2);
IkReal x2381=((1.0)*cj4);
IkReal x2382=(sj2*sj3);
IkReal x2383=((1.0)*cj2*sj3);
IkReal x2384=(r01*x2374);
IkReal x2385=(r00*x2373);
IkReal x2386=((1.0)*x2374);
IkReal x2387=(cj5*x2373);
IkReal x2388=(r01*x2373);
IkReal x2389=(r11*x2374);
evalcond[0]=((((-1.0)*r02*x2386))+((r12*x2373)));
evalcond[1]=((((-1.0)*r11*x2373*x2377))+(((-1.0)*r00*x2374*x2375))+((sj5*x2384))+((r10*x2387)));
evalcond[2]=((1.0)+((x2373*x2376))+(((-1.0)*x2375*x2384))+(((-1.0)*r00*x2374*x2377))+((r11*x2387)));
evalcond[3]=((((-1.0)*x2376*x2386))+(((-1.0)*x2375*x2388))+(((-1.0)*x2375*x2389))+(((-1.0)*x2377*x2385)));
evalcond[4]=((((-1.0)*r12*x2386))+(((-1.0)*x2381*x2382))+((cj4*x2378))+(((-1.0)*r02*x2373))+(((-1.0)*x2379*x2380))+(((-1.0)*cj2*sj3*x2379)));
evalcond[5]=((((-1.0)*x2380*x2381))+((sj4*x2382))+(((-1.0)*x2375*x2385))+(((-1.0)*r10*x2374*x2375))+(((-1.0)*cj2*sj3*x2381))+(((-1.0)*x2378*x2379))+((sj5*x2389))+((sj5*x2388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2390=IKcos(j0);
IkReal x2391=IKsin(j0);
IkReal x2392=((1.0)*cj2);
IkReal x2393=((1.0)*sj5);
IkReal x2394=(cj5*x2390);
IkReal x2395=(sj5*x2390);
IkReal x2396=(sj5*x2391);
IkReal x2397=((1.0)*cj5*x2391);
evalcond[0]=((((-1.0)*r00*x2397))+(((-1.0)*r11*x2390*x2393))+((r01*x2396))+((r10*x2394)));
evalcond[1]=((1.0)+(((-1.0)*r01*x2397))+(((-1.0)*r00*x2391*x2393))+((r10*x2395))+((r11*x2394)));
evalcond[2]=((((-1.0)*r01*x2394))+(((-1.0)*r00*x2390*x2393))+(((-1.0)*r10*x2391*x2393))+(((-1.0)*r11*x2397)));
evalcond[3]=((((-1.0)*r10*x2397))+((r01*x2395))+(((-1.0)*r00*x2394))+(((-1.0)*cj3*sj4*x2392))+((sj2*sj3*sj4))+(((-1.0)*cj4*sj3*x2392))+(((-1.0)*cj3*cj4*sj2))+((r11*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2398=IKcos(j0);
IkReal x2399=IKsin(j0);
IkReal x2400=((1.0)*cj2);
IkReal x2401=((1.0)*sj5);
IkReal x2402=(cj5*x2398);
IkReal x2403=(sj5*x2398);
IkReal x2404=(sj5*x2399);
IkReal x2405=((1.0)*cj5*x2399);
evalcond[0]=(((r10*x2402))+((r01*x2404))+(((-1.0)*r11*x2398*x2401))+(((-1.0)*r00*x2405)));
evalcond[1]=((1.0)+((r10*x2403))+((r11*x2402))+(((-1.0)*r01*x2405))+(((-1.0)*r00*x2399*x2401)));
evalcond[2]=((((-1.0)*r01*x2402))+(((-1.0)*r00*x2398*x2401))+(((-1.0)*r11*x2405))+(((-1.0)*r10*x2399*x2401)));
evalcond[3]=(((r01*x2403))+((r11*x2404))+(((-1.0)*r00*x2402))+((sj2*sj3*sj4))+(((-1.0)*cj4*sj3*x2400))+(((-1.0)*cj3*cj4*sj2))+(((-1.0)*r10*x2405))+(((-1.0)*cj3*sj4*x2400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2406=cj5*cj5;
CheckValue<IkReal> x2407=IKPowWithIntegerCheck(IKsign(((-1.0)+(((2.0)*cj5*r20*r21*sj5))+(((r20*r20)*(((1.0)+(((-1.0)*x2406))))))+((x2406*(r21*r21))))),-1);
if(!x2407.valid){
continue;
}
CheckValue<IkReal> x2408 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2408.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2407.value)))+(x2408.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2409=IKcos(j0);
IkReal x2410=IKsin(j0);
IkReal x2411=((1.0)*cj5);
IkReal x2412=(r10*sj5);
IkReal x2413=((1.0)*sj5);
IkReal x2414=(cj2*cj3);
IkReal x2415=((1.0)*sj4);
IkReal x2416=(cj3*sj2);
IkReal x2417=((1.0)*cj4);
IkReal x2418=(sj2*sj3);
IkReal x2419=((1.0)*cj2*sj3);
IkReal x2420=(r01*x2410);
IkReal x2421=(r00*x2409);
IkReal x2422=((1.0)*x2410);
IkReal x2423=(cj5*x2409);
IkReal x2424=(r01*x2409);
IkReal x2425=(r11*x2410);
evalcond[0]=((((-1.0)*r02*x2422))+((r12*x2409)));
evalcond[1]=((((-1.0)*r00*x2410*x2411))+((sj5*x2420))+((r10*x2423))+(((-1.0)*r11*x2409*x2413)));
evalcond[2]=((1.0)+(((-1.0)*r00*x2410*x2413))+((x2409*x2412))+((r11*x2423))+(((-1.0)*x2411*x2420)));
evalcond[3]=((((-1.0)*x2413*x2421))+(((-1.0)*x2412*x2422))+(((-1.0)*x2411*x2424))+(((-1.0)*x2411*x2425)));
evalcond[4]=((((-1.0)*x2417*x2418))+(((-1.0)*x2415*x2416))+(((-1.0)*r12*x2422))+(((-1.0)*cj2*sj3*x2415))+(((-1.0)*r02*x2409))+((cj4*x2414)));
evalcond[5]=(((sj5*x2425))+((sj5*x2424))+(((-1.0)*x2416*x2417))+(((-1.0)*x2414*x2415))+((sj4*x2418))+(((-1.0)*cj2*sj3*x2417))+(((-1.0)*r10*x2410*x2411))+(((-1.0)*x2411*x2421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2426=((1.0)*sj5);
CheckValue<IkReal> x2427 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x2426)))),IkReal(((((-1.0)*r01*x2426))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2427.valid){
continue;
}
CheckValue<IkReal> x2428=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2428.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2427.value)+(((-1.5707963267949)*(x2428.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2429=IKcos(j0);
IkReal x2430=IKsin(j0);
IkReal x2431=((1.0)*cj5);
IkReal x2432=(r10*sj5);
IkReal x2433=((1.0)*sj5);
IkReal x2434=(cj2*cj3);
IkReal x2435=((1.0)*sj4);
IkReal x2436=(cj3*sj2);
IkReal x2437=((1.0)*cj4);
IkReal x2438=(sj2*sj3);
IkReal x2439=((1.0)*cj2*sj3);
IkReal x2440=(r01*x2430);
IkReal x2441=(r00*x2429);
IkReal x2442=((1.0)*x2430);
IkReal x2443=(cj5*x2429);
IkReal x2444=(r01*x2429);
IkReal x2445=(r11*x2430);
evalcond[0]=(((r12*x2429))+(((-1.0)*r02*x2442)));
evalcond[1]=(((sj5*x2440))+((r10*x2443))+(((-1.0)*r11*x2429*x2433))+(((-1.0)*r00*x2430*x2431)));
evalcond[2]=((1.0)+((x2429*x2432))+(((-1.0)*x2431*x2440))+(((-1.0)*r00*x2430*x2433))+((r11*x2443)));
evalcond[3]=((((-1.0)*x2431*x2444))+(((-1.0)*x2431*x2445))+(((-1.0)*x2433*x2441))+(((-1.0)*x2432*x2442)));
evalcond[4]=((((-1.0)*r02*x2429))+(((-1.0)*r12*x2442))+(((-1.0)*x2435*x2436))+((cj4*x2434))+(((-1.0)*x2437*x2438))+(((-1.0)*cj2*sj3*x2435)));
evalcond[5]=(((sj5*x2445))+((sj5*x2444))+(((-1.0)*x2431*x2441))+(((-1.0)*x2434*x2435))+(((-1.0)*x2436*x2437))+(((-1.0)*r10*x2430*x2431))+(((-1.0)*cj2*sj3*x2437))+((sj4*x2438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2446 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2446.valid){
continue;
}
CheckValue<IkReal> x2447=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2447.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2446.value)+(((1.5707963267949)*(x2447.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2448=IKcos(j0);
IkReal x2449=IKsin(j0);
IkReal x2450=((1.0)*cj5);
IkReal x2451=(r10*sj5);
IkReal x2452=((1.0)*sj5);
IkReal x2453=(cj2*cj3);
IkReal x2454=((1.0)*sj4);
IkReal x2455=(cj3*sj2);
IkReal x2456=((1.0)*cj4);
IkReal x2457=(sj2*sj3);
IkReal x2458=((1.0)*cj2*sj3);
IkReal x2459=(r01*x2449);
IkReal x2460=(r00*x2448);
IkReal x2461=((1.0)*x2449);
IkReal x2462=(cj5*x2448);
IkReal x2463=(r01*x2448);
IkReal x2464=(r11*x2449);
evalcond[0]=(((r12*x2448))+(((-1.0)*r02*x2461)));
evalcond[1]=((((-1.0)*r11*x2448*x2452))+((sj5*x2459))+((r10*x2462))+(((-1.0)*r00*x2449*x2450)));
evalcond[2]=((1.0)+(((-1.0)*x2450*x2459))+((r11*x2462))+((x2448*x2451))+(((-1.0)*r00*x2449*x2452)));
evalcond[3]=((((-1.0)*x2451*x2461))+(((-1.0)*x2450*x2464))+(((-1.0)*x2450*x2463))+(((-1.0)*x2452*x2460)));
evalcond[4]=((((-1.0)*r02*x2448))+(((-1.0)*r12*x2461))+(((-1.0)*x2454*x2455))+((cj4*x2453))+(((-1.0)*x2456*x2457))+(((-1.0)*cj2*sj3*x2454)));
evalcond[5]=((((-1.0)*x2453*x2454))+((sj5*x2463))+((sj5*x2464))+(((-1.0)*cj2*sj3*x2456))+((sj4*x2457))+(((-1.0)*x2455*x2456))+(((-1.0)*r10*x2449*x2450))+(((-1.0)*x2450*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2465=(cj3*sj2);
IkReal x2466=(cj2*sj3);
IkReal x2467=(cj4*px);
IkReal x2468=(cj2*cj3);
IkReal x2469=(cj4*py);
IkReal x2470=((1.0)*px*sj4);
IkReal x2471=((1.0)*py*sj4);
IkReal x2472=((1.0)*sj2*sj3);
CheckValue<IkReal> x2473 = IKatan2WithCheck(IkReal(((((-1.0)*x2469*x2472))+(((-1.0)*x2466*x2471))+((x2468*x2469))+(((-1.0)*x2465*x2471)))),IkReal((((x2467*x2468))+(((-1.0)*x2467*x2472))+(((-1.0)*x2466*x2470))+(((-1.0)*x2465*x2470)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2473.valid){
continue;
}
CheckValue<IkReal> x2474=IKPowWithIntegerCheck(IKsign(((((-1.0)*pz*r22))+npz)),-1);
if(!x2474.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2473.value)+(((1.5707963267949)*(x2474.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2475=IKcos(j0);
IkReal x2476=IKsin(j0);
IkReal x2477=(cj5*r01);
IkReal x2478=(cj5*r00);
IkReal x2479=((0.14203)*sj2);
IkReal x2480=((1.0)*cj4);
IkReal x2481=(cj2*sj3);
IkReal x2482=(cj3*sj2);
IkReal x2483=((1.0)*sj4);
IkReal x2484=(r10*sj5);
IkReal x2485=(r11*sj5);
IkReal x2486=(cj2*cj3);
IkReal x2487=(r00*sj5);
IkReal x2488=(r01*sj5);
IkReal x2489=(sj2*sj3);
IkReal x2490=((1.0)*x2475);
IkReal x2491=((1.0)*x2476);
IkReal x2492=(cj5*x2475);
evalcond[0]=(((r12*x2475))+(((-1.0)*r02*x2491)));
evalcond[1]=(((py*x2475))+(((-1.0)*px*x2491)));
evalcond[2]=(((x2476*x2488))+(((-1.0)*x2485*x2490))+(((-1.0)*x2478*x2491))+((r10*x2492)));
evalcond[3]=((1.0)+(((-1.0)*x2477*x2491))+((r11*x2492))+((x2475*x2484))+(((-1.0)*x2487*x2491)));
evalcond[4]=((((-1.0)*x2477*x2490))+(((-1.0)*cj5*r11*x2491))+(((-1.0)*x2484*x2491))+(((-1.0)*x2487*x2490)));
evalcond[5]=((((-1.0)*r02*x2490))+(((-1.0)*x2482*x2483))+(((-1.0)*x2480*x2489))+(((-1.0)*x2481*x2483))+((cj4*x2486))+(((-1.0)*r12*x2491)));
evalcond[6]=((0.11430032722332)+x2479+(((2.0e-7)*x2481))+(((2.0e-7)*x2482))+(((-1.0)*py*x2491))+(((0.14203)*x2486))+(((-1.0)*sj3*x2479))+(((0.04825)*cj2))+(((-1.0)*px*x2490)));
evalcond[7]=(((x2476*x2485))+(((-1.0)*cj5*r10*x2491))+((x2475*x2488))+((sj4*x2489))+(((-1.0)*x2480*x2482))+(((-1.0)*x2480*x2481))+(((-1.0)*x2478*x2490))+(((-1.0)*x2483*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2493 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2493.valid){
continue;
}
CheckValue<IkReal> x2494=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2494.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2493.value)+(((1.5707963267949)*(x2494.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2495=IKcos(j0);
IkReal x2496=IKsin(j0);
IkReal x2497=(cj5*r01);
IkReal x2498=(cj5*r00);
IkReal x2499=((0.14203)*sj2);
IkReal x2500=((1.0)*cj4);
IkReal x2501=(cj2*sj3);
IkReal x2502=(cj3*sj2);
IkReal x2503=((1.0)*sj4);
IkReal x2504=(r10*sj5);
IkReal x2505=(r11*sj5);
IkReal x2506=(cj2*cj3);
IkReal x2507=(r00*sj5);
IkReal x2508=(r01*sj5);
IkReal x2509=(sj2*sj3);
IkReal x2510=((1.0)*x2495);
IkReal x2511=((1.0)*x2496);
IkReal x2512=(cj5*x2495);
evalcond[0]=(((r12*x2495))+(((-1.0)*r02*x2511)));
evalcond[1]=((((-1.0)*px*x2511))+((py*x2495)));
evalcond[2]=(((x2496*x2508))+((r10*x2512))+(((-1.0)*x2505*x2510))+(((-1.0)*x2498*x2511)));
evalcond[3]=((1.0)+((r11*x2512))+(((-1.0)*x2497*x2511))+((x2495*x2504))+(((-1.0)*x2507*x2511)));
evalcond[4]=((((-1.0)*cj5*r11*x2511))+(((-1.0)*x2497*x2510))+(((-1.0)*x2504*x2511))+(((-1.0)*x2507*x2510)));
evalcond[5]=(((cj4*x2506))+(((-1.0)*x2502*x2503))+(((-1.0)*r12*x2511))+(((-1.0)*x2500*x2509))+(((-1.0)*x2501*x2503))+(((-1.0)*r02*x2510)));
evalcond[6]=((0.11430032722332)+x2499+(((2.0e-7)*x2501))+(((2.0e-7)*x2502))+(((-1.0)*sj3*x2499))+(((0.14203)*x2506))+(((-1.0)*px*x2510))+(((-1.0)*py*x2511))+(((0.04825)*cj2)));
evalcond[7]=(((sj4*x2509))+((x2496*x2505))+(((-1.0)*cj5*r10*x2511))+(((-1.0)*x2503*x2506))+((x2495*x2508))+(((-1.0)*x2500*x2501))+(((-1.0)*x2500*x2502))+(((-1.0)*x2498*x2510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2513 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x2513.valid){
continue;
}
CheckValue<IkReal> x2514=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+((rxp0_2*sj5)))),-1);
if(!x2514.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2513.value)+(((1.5707963267949)*(x2514.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2515=IKcos(j0);
IkReal x2516=IKsin(j0);
IkReal x2517=(cj5*r01);
IkReal x2518=(cj5*r00);
IkReal x2519=((0.14203)*sj2);
IkReal x2520=((1.0)*cj4);
IkReal x2521=(cj2*sj3);
IkReal x2522=(cj3*sj2);
IkReal x2523=((1.0)*sj4);
IkReal x2524=(r10*sj5);
IkReal x2525=(r11*sj5);
IkReal x2526=(cj2*cj3);
IkReal x2527=(r00*sj5);
IkReal x2528=(r01*sj5);
IkReal x2529=(sj2*sj3);
IkReal x2530=((1.0)*x2515);
IkReal x2531=((1.0)*x2516);
IkReal x2532=(cj5*x2515);
evalcond[0]=((((-1.0)*r02*x2531))+((r12*x2515)));
evalcond[1]=(((py*x2515))+(((-1.0)*px*x2531)));
evalcond[2]=(((x2516*x2528))+(((-1.0)*x2525*x2530))+((r10*x2532))+(((-1.0)*x2518*x2531)));
evalcond[3]=((1.0)+((x2515*x2524))+(((-1.0)*x2527*x2531))+((r11*x2532))+(((-1.0)*x2517*x2531)));
evalcond[4]=((((-1.0)*x2524*x2531))+(((-1.0)*x2527*x2530))+(((-1.0)*cj5*r11*x2531))+(((-1.0)*x2517*x2530)));
evalcond[5]=((((-1.0)*x2520*x2529))+(((-1.0)*r02*x2530))+((cj4*x2526))+(((-1.0)*x2522*x2523))+(((-1.0)*r12*x2531))+(((-1.0)*x2521*x2523)));
evalcond[6]=((0.11430032722332)+(((2.0e-7)*x2522))+(((2.0e-7)*x2521))+x2519+(((-1.0)*sj3*x2519))+(((-1.0)*px*x2530))+(((0.14203)*x2526))+(((-1.0)*py*x2531))+(((0.04825)*cj2)));
evalcond[7]=(((sj4*x2529))+(((-1.0)*x2520*x2521))+(((-1.0)*x2520*x2522))+((x2515*x2528))+((x2516*x2525))+(((-1.0)*x2523*x2526))+(((-1.0)*cj5*r10*x2531))+(((-1.0)*x2518*x2530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x2534 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2534.valid){
continue;
}
IkReal x2533=x2534.value;
j5array[0]=((-1.0)*x2533);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x2533)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2535=(r22*sj3);
IkReal x2536=(cj3*sj2);
IkReal x2537=((1.0)*sj2);
IkReal x2538=(cj5*r20);
IkReal x2539=(cj2*cj3);
IkReal x2540=(r21*sj5);
IkReal x2541=(cj2*sj3);
if( IKabs(((((-1.0)*x2538*x2541))+(((-1.0)*x2535*x2537))+((x2536*x2540))+((r22*x2539))+((x2540*x2541))+(((-1.0)*x2536*x2538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x2537*x2538))+(((-1.0)*x2539*x2540))+((sj2*sj3*x2540))+((r22*x2536))+((cj2*x2535))+((x2538*x2539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2538*x2541))+(((-1.0)*x2535*x2537))+((x2536*x2540))+((r22*x2539))+((x2540*x2541))+(((-1.0)*x2536*x2538))))+IKsqr(((((-1.0)*sj3*x2537*x2538))+(((-1.0)*x2539*x2540))+((sj2*sj3*x2540))+((r22*x2536))+((cj2*x2535))+((x2538*x2539))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*x2538*x2541))+(((-1.0)*x2535*x2537))+((x2536*x2540))+((r22*x2539))+((x2540*x2541))+(((-1.0)*x2536*x2538))), ((((-1.0)*sj3*x2537*x2538))+(((-1.0)*x2539*x2540))+((sj2*sj3*x2540))+((r22*x2536))+((cj2*x2535))+((x2538*x2539))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2542=IKcos(j4);
IkReal x2543=IKsin(j4);
IkReal x2544=((1.0)*sj3);
IkReal x2545=(cj2*x2542);
IkReal x2546=(sj2*x2542);
IkReal x2547=(cj2*x2543);
IkReal x2548=(sj2*x2543);
evalcond[0]=(((cj3*x2547))+((cj3*x2546))+((sj3*x2545))+(((-1.0)*x2544*x2548))+(((-1.0)*r22)));
evalcond[1]=(((cj3*x2545))+(((-1.0)*cj3*x2548))+((r21*sj5))+(((-1.0)*x2544*x2547))+(((-1.0)*x2544*x2546))+(((-1.0)*cj5*r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x2549=(((cj5*rxp1_2))+((rxp0_2*sj5)));
j0eval[0]=x2549;
j0eval[1]=((IKabs(px))+(IKabs(py)));
j0eval[2]=IKsign(x2549);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x2550=(((cj5*r20))+(((-1.0)*r21*sj5)));
j0eval[0]=x2550;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=IKsign(x2550);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x2551=(cj4*sj2);
IkReal x2552=(cj2*sj4);
IkReal x2553=((1.0)*py);
IkReal x2554=((((-1.0)*pz*r22))+npz);
IkReal x2555=((1.0)*px*sj3);
IkReal x2556=(cj3*sj2*sj4);
IkReal x2557=(cj2*cj3*cj4);
j0eval[0]=x2554;
j0eval[1]=IKsign(x2554);
j0eval[2]=((IKabs(((((-1.0)*px*x2556))+(((-1.0)*x2552*x2555))+((px*x2557))+(((-1.0)*x2551*x2555)))))+(IKabs(((((-1.0)*sj3*x2552*x2553))+(((-1.0)*sj3*x2551*x2553))+((py*x2557))+(((-1.0)*x2553*x2556))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2558=((-1.0)*r21);
IkReal x2560 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2560)==0){
continue;
}
IkReal x2559=pow(x2560,-0.5);
CheckValue<IkReal> x2561 = IKatan2WithCheck(IkReal(r20),IkReal(x2558),IKFAST_ATAN2_MAGTHRESH);
if(!x2561.valid){
continue;
}
IkReal gconst36=((-1.0)*(x2561.value));
IkReal gconst37=((-1.0)*r20*x2559);
IkReal gconst38=(x2558*x2559);
CheckValue<IkReal> x2562 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2562.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2562.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
IkReal x2563=((-1.0)*r21);
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal(r20),IkReal(x2563),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
IkReal x2564=((-1.0)*(x2566.value));
IkReal x2565=x2559;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x2564;
IkReal gconst36=x2564;
IkReal gconst37=((-1.0)*r20*x2565);
IkReal gconst38=(x2563*x2565);
IkReal x2567=((-1.0)*cj4);
IkReal x2568=x2559;
IkReal x2569=((2.0)*x2568);
j0eval[0]=((IKabs((((cj3*sj2*x2567))+(((-1.0)*r00*r21*x2568))+((cj2*sj3*x2567))+((r01*r20*x2568))+((sj2*sj3*sj4))+(((-1.0)*cj2*cj3*sj4)))))+(IKabs(((((-1.0)*r11*r20*x2569))+((r10*r21*x2569))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j0]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x2570=((1.0)*cj2);
IkReal x2571=(gconst37*r01);
IkReal x2572=(gconst38*r00);
IkReal x2573=(sj2*sj3*sj4);
IkReal x2574=((1.0)*cj3*cj4*sj2);
IkReal x2575=(cj3*sj4*x2570);
IkReal x2576=(cj4*sj3*x2570);
IkReal x2577=(x2576+x2574+x2575);
op[0]=(x2572+x2573+(((-1.0)*x2571))+(((-1.0)*x2577)));
op[1]=((((2.0)*gconst37*r11))+(((-2.0)*gconst38*r10)));
op[2]=(x2573+x2571+(((-1.0)*x2572))+(((-1.0)*x2577)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2580 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2580)==0){
continue;
}
IkReal x2578=pow(x2580,-0.5);
IkReal x2579=((1.0)*x2578);
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x2581.value))));
IkReal gconst40=(r20*x2579);
IkReal gconst41=(r21*x2579);
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2582.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[1];
CheckValue<IkReal> x2586 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2586.valid){
continue;
}
IkReal x2583=((1.0)*(x2586.value));
IkReal x2584=x2578;
IkReal x2585=((1.0)*x2584);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2583)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2583)));
IkReal gconst40=(r20*x2585);
IkReal gconst41=(r21*x2585);
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
CheckValue<IkReal> x2590 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2590.valid){
continue;
}
IkReal x2587=((1.0)*(x2590.value));
IkReal x2588=x2578;
IkReal x2589=((1.0)*x2588);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2587)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2587)));
IkReal gconst40=(r20*x2589);
IkReal gconst41=(r21*x2589);
j0eval[0]=0;
j0eval[1]=0;
j0eval[2]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
CheckValue<IkReal> x2594 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2594.valid){
continue;
}
IkReal x2591=((1.0)*(x2594.value));
IkReal x2592=x2578;
IkReal x2593=((1.0)*x2592);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2591)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2591)));
IkReal gconst40=(r20*x2593);
IkReal gconst41=(r21*x2593);
IkReal x2595=(cj4*sj2);
IkReal x2596=(cj2*sj4);
IkReal x2597=((1.0)*py);
IkReal x2598=((((-1.0)*pz*r22))+npz);
IkReal x2599=((1.0)*px*sj3);
IkReal x2600=(cj3*sj2*sj4);
IkReal x2601=(cj2*cj3*cj4);
j0eval[0]=x2598;
j0eval[1]=IKsign(x2598);
j0eval[2]=((IKabs((((px*x2601))+(((-1.0)*px*x2600))+(((-1.0)*x2596*x2599))+(((-1.0)*x2595*x2599)))))+(IKabs((((py*x2601))+(((-1.0)*x2597*x2600))+(((-1.0)*sj3*x2596*x2597))+(((-1.0)*sj3*x2595*x2597))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2602=((-1.0)*pz);
CheckValue<IkReal> x2606 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2606.valid){
continue;
}
IkReal x2603=((1.0)*(x2606.value));
IkReal x2604=x2578;
IkReal x2605=((1.0)*x2604);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2603)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2602);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2602);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2602);
rxp2_2=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2603)));
IkReal gconst40=(r20*x2605);
IkReal gconst41=(r21*x2605);
j0eval[0]=0;
j0eval[1]=0;
j0eval[2]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2607=((-1.0)*pz);
CheckValue<IkReal> x2611 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2611.valid){
continue;
}
IkReal x2608=((1.0)*(x2611.value));
IkReal x2609=x2578;
IkReal x2610=((1.0)*x2609);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2608)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2607);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2607);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2607);
rxp2_2=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2608)));
IkReal gconst40=(r20*x2610);
IkReal gconst41=(r21*x2610);
j0eval[0]=1.0;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x2612=((-1.0)*pz);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal(r20),IkReal(((-1.0)*r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
IkReal x2613=((1.0)*(x2616.value));
IkReal x2614=x2578;
IkReal x2615=((1.0)*x2614);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x2613)));
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2612);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2612);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2612);
rxp2_2=0;
IkReal gconst39=((3.14159265358979)+(((-1.0)*x2613)));
IkReal gconst40=(r20*x2615);
IkReal gconst41=(r21*x2615);
j0eval[0]=r22;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2617=gconst41*gconst41;
IkReal x2618=gconst40*gconst40;
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2618))+(((-1.0)*x2617))+((x2617*(r21*r21)))+((x2618*(r20*r20)))+(((2.0)*gconst40*gconst41*r20*r21)))),-1);
if(!x2619.valid){
continue;
}
CheckValue<IkReal> x2620 = IKatan2WithCheck(IkReal(((((-1.0)*gconst41*r01))+(((-1.0)*gconst40*r00)))),IkReal((((gconst40*r10))+((gconst41*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2620.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2619.value)))+(x2620.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2621=IKsin(j0);
IkReal x2622=IKcos(j0);
IkReal x2623=(gconst41*r11);
IkReal x2624=(gconst40*r10);
IkReal x2625=(gconst40*r00);
IkReal x2626=(gconst41*r00);
IkReal x2627=(gconst41*r10);
IkReal x2628=(gconst41*r01);
IkReal x2629=((1.0)*cj3);
IkReal x2630=(cj4*sj2);
IkReal x2631=(sj2*sj4);
IkReal x2632=((1.0)*x2621);
IkReal x2633=((1.0)*cj2*sj3);
IkReal x2634=((1.0)*x2622);
IkReal x2635=(gconst40*x2621);
evalcond[0]=((((-1.0)*r02*x2632))+((r12*x2622)));
evalcond[1]=(((r01*x2635))+(((-1.0)*gconst40*r11*x2634))+((x2622*x2627))+(((-1.0)*x2626*x2632)));
evalcond[2]=((1.0)+(((-1.0)*x2628*x2632))+((x2622*x2624))+((x2622*x2623))+(((-1.0)*x2625*x2632)));
evalcond[3]=((((-1.0)*x2628*x2634))+(((-1.0)*x2623*x2632))+(((-1.0)*x2625*x2634))+(((-1.0)*x2624*x2632)));
evalcond[4]=((((-1.0)*r02*x2634))+(((-1.0)*sj3*x2630))+(((-1.0)*sj4*x2633))+((cj2*cj3*cj4))+(((-1.0)*x2629*x2631))+(((-1.0)*r12*x2632)));
evalcond[5]=(((r11*x2635))+((gconst40*r01*x2622))+((sj3*x2631))+(((-1.0)*cj2*sj4*x2629))+(((-1.0)*x2629*x2630))+(((-1.0)*cj4*x2633))+(((-1.0)*x2626*x2634))+(((-1.0)*x2627*x2632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2636=((1.0)*gconst40);
CheckValue<IkReal> x2637 = IKatan2WithCheck(IkReal((((gconst41*r10))+(((-1.0)*r11*x2636)))),IkReal(((((-1.0)*r01*x2636))+((gconst41*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2637.valid){
continue;
}
CheckValue<IkReal> x2638=IKPowWithIntegerCheck(IKsign((r22*(((((-1.0)*(gconst41*gconst41)))+(((-1.0)*gconst40*x2636)))))),-1);
if(!x2638.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2637.value)+(((1.5707963267949)*(x2638.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2639=IKsin(j0);
IkReal x2640=IKcos(j0);
IkReal x2641=(gconst41*r11);
IkReal x2642=(gconst40*r10);
IkReal x2643=(gconst40*r00);
IkReal x2644=(gconst41*r00);
IkReal x2645=(gconst41*r10);
IkReal x2646=(gconst41*r01);
IkReal x2647=((1.0)*cj3);
IkReal x2648=(cj4*sj2);
IkReal x2649=(sj2*sj4);
IkReal x2650=((1.0)*x2639);
IkReal x2651=((1.0)*cj2*sj3);
IkReal x2652=((1.0)*x2640);
IkReal x2653=(gconst40*x2639);
evalcond[0]=(((r12*x2640))+(((-1.0)*r02*x2650)));
evalcond[1]=((((-1.0)*x2644*x2650))+((r01*x2653))+(((-1.0)*gconst40*r11*x2652))+((x2640*x2645)));
evalcond[2]=((1.0)+(((-1.0)*x2646*x2650))+(((-1.0)*x2643*x2650))+((x2640*x2641))+((x2640*x2642)));
evalcond[3]=((((-1.0)*x2646*x2652))+(((-1.0)*x2641*x2650))+(((-1.0)*x2642*x2650))+(((-1.0)*x2643*x2652)));
evalcond[4]=((((-1.0)*sj3*x2648))+(((-1.0)*r12*x2650))+(((-1.0)*x2647*x2649))+(((-1.0)*r02*x2652))+((cj2*cj3*cj4))+(((-1.0)*sj4*x2651)));
evalcond[5]=(((r11*x2653))+((gconst40*r01*x2640))+(((-1.0)*x2644*x2652))+(((-1.0)*x2645*x2650))+(((-1.0)*x2647*x2648))+(((-1.0)*cj2*sj4*x2647))+(((-1.0)*cj4*x2651))+((sj3*x2649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2654 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2654.valid){
continue;
}
CheckValue<IkReal> x2655=IKPowWithIntegerCheck(IKsign((((gconst41*r20))+(((-1.0)*gconst40*r21)))),-1);
if(!x2655.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2654.value)+(((1.5707963267949)*(x2655.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2656=IKsin(j0);
IkReal x2657=IKcos(j0);
IkReal x2658=(gconst41*r11);
IkReal x2659=(gconst40*r10);
IkReal x2660=(gconst40*r00);
IkReal x2661=(gconst41*r00);
IkReal x2662=(gconst41*r10);
IkReal x2663=(gconst41*r01);
IkReal x2664=((1.0)*cj3);
IkReal x2665=(cj4*sj2);
IkReal x2666=(sj2*sj4);
IkReal x2667=((1.0)*x2656);
IkReal x2668=((1.0)*cj2*sj3);
IkReal x2669=((1.0)*x2657);
IkReal x2670=(gconst40*x2656);
evalcond[0]=(((r12*x2657))+(((-1.0)*r02*x2667)));
evalcond[1]=(((x2657*x2662))+((r01*x2670))+(((-1.0)*gconst40*r11*x2669))+(((-1.0)*x2661*x2667)));
evalcond[2]=((1.0)+(((-1.0)*x2660*x2667))+((x2657*x2658))+((x2657*x2659))+(((-1.0)*x2663*x2667)));
evalcond[3]=((((-1.0)*x2660*x2669))+(((-1.0)*x2663*x2669))+(((-1.0)*x2659*x2667))+(((-1.0)*x2658*x2667)));
evalcond[4]=((((-1.0)*r12*x2667))+(((-1.0)*sj3*x2665))+((cj2*cj3*cj4))+(((-1.0)*r02*x2669))+(((-1.0)*x2664*x2666))+(((-1.0)*sj4*x2668)));
evalcond[5]=(((gconst40*r01*x2657))+(((-1.0)*x2662*x2667))+(((-1.0)*x2664*x2665))+(((-1.0)*cj4*x2668))+((sj3*x2666))+(((-1.0)*cj2*sj4*x2664))+(((-1.0)*x2661*x2669))+((r11*x2670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2671=(cj3*sj2);
IkReal x2672=(cj2*sj3);
IkReal x2673=(cj4*px);
IkReal x2674=(cj2*cj3);
IkReal x2675=(cj4*py);
IkReal x2676=((1.0)*px*sj4);
IkReal x2677=((1.0)*py*sj4);
IkReal x2678=((1.0)*sj2*sj3);
CheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal(((((-1.0)*x2675*x2678))+(((-1.0)*x2672*x2677))+(((-1.0)*x2671*x2677))+((x2674*x2675)))),IkReal((((x2673*x2674))+(((-1.0)*x2673*x2678))+(((-1.0)*x2672*x2676))+(((-1.0)*x2671*x2676)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
CheckValue<IkReal> x2680=IKPowWithIntegerCheck(IKsign(((((-1.0)*pz*r22))+npz)),-1);
if(!x2680.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2679.value)+(((1.5707963267949)*(x2680.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2681=IKcos(j0);
IkReal x2682=IKsin(j0);
IkReal x2683=(gconst41*r11);
IkReal x2684=(gconst40*r10);
IkReal x2685=((0.14203)*sj2);
IkReal x2686=(gconst40*r00);
IkReal x2687=(gconst41*r00);
IkReal x2688=(gconst41*r10);
IkReal x2689=(gconst41*r01);
IkReal x2690=((1.0)*cj3);
IkReal x2691=(cj4*sj2);
IkReal x2692=(sj2*sj4);
IkReal x2693=(cj2*cj3);
IkReal x2694=((1.0)*x2682);
IkReal x2695=((1.0)*x2681);
IkReal x2696=((1.0)*cj2*sj3);
IkReal x2697=(gconst40*x2682);
evalcond[0]=((((-1.0)*r02*x2694))+((r12*x2681)));
evalcond[1]=(((py*x2681))+(((-1.0)*px*x2694)));
evalcond[2]=((((-1.0)*gconst40*r11*x2695))+((r01*x2697))+((x2681*x2688))+(((-1.0)*x2687*x2694)));
evalcond[3]=((1.0)+(((-1.0)*x2689*x2694))+(((-1.0)*x2686*x2694))+((x2681*x2684))+((x2681*x2683)));
evalcond[4]=((((-1.0)*x2683*x2694))+(((-1.0)*x2684*x2694))+(((-1.0)*x2689*x2695))+(((-1.0)*x2686*x2695)));
evalcond[5]=((((-1.0)*sj3*x2691))+(((-1.0)*r02*x2695))+((cj4*x2693))+(((-1.0)*sj4*x2696))+(((-1.0)*r12*x2694))+(((-1.0)*x2690*x2692)));
evalcond[6]=((0.11430032722332)+(((-1.0)*sj3*x2685))+(((-1.0)*py*x2694))+(((0.14203)*x2693))+(((2.0e-7)*cj3*sj2))+(((-1.0)*px*x2695))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2))+x2685);
evalcond[7]=(((gconst40*r01*x2681))+(((-1.0)*x2688*x2694))+((sj3*x2692))+(((-1.0)*cj2*sj4*x2690))+(((-1.0)*x2687*x2695))+(((-1.0)*cj4*x2696))+(((-1.0)*x2690*x2691))+((r11*x2697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2698 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2698.valid){
continue;
}
CheckValue<IkReal> x2699=IKPowWithIntegerCheck(IKsign((((gconst41*r20))+(((-1.0)*gconst40*r21)))),-1);
if(!x2699.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2698.value)+(((1.5707963267949)*(x2699.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2700=IKcos(j0);
IkReal x2701=IKsin(j0);
IkReal x2702=(gconst41*r11);
IkReal x2703=(gconst40*r10);
IkReal x2704=((0.14203)*sj2);
IkReal x2705=(gconst40*r00);
IkReal x2706=(gconst41*r00);
IkReal x2707=(gconst41*r10);
IkReal x2708=(gconst41*r01);
IkReal x2709=((1.0)*cj3);
IkReal x2710=(cj4*sj2);
IkReal x2711=(sj2*sj4);
IkReal x2712=(cj2*cj3);
IkReal x2713=((1.0)*x2701);
IkReal x2714=((1.0)*x2700);
IkReal x2715=((1.0)*cj2*sj3);
IkReal x2716=(gconst40*x2701);
evalcond[0]=(((r12*x2700))+(((-1.0)*r02*x2713)));
evalcond[1]=((((-1.0)*px*x2713))+((py*x2700)));
evalcond[2]=((((-1.0)*gconst40*r11*x2714))+((x2700*x2707))+(((-1.0)*x2706*x2713))+((r01*x2716)));
evalcond[3]=((1.0)+(((-1.0)*x2708*x2713))+((x2700*x2702))+((x2700*x2703))+(((-1.0)*x2705*x2713)));
evalcond[4]=((((-1.0)*x2708*x2714))+(((-1.0)*x2703*x2713))+(((-1.0)*x2702*x2713))+(((-1.0)*x2705*x2714)));
evalcond[5]=((((-1.0)*sj4*x2715))+(((-1.0)*r02*x2714))+(((-1.0)*sj3*x2710))+(((-1.0)*x2709*x2711))+((cj4*x2712))+(((-1.0)*r12*x2713)));
evalcond[6]=((0.11430032722332)+x2704+(((0.14203)*x2712))+(((-1.0)*px*x2714))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((-1.0)*sj3*x2704))+(((0.04825)*cj2))+(((-1.0)*py*x2713)));
evalcond[7]=(((gconst40*r01*x2700))+((sj3*x2711))+(((-1.0)*cj4*x2715))+(((-1.0)*x2709*x2710))+(((-1.0)*x2706*x2714))+(((-1.0)*cj2*sj4*x2709))+((r11*x2716))+(((-1.0)*x2707*x2713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
CheckValue<IkReal> x2718=IKPowWithIntegerCheck(IKsign((((gconst41*rxp1_2))+((gconst40*rxp0_2)))),-1);
if(!x2718.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2717.value)+(((1.5707963267949)*(x2718.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2719=IKcos(j0);
IkReal x2720=IKsin(j0);
IkReal x2721=(gconst41*r11);
IkReal x2722=(gconst40*r10);
IkReal x2723=((0.14203)*sj2);
IkReal x2724=(gconst40*r00);
IkReal x2725=(gconst41*r00);
IkReal x2726=(gconst41*r10);
IkReal x2727=(gconst41*r01);
IkReal x2728=((1.0)*cj3);
IkReal x2729=(cj4*sj2);
IkReal x2730=(sj2*sj4);
IkReal x2731=(cj2*cj3);
IkReal x2732=((1.0)*x2720);
IkReal x2733=((1.0)*x2719);
IkReal x2734=((1.0)*cj2*sj3);
IkReal x2735=(gconst40*x2720);
evalcond[0]=(((r12*x2719))+(((-1.0)*r02*x2732)));
evalcond[1]=(((py*x2719))+(((-1.0)*px*x2732)));
evalcond[2]=((((-1.0)*x2725*x2732))+((r01*x2735))+(((-1.0)*gconst40*r11*x2733))+((x2719*x2726)));
evalcond[3]=((1.0)+(((-1.0)*x2727*x2732))+(((-1.0)*x2724*x2732))+((x2719*x2721))+((x2719*x2722)));
evalcond[4]=((((-1.0)*x2727*x2733))+(((-1.0)*x2724*x2733))+(((-1.0)*x2721*x2732))+(((-1.0)*x2722*x2732)));
evalcond[5]=(((cj4*x2731))+(((-1.0)*x2728*x2730))+(((-1.0)*sj3*x2729))+(((-1.0)*r02*x2733))+(((-1.0)*r12*x2732))+(((-1.0)*sj4*x2734)));
evalcond[6]=((0.11430032722332)+x2723+(((-1.0)*py*x2732))+(((0.14203)*x2731))+(((-1.0)*px*x2733))+(((2.0e-7)*cj3*sj2))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2))+(((-1.0)*sj3*x2723)));
evalcond[7]=((((-1.0)*x2726*x2732))+((gconst40*r01*x2719))+((sj3*x2730))+(((-1.0)*x2725*x2733))+(((-1.0)*x2728*x2729))+(((-1.0)*cj2*sj4*x2728))+(((-1.0)*cj4*x2734))+((r11*x2735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2737 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x2737)==0){
continue;
}
IkReal x2736=pow(x2737,-0.5);
CheckValue<IkReal> x2738 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2738.valid){
continue;
}
IkReal gconst42=((-1.0)*(x2738.value));
IkReal gconst43=((-1.0)*rxp1_2*x2736);
IkReal gconst44=(rxp0_2*x2736);
CheckValue<IkReal> x2739 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2739.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2739.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2741 = ((rxp1_2*rxp1_2)+(rxp0_2*rxp0_2));
if(IKabs(x2741)==0){
continue;
}
IkReal x2740=pow(x2741,-0.5);
CheckValue<IkReal> x2742 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2742.valid){
continue;
}
IkReal gconst45=((3.14159265358979)+(((-1.0)*(x2742.value))));
IkReal gconst46=((1.0)*rxp1_2*x2740);
IkReal gconst47=((-1.0)*rxp0_2*x2740);
CheckValue<IkReal> x2743 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2743.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2743.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
CheckValue<IkReal> x2746 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2746.valid){
continue;
}
IkReal x2744=((1.0)*(x2746.value));
IkReal x2745=x2740;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst46;
cj5=gconst47;
j5=((3.14159265)+(((-1.0)*x2744)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x2744)));
IkReal gconst46=((1.0)*rxp1_2*x2745);
IkReal gconst47=((-1.0)*rxp0_2*x2745);
j0eval[0]=0;
j0eval[1]=0;
j0eval[2]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
CheckValue<IkReal> x2749 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2749.valid){
continue;
}
IkReal x2747=((1.0)*(x2749.value));
IkReal x2748=x2740;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst46;
cj5=gconst47;
j5=((3.14159265)+(((-1.0)*x2747)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x2747)));
IkReal gconst46=((1.0)*rxp1_2*x2748);
IkReal gconst47=((-1.0)*rxp0_2*x2748);
j0eval[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
CheckValue<IkReal> x2752 = IKatan2WithCheck(IkReal(rxp1_2),IkReal(rxp0_2),IKFAST_ATAN2_MAGTHRESH);
if(!x2752.valid){
continue;
}
IkReal x2750=((1.0)*(x2752.value));
IkReal x2751=x2740;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
sj5=gconst46;
cj5=gconst47;
j5=((3.14159265)+(((-1.0)*x2750)));
IkReal gconst45=((3.14159265358979)+(((-1.0)*x2750)));
IkReal gconst46=((1.0)*rxp1_2*x2751);
IkReal gconst47=((-1.0)*rxp0_2*x2751);
IkReal x2753=(cj4*sj2);
IkReal x2754=(cj2*sj4);
IkReal x2755=((1.0)*py);
IkReal x2756=((((-1.0)*pz*r22))+npz);
IkReal x2757=((1.0)*px*sj3);
IkReal x2758=(cj3*sj2*sj4);
IkReal x2759=(cj2*cj3*cj4);
j0eval[0]=x2756;
j0eval[1]=IKsign(x2756);
j0eval[2]=((IKabs(((((-1.0)*sj3*x2754*x2755))+(((-1.0)*sj3*x2753*x2755))+(((-1.0)*x2755*x2758))+((py*x2759)))))+(IKabs(((((-1.0)*px*x2758))+(((-1.0)*x2753*x2757))+(((-1.0)*x2754*x2757))+((px*x2759))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2760=(cj3*sj2);
IkReal x2761=(cj2*sj3);
IkReal x2762=(cj4*px);
IkReal x2763=(cj2*cj3);
IkReal x2764=(cj4*py);
IkReal x2765=((1.0)*px*sj4);
IkReal x2766=((1.0)*py*sj4);
IkReal x2767=((1.0)*sj2*sj3);
CheckValue<IkReal> x2768=IKPowWithIntegerCheck(IKsign(((((-1.0)*pz*r22))+npz)),-1);
if(!x2768.valid){
continue;
}
CheckValue<IkReal> x2769 = IKatan2WithCheck(IkReal(((((-1.0)*x2764*x2767))+(((-1.0)*x2761*x2766))+(((-1.0)*x2760*x2766))+((x2763*x2764)))),IkReal(((((-1.0)*x2761*x2765))+((x2762*x2763))+(((-1.0)*x2760*x2765))+(((-1.0)*x2762*x2767)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2769.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2768.value)))+(x2769.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2770=IKcos(j0);
IkReal x2771=IKsin(j0);
IkReal x2772=((1.0)*px);
IkReal x2773=(gconst47*r11);
IkReal x2774=((0.14203)*sj2);
IkReal x2775=((1.0)*cj4);
IkReal x2776=(cj2*sj3);
IkReal x2777=(gconst46*r11);
IkReal x2778=(cj3*sj2);
IkReal x2779=((1.0)*sj4);
IkReal x2780=(gconst47*r10);
IkReal x2781=((1.0)*r00);
IkReal x2782=(sj2*sj3);
IkReal x2783=(cj2*cj3);
IkReal x2784=((1.0)*x2771);
IkReal x2785=(gconst46*x2770);
IkReal x2786=(gconst47*x2770);
IkReal x2787=((1.0)*x2770);
evalcond[0]=((((-1.0)*r02*x2784))+((r12*x2770)));
evalcond[1]=((((-1.0)*x2771*x2772))+((py*x2770)));
evalcond[2]=(((x2770*x2780))+(((-1.0)*gconst47*x2771*x2781))+(((-1.0)*x2777*x2787))+((gconst46*r01*x2771)));
evalcond[3]=((1.0)+((x2770*x2773))+(((-1.0)*gconst47*r01*x2784))+(((-1.0)*gconst46*x2771*x2781))+((r10*x2785)));
evalcond[4]=((((-1.0)*x2781*x2785))+(((-1.0)*gconst46*r10*x2784))+(((-1.0)*x2773*x2784))+(((-1.0)*r01*x2786)));
evalcond[5]=((((-1.0)*r12*x2784))+(((-1.0)*x2776*x2779))+(((-1.0)*x2778*x2779))+((cj4*x2783))+(((-1.0)*r02*x2787))+(((-1.0)*x2775*x2782)));
evalcond[6]=((0.11430032722332)+x2774+(((-1.0)*x2770*x2772))+(((2.0e-7)*x2776))+(((2.0e-7)*x2778))+(((-1.0)*sj3*x2774))+(((0.14203)*x2783))+(((-1.0)*py*x2784))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x2781*x2786))+((x2771*x2777))+(((-1.0)*x2780*x2784))+(((-1.0)*x2775*x2778))+(((-1.0)*x2775*x2776))+((r01*x2785))+(((-1.0)*x2779*x2783))+((sj4*x2782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2788=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst46*r21))+((gconst47*r20)))),-1);
if(!x2788.valid){
continue;
}
CheckValue<IkReal> x2789 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2789.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2788.value)))+(x2789.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2790=IKcos(j0);
IkReal x2791=IKsin(j0);
IkReal x2792=((1.0)*px);
IkReal x2793=(gconst47*r11);
IkReal x2794=((0.14203)*sj2);
IkReal x2795=((1.0)*cj4);
IkReal x2796=(cj2*sj3);
IkReal x2797=(gconst46*r11);
IkReal x2798=(cj3*sj2);
IkReal x2799=((1.0)*sj4);
IkReal x2800=(gconst47*r10);
IkReal x2801=((1.0)*r00);
IkReal x2802=(sj2*sj3);
IkReal x2803=(cj2*cj3);
IkReal x2804=((1.0)*x2791);
IkReal x2805=(gconst46*x2790);
IkReal x2806=(gconst47*x2790);
IkReal x2807=((1.0)*x2790);
evalcond[0]=(((r12*x2790))+(((-1.0)*r02*x2804)));
evalcond[1]=((((-1.0)*x2791*x2792))+((py*x2790)));
evalcond[2]=(((x2790*x2800))+((gconst46*r01*x2791))+(((-1.0)*x2797*x2807))+(((-1.0)*gconst47*x2791*x2801)));
evalcond[3]=((1.0)+((r10*x2805))+(((-1.0)*gconst46*x2791*x2801))+(((-1.0)*gconst47*r01*x2804))+((x2790*x2793)));
evalcond[4]=((((-1.0)*gconst46*r10*x2804))+(((-1.0)*r01*x2806))+(((-1.0)*x2793*x2804))+(((-1.0)*x2801*x2805)));
evalcond[5]=((((-1.0)*x2796*x2799))+((cj4*x2803))+(((-1.0)*x2798*x2799))+(((-1.0)*r12*x2804))+(((-1.0)*x2795*x2802))+(((-1.0)*r02*x2807)));
evalcond[6]=((0.11430032722332)+x2794+(((-1.0)*x2790*x2792))+(((-1.0)*sj3*x2794))+(((2.0e-7)*x2796))+(((2.0e-7)*x2798))+(((-1.0)*py*x2804))+(((0.14203)*x2803))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x2795*x2796))+(((-1.0)*x2795*x2798))+((sj4*x2802))+(((-1.0)*x2800*x2804))+((x2791*x2797))+(((-1.0)*x2799*x2803))+((r01*x2805))+(((-1.0)*x2801*x2806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2808 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x2808.valid){
continue;
}
CheckValue<IkReal> x2809=IKPowWithIntegerCheck(IKsign((((gconst46*rxp0_2))+((gconst47*rxp1_2)))),-1);
if(!x2809.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2808.value)+(((1.5707963267949)*(x2809.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2810=IKcos(j0);
IkReal x2811=IKsin(j0);
IkReal x2812=((1.0)*px);
IkReal x2813=(gconst47*r11);
IkReal x2814=((0.14203)*sj2);
IkReal x2815=((1.0)*cj4);
IkReal x2816=(cj2*sj3);
IkReal x2817=(gconst46*r11);
IkReal x2818=(cj3*sj2);
IkReal x2819=((1.0)*sj4);
IkReal x2820=(gconst47*r10);
IkReal x2821=((1.0)*r00);
IkReal x2822=(sj2*sj3);
IkReal x2823=(cj2*cj3);
IkReal x2824=((1.0)*x2811);
IkReal x2825=(gconst46*x2810);
IkReal x2826=(gconst47*x2810);
IkReal x2827=((1.0)*x2810);
evalcond[0]=((((-1.0)*r02*x2824))+((r12*x2810)));
evalcond[1]=(((py*x2810))+(((-1.0)*x2811*x2812)));
evalcond[2]=((((-1.0)*x2817*x2827))+(((-1.0)*gconst47*x2811*x2821))+((x2810*x2820))+((gconst46*r01*x2811)));
evalcond[3]=((1.0)+((x2810*x2813))+((r10*x2825))+(((-1.0)*gconst47*r01*x2824))+(((-1.0)*gconst46*x2811*x2821)));
evalcond[4]=((((-1.0)*x2821*x2825))+(((-1.0)*r01*x2826))+(((-1.0)*gconst46*r10*x2824))+(((-1.0)*x2813*x2824)));
evalcond[5]=((((-1.0)*r12*x2824))+(((-1.0)*r02*x2827))+(((-1.0)*x2818*x2819))+((cj4*x2823))+(((-1.0)*x2816*x2819))+(((-1.0)*x2815*x2822)));
evalcond[6]=((0.11430032722332)+(((-1.0)*x2810*x2812))+(((2.0e-7)*x2818))+(((2.0e-7)*x2816))+(((-1.0)*py*x2824))+(((-1.0)*sj3*x2814))+(((0.14203)*x2823))+x2814+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x2820*x2824))+(((-1.0)*x2821*x2826))+(((-1.0)*x2815*x2818))+(((-1.0)*x2815*x2816))+((r01*x2825))+((sj4*x2822))+(((-1.0)*x2819*x2823))+((x2811*x2817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
IkReal x2828=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2828);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2828);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2828);
rxp2_2=0;
IkReal x2829=(((cj5*r20))+(((-1.0)*r21*sj5)));
j0eval[0]=x2829;
j0eval[1]=((IKabs(r02))+(IKabs(r12)));
j0eval[2]=IKsign(x2829);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2830=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2830);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2830);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2830);
rxp2_2=0;
IkReal x2831=((1.0)*sj5);
j0eval[0]=r22;
j0eval[1]=IKsign(r22);
j0eval[2]=((IKabs(((((-1.0)*r01*x2831))+((cj5*r00)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*x2831))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
IkReal x2832=((-1.0)*pz);
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
px=0;
py=0;
pp=pz*pz;
npx=(pz*r20);
npy=(pz*r21);
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x2832);
rxp0_2=0;
rxp1_0=(pz*r11);
rxp1_1=(r01*x2832);
rxp1_2=0;
rxp2_0=(pz*r12);
rxp2_1=(r02*x2832);
rxp2_2=0;
IkReal x2833=cj5*cj5;
IkReal x2834=r20*r20;
IkReal x2835=((-1.0)+(((2.0)*cj5*r20*r21*sj5))+(((-1.0)*x2833*x2834))+((x2833*(r21*r21)))+x2834);
j0eval[0]=x2835;
j0eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x2835);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2836=(cj4*r12);
IkReal x2837=((1.0)*sj3);
IkReal x2838=(cj2*cj3);
IkReal x2839=(r02*sj4);
IkReal x2840=(cj4*r02);
IkReal x2841=(r12*sj4);
IkReal x2842=((1.0)*cj3*sj2);
if( IKabs((((x2836*x2838))+(((-1.0)*sj2*x2836*x2837))+(((-1.0)*x2841*x2842))+(((-1.0)*cj2*x2837*x2841)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x2837*x2840))+(((-1.0)*cj2*x2837*x2839))+((x2838*x2840))+(((-1.0)*x2839*x2842)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2836*x2838))+(((-1.0)*sj2*x2836*x2837))+(((-1.0)*x2841*x2842))+(((-1.0)*cj2*x2837*x2841))))+IKsqr(((((-1.0)*sj2*x2837*x2840))+(((-1.0)*cj2*x2837*x2839))+((x2838*x2840))+(((-1.0)*x2839*x2842))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x2836*x2838))+(((-1.0)*sj2*x2836*x2837))+(((-1.0)*x2841*x2842))+(((-1.0)*cj2*x2837*x2841))), ((((-1.0)*sj2*x2837*x2840))+(((-1.0)*cj2*x2837*x2839))+((x2838*x2840))+(((-1.0)*x2839*x2842))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2843=IKcos(j0);
IkReal x2844=IKsin(j0);
IkReal x2845=((1.0)*cj5);
IkReal x2846=(r10*sj5);
IkReal x2847=((1.0)*sj5);
IkReal x2848=(cj2*cj3);
IkReal x2849=((1.0)*sj4);
IkReal x2850=(cj3*sj2);
IkReal x2851=((1.0)*cj4);
IkReal x2852=(sj2*sj3);
IkReal x2853=((1.0)*cj2*sj3);
IkReal x2854=(r01*x2844);
IkReal x2855=(r00*x2843);
IkReal x2856=((1.0)*x2844);
IkReal x2857=(cj5*x2843);
IkReal x2858=(r01*x2843);
IkReal x2859=(r11*x2844);
evalcond[0]=(((r12*x2843))+(((-1.0)*r02*x2856)));
evalcond[1]=((((-1.0)*r11*x2843*x2847))+(((-1.0)*r00*x2844*x2845))+((sj5*x2854))+((r10*x2857)));
evalcond[2]=((1.0)+(((-1.0)*x2845*x2854))+((r11*x2857))+(((-1.0)*r00*x2844*x2847))+((x2843*x2846)));
evalcond[3]=((((-1.0)*x2845*x2859))+(((-1.0)*x2845*x2858))+(((-1.0)*x2847*x2855))+(((-1.0)*x2846*x2856)));
evalcond[4]=((((-1.0)*cj2*sj3*x2849))+(((-1.0)*r02*x2843))+(((-1.0)*r12*x2856))+(((-1.0)*x2851*x2852))+(((-1.0)*x2849*x2850))+((cj4*x2848)));
evalcond[5]=((((-1.0)*x2845*x2855))+(((-1.0)*x2850*x2851))+((sj5*x2859))+((sj5*x2858))+(((-1.0)*x2848*x2849))+(((-1.0)*r10*x2844*x2845))+(((-1.0)*cj2*sj3*x2851))+((sj4*x2852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2860=IKcos(j0);
IkReal x2861=IKsin(j0);
IkReal x2862=((1.0)*cj2);
IkReal x2863=((1.0)*sj5);
IkReal x2864=(cj5*x2860);
IkReal x2865=(sj5*x2860);
IkReal x2866=(sj5*x2861);
IkReal x2867=((1.0)*cj5*x2861);
evalcond[0]=(((r10*x2864))+(((-1.0)*r00*x2867))+(((-1.0)*r11*x2860*x2863))+((r01*x2866)));
evalcond[1]=((1.0)+((r10*x2865))+(((-1.0)*r00*x2861*x2863))+(((-1.0)*r01*x2867))+((r11*x2864)));
evalcond[2]=((((-1.0)*r10*x2861*x2863))+(((-1.0)*r01*x2864))+(((-1.0)*r00*x2860*x2863))+(((-1.0)*r11*x2867)));
evalcond[3]=((((-1.0)*r00*x2864))+((sj2*sj3*sj4))+(((-1.0)*cj3*cj4*sj2))+((r11*x2866))+(((-1.0)*cj4*sj3*x2862))+(((-1.0)*cj3*sj4*x2862))+(((-1.0)*r10*x2867))+((r01*x2865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj5))+((cj5*r01))))+IKsqr(((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj5))+((cj5*r01))), ((((-1.0)*cj5*r11))+(((-1.0)*r10*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2868=IKcos(j0);
IkReal x2869=IKsin(j0);
IkReal x2870=((1.0)*cj2);
IkReal x2871=((1.0)*sj5);
IkReal x2872=(cj5*x2868);
IkReal x2873=(sj5*x2868);
IkReal x2874=(sj5*x2869);
IkReal x2875=((1.0)*cj5*x2869);
evalcond[0]=(((r01*x2874))+(((-1.0)*r11*x2868*x2871))+((r10*x2872))+(((-1.0)*r00*x2875)));
evalcond[1]=((1.0)+((r10*x2873))+((r11*x2872))+(((-1.0)*r00*x2869*x2871))+(((-1.0)*r01*x2875)));
evalcond[2]=((((-1.0)*r01*x2872))+(((-1.0)*r10*x2869*x2871))+(((-1.0)*r11*x2875))+(((-1.0)*r00*x2868*x2871)));
evalcond[3]=((((-1.0)*r10*x2875))+((r01*x2873))+(((-1.0)*r00*x2872))+((r11*x2874))+((sj2*sj3*sj4))+(((-1.0)*cj3*sj4*x2870))+(((-1.0)*cj4*sj3*x2870))+(((-1.0)*cj3*cj4*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2876=cj5*cj5;
CheckValue<IkReal> x2877=IKPowWithIntegerCheck(IKsign(((-1.0)+(((2.0)*cj5*r20*r21*sj5))+((x2876*(r21*r21)))+(((r20*r20)*(((1.0)+(((-1.0)*x2876)))))))),-1);
if(!x2877.valid){
continue;
}
CheckValue<IkReal> x2878 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IkReal((((cj5*r11))+((r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2878.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2877.value)))+(x2878.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2879=IKcos(j0);
IkReal x2880=IKsin(j0);
IkReal x2881=((1.0)*cj5);
IkReal x2882=(r10*sj5);
IkReal x2883=((1.0)*sj5);
IkReal x2884=(cj2*cj3);
IkReal x2885=((1.0)*sj4);
IkReal x2886=(cj3*sj2);
IkReal x2887=((1.0)*cj4);
IkReal x2888=(sj2*sj3);
IkReal x2889=((1.0)*cj2*sj3);
IkReal x2890=(r01*x2880);
IkReal x2891=(r00*x2879);
IkReal x2892=((1.0)*x2880);
IkReal x2893=(cj5*x2879);
IkReal x2894=(r01*x2879);
IkReal x2895=(r11*x2880);
evalcond[0]=((((-1.0)*r02*x2892))+((r12*x2879)));
evalcond[1]=(((sj5*x2890))+((r10*x2893))+(((-1.0)*r00*x2880*x2881))+(((-1.0)*r11*x2879*x2883)));
evalcond[2]=((1.0)+((x2879*x2882))+((r11*x2893))+(((-1.0)*r00*x2880*x2883))+(((-1.0)*x2881*x2890)));
evalcond[3]=((((-1.0)*x2883*x2891))+(((-1.0)*x2882*x2892))+(((-1.0)*x2881*x2894))+(((-1.0)*x2881*x2895)));
evalcond[4]=((((-1.0)*x2887*x2888))+(((-1.0)*cj2*sj3*x2885))+(((-1.0)*x2885*x2886))+(((-1.0)*r02*x2879))+((cj4*x2884))+(((-1.0)*r12*x2892)));
evalcond[5]=(((sj5*x2894))+((sj5*x2895))+(((-1.0)*cj2*sj3*x2887))+(((-1.0)*r10*x2880*x2881))+((sj4*x2888))+(((-1.0)*x2884*x2885))+(((-1.0)*x2886*x2887))+(((-1.0)*x2881*x2891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2896=((1.0)*sj5);
CheckValue<IkReal> x2897 = IKatan2WithCheck(IkReal((((cj5*r10))+(((-1.0)*r11*x2896)))),IkReal(((((-1.0)*r01*x2896))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2897.valid){
continue;
}
CheckValue<IkReal> x2898=IKPowWithIntegerCheck(IKsign(r22),-1);
if(!x2898.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2897.value)+(((-1.5707963267949)*(x2898.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2899=IKcos(j0);
IkReal x2900=IKsin(j0);
IkReal x2901=((1.0)*cj5);
IkReal x2902=(r10*sj5);
IkReal x2903=((1.0)*sj5);
IkReal x2904=(cj2*cj3);
IkReal x2905=((1.0)*sj4);
IkReal x2906=(cj3*sj2);
IkReal x2907=((1.0)*cj4);
IkReal x2908=(sj2*sj3);
IkReal x2909=((1.0)*cj2*sj3);
IkReal x2910=(r01*x2900);
IkReal x2911=(r00*x2899);
IkReal x2912=((1.0)*x2900);
IkReal x2913=(cj5*x2899);
IkReal x2914=(r01*x2899);
IkReal x2915=(r11*x2900);
evalcond[0]=(((r12*x2899))+(((-1.0)*r02*x2912)));
evalcond[1]=(((sj5*x2910))+(((-1.0)*r00*x2900*x2901))+(((-1.0)*r11*x2899*x2903))+((r10*x2913)));
evalcond[2]=((1.0)+((r11*x2913))+((x2899*x2902))+(((-1.0)*r00*x2900*x2903))+(((-1.0)*x2901*x2910)));
evalcond[3]=((((-1.0)*x2901*x2914))+(((-1.0)*x2901*x2915))+(((-1.0)*x2902*x2912))+(((-1.0)*x2903*x2911)));
evalcond[4]=((((-1.0)*x2905*x2906))+(((-1.0)*r12*x2912))+(((-1.0)*x2907*x2908))+((cj4*x2904))+(((-1.0)*cj2*sj3*x2905))+(((-1.0)*r02*x2899)));
evalcond[5]=((((-1.0)*x2906*x2907))+((sj5*x2915))+((sj5*x2914))+(((-1.0)*x2904*x2905))+(((-1.0)*r10*x2900*x2901))+(((-1.0)*cj2*sj3*x2907))+(((-1.0)*x2901*x2911))+((sj4*x2908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2916 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2916.valid){
continue;
}
CheckValue<IkReal> x2917=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2917.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2916.value)+(((1.5707963267949)*(x2917.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x2918=IKcos(j0);
IkReal x2919=IKsin(j0);
IkReal x2920=((1.0)*cj5);
IkReal x2921=(r10*sj5);
IkReal x2922=((1.0)*sj5);
IkReal x2923=(cj2*cj3);
IkReal x2924=((1.0)*sj4);
IkReal x2925=(cj3*sj2);
IkReal x2926=((1.0)*cj4);
IkReal x2927=(sj2*sj3);
IkReal x2928=((1.0)*cj2*sj3);
IkReal x2929=(r01*x2919);
IkReal x2930=(r00*x2918);
IkReal x2931=((1.0)*x2919);
IkReal x2932=(cj5*x2918);
IkReal x2933=(r01*x2918);
IkReal x2934=(r11*x2919);
evalcond[0]=(((r12*x2918))+(((-1.0)*r02*x2931)));
evalcond[1]=(((r10*x2932))+(((-1.0)*r11*x2918*x2922))+(((-1.0)*r00*x2919*x2920))+((sj5*x2929)));
evalcond[2]=((1.0)+(((-1.0)*x2920*x2929))+(((-1.0)*r00*x2919*x2922))+((x2918*x2921))+((r11*x2932)));
evalcond[3]=((((-1.0)*x2921*x2931))+(((-1.0)*x2920*x2933))+(((-1.0)*x2920*x2934))+(((-1.0)*x2922*x2930)));
evalcond[4]=(((cj4*x2923))+(((-1.0)*r02*x2918))+(((-1.0)*x2924*x2925))+(((-1.0)*cj2*sj3*x2924))+(((-1.0)*x2926*x2927))+(((-1.0)*r12*x2931)));
evalcond[5]=((((-1.0)*r10*x2919*x2920))+(((-1.0)*x2923*x2924))+((sj5*x2934))+((sj5*x2933))+(((-1.0)*x2920*x2930))+(((-1.0)*x2925*x2926))+(((-1.0)*cj2*sj3*x2926))+((sj4*x2927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2935=(cj3*sj2);
IkReal x2936=(cj2*sj3);
IkReal x2937=(cj4*px);
IkReal x2938=(cj2*cj3);
IkReal x2939=(cj4*py);
IkReal x2940=((1.0)*px*sj4);
IkReal x2941=((1.0)*py*sj4);
IkReal x2942=((1.0)*sj2*sj3);
CheckValue<IkReal> x2943 = IKatan2WithCheck(IkReal(((((-1.0)*x2939*x2942))+(((-1.0)*x2936*x2941))+(((-1.0)*x2935*x2941))+((x2938*x2939)))),IkReal(((((-1.0)*x2936*x2940))+(((-1.0)*x2935*x2940))+((x2937*x2938))+(((-1.0)*x2937*x2942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2943.valid){
continue;
}
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(IKsign(((((-1.0)*pz*r22))+npz)),-1);
if(!x2944.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2943.value)+(((1.5707963267949)*(x2944.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2945=IKcos(j0);
IkReal x2946=IKsin(j0);
IkReal x2947=(cj5*r01);
IkReal x2948=(cj5*r00);
IkReal x2949=((0.14203)*sj2);
IkReal x2950=((1.0)*cj4);
IkReal x2951=(cj2*sj3);
IkReal x2952=(cj3*sj2);
IkReal x2953=((1.0)*sj4);
IkReal x2954=(r10*sj5);
IkReal x2955=(r11*sj5);
IkReal x2956=(cj2*cj3);
IkReal x2957=(r00*sj5);
IkReal x2958=(r01*sj5);
IkReal x2959=(sj2*sj3);
IkReal x2960=((1.0)*x2945);
IkReal x2961=((1.0)*x2946);
IkReal x2962=(cj5*x2945);
evalcond[0]=((((-1.0)*r02*x2961))+((r12*x2945)));
evalcond[1]=(((py*x2945))+(((-1.0)*px*x2961)));
evalcond[2]=(((x2946*x2958))+(((-1.0)*x2955*x2960))+(((-1.0)*x2948*x2961))+((r10*x2962)));
evalcond[3]=((1.0)+(((-1.0)*x2957*x2961))+((x2945*x2954))+((r11*x2962))+(((-1.0)*x2947*x2961)));
evalcond[4]=((((-1.0)*x2957*x2960))+(((-1.0)*x2954*x2961))+(((-1.0)*x2947*x2960))+(((-1.0)*cj5*r11*x2961)));
evalcond[5]=((((-1.0)*x2952*x2953))+(((-1.0)*r02*x2960))+((cj4*x2956))+(((-1.0)*x2951*x2953))+(((-1.0)*x2950*x2959))+(((-1.0)*r12*x2961)));
evalcond[6]=((0.11430032722332)+(((0.14203)*x2956))+(((2.0e-7)*x2952))+(((2.0e-7)*x2951))+(((-1.0)*py*x2961))+(((-1.0)*sj3*x2949))+x2949+(((-1.0)*px*x2960))+(((0.04825)*cj2)));
evalcond[7]=((((-1.0)*x2953*x2956))+((x2946*x2955))+((x2945*x2958))+(((-1.0)*x2948*x2960))+(((-1.0)*cj5*r10*x2961))+(((-1.0)*x2950*x2952))+(((-1.0)*x2950*x2951))+((sj4*x2959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2963 = IKatan2WithCheck(IkReal(r12),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2963.valid){
continue;
}
CheckValue<IkReal> x2964=IKPowWithIntegerCheck(IKsign((((cj5*r20))+(((-1.0)*r21*sj5)))),-1);
if(!x2964.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2963.value)+(((1.5707963267949)*(x2964.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2965=IKcos(j0);
IkReal x2966=IKsin(j0);
IkReal x2967=(cj5*r01);
IkReal x2968=(cj5*r00);
IkReal x2969=((0.14203)*sj2);
IkReal x2970=((1.0)*cj4);
IkReal x2971=(cj2*sj3);
IkReal x2972=(cj3*sj2);
IkReal x2973=((1.0)*sj4);
IkReal x2974=(r10*sj5);
IkReal x2975=(r11*sj5);
IkReal x2976=(cj2*cj3);
IkReal x2977=(r00*sj5);
IkReal x2978=(r01*sj5);
IkReal x2979=(sj2*sj3);
IkReal x2980=((1.0)*x2965);
IkReal x2981=((1.0)*x2966);
IkReal x2982=(cj5*x2965);
evalcond[0]=(((r12*x2965))+(((-1.0)*r02*x2981)));
evalcond[1]=(((py*x2965))+(((-1.0)*px*x2981)));
evalcond[2]=((((-1.0)*x2968*x2981))+((x2966*x2978))+(((-1.0)*x2975*x2980))+((r10*x2982)));
evalcond[3]=((1.0)+(((-1.0)*x2977*x2981))+((r11*x2982))+(((-1.0)*x2967*x2981))+((x2965*x2974)));
evalcond[4]=((((-1.0)*x2977*x2980))+(((-1.0)*cj5*r11*x2981))+(((-1.0)*x2974*x2981))+(((-1.0)*x2967*x2980)));
evalcond[5]=((((-1.0)*x2972*x2973))+(((-1.0)*r12*x2981))+((cj4*x2976))+(((-1.0)*r02*x2980))+(((-1.0)*x2971*x2973))+(((-1.0)*x2970*x2979)));
evalcond[6]=((0.11430032722332)+(((-1.0)*py*x2981))+(((-1.0)*sj3*x2969))+(((-1.0)*px*x2980))+(((0.14203)*x2976))+x2969+(((2.0e-7)*x2972))+(((2.0e-7)*x2971))+(((0.04825)*cj2)));
evalcond[7]=(((sj4*x2979))+(((-1.0)*x2968*x2980))+(((-1.0)*cj5*r10*x2981))+((x2966*x2975))+((x2965*x2978))+(((-1.0)*x2973*x2976))+(((-1.0)*x2970*x2971))+(((-1.0)*x2970*x2972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x2983 = IKatan2WithCheck(IkReal(py),IkReal(px),IKFAST_ATAN2_MAGTHRESH);
if(!x2983.valid){
continue;
}
CheckValue<IkReal> x2984=IKPowWithIntegerCheck(IKsign((((cj5*rxp1_2))+((rxp0_2*sj5)))),-1);
if(!x2984.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2983.value)+(((1.5707963267949)*(x2984.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2985=IKcos(j0);
IkReal x2986=IKsin(j0);
IkReal x2987=(cj5*r01);
IkReal x2988=(cj5*r00);
IkReal x2989=((0.14203)*sj2);
IkReal x2990=((1.0)*cj4);
IkReal x2991=(cj2*sj3);
IkReal x2992=(cj3*sj2);
IkReal x2993=((1.0)*sj4);
IkReal x2994=(r10*sj5);
IkReal x2995=(r11*sj5);
IkReal x2996=(cj2*cj3);
IkReal x2997=(r00*sj5);
IkReal x2998=(r01*sj5);
IkReal x2999=(sj2*sj3);
IkReal x3000=((1.0)*x2985);
IkReal x3001=((1.0)*x2986);
IkReal x3002=(cj5*x2985);
evalcond[0]=((((-1.0)*r02*x3001))+((r12*x2985)));
evalcond[1]=(((py*x2985))+(((-1.0)*px*x3001)));
evalcond[2]=(((x2986*x2998))+((r10*x3002))+(((-1.0)*x2995*x3000))+(((-1.0)*x2988*x3001)));
evalcond[3]=((1.0)+(((-1.0)*x2997*x3001))+((x2985*x2994))+(((-1.0)*x2987*x3001))+((r11*x3002)));
evalcond[4]=((((-1.0)*x2997*x3000))+(((-1.0)*x2994*x3001))+(((-1.0)*cj5*r11*x3001))+(((-1.0)*x2987*x3000)));
evalcond[5]=((((-1.0)*x2992*x2993))+(((-1.0)*r02*x3000))+(((-1.0)*r12*x3001))+(((-1.0)*x2991*x2993))+((cj4*x2996))+(((-1.0)*x2990*x2999)));
evalcond[6]=((0.11430032722332)+(((-1.0)*px*x3000))+(((2.0e-7)*x2992))+(((2.0e-7)*x2991))+(((0.14203)*x2996))+(((-1.0)*sj3*x2989))+x2989+(((-1.0)*py*x3001))+(((0.04825)*cj2)));
evalcond[7]=(((x2985*x2998))+(((-1.0)*cj5*r10*x3001))+((x2986*x2995))+(((-1.0)*x2988*x3000))+((sj4*x2999))+(((-1.0)*x2993*x2996))+(((-1.0)*x2990*x2992))+(((-1.0)*x2990*x2991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3003=(cj2*r22);
IkReal x3004=(r22*sj2);
if( IKabs((((cj3*x3003))+(((-1.0)*sj3*x3004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj3*x3003))+((cj3*x3004)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*x3003))+(((-1.0)*sj3*x3004))))+IKsqr((((sj3*x3003))+((cj3*x3004))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((cj3*x3003))+(((-1.0)*sj3*x3004))), (((sj3*x3003))+((cj3*x3004))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3005=IKcos(j4);
IkReal x3006=IKsin(j4);
IkReal x3007=((1.0)*sj2);
IkReal x3008=(cj2*x3005);
IkReal x3009=(cj3*x3006);
IkReal x3010=(sj3*x3006);
evalcond[0]=((((-1.0)*sj3*x3005*x3007))+(((-1.0)*x3007*x3009))+((cj3*x3008))+(((-1.0)*cj2*x3010)));
evalcond[1]=(((cj2*x3009))+((sj3*x3008))+(((-1.0)*r22))+((cj3*sj2*x3005))+(((-1.0)*x3007*x3010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x3011=((-1.0)*pz);
r12=0;
r02=0;
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x3011);
rxp1_0=(pz*r11);
rxp1_1=(r01*x3011);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x3012=pz*pz;
j0eval[0]=(x3012+(((-1.0)*pp)));
j0eval[1]=IKsign(((((437444067.0)*x3012))+(((-437444067.0)*pp))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j5]

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3013=((87.4888134)*sj2);
IkReal x3014=(cj1*px);
IkReal x3015=((62130180.83601)*sj2);
IkReal x3016=(px*sj1);
IkReal x3017=((21106676.23275)*cj2);
IkReal x3018=((62130180.83601)*cj2);
IkReal x3019=(cj1*py);
IkReal x3020=(py*sj1);
IkReal x3021=(cj3*x3020);
IkReal x3022=((87.4888134)*cj2*sj3);
CheckValue<IkReal> x3023 = IKatan2WithCheck(IkReal((((cj3*x3018*x3019))+(((-1.0)*sj3*x3015*x3016))+(((-1.0)*sj3*x3015*x3019))+((x3015*x3019))+((x3015*x3016))+((x3019*x3022))+((cj3*x3013*x3016))+((cj3*x3013*x3019))+((x3016*x3017))+(((-50000000.0)*py))+((x3016*x3022))+((x3017*x3019))+((cj3*x3016*x3018)))),IkReal(((((-1.0)*x3015*x3020))+(((-1.0)*x3018*x3021))+((cj3*x3013*x3014))+((cj3*x3014*x3018))+(((-1.0)*x3020*x3022))+((x3014*x3022))+(((-50000000.0)*px))+((sj3*x3015*x3020))+(((-1.0)*x3013*x3021))+(((-1.0)*x3017*x3020))+(((-1.0)*sj3*x3014*x3015))+((x3014*x3015))+((x3014*x3017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3023.valid){
continue;
}
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(IKsign(((((-437444067.0)*pp))+(((437444067.0)*(pz*pz))))),-1);
if(!x3024.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3023.value)+(((1.5707963267949)*(x3024.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3025=IKsin(j0);
IkReal x3026=IKcos(j0);
IkReal x3027=(cj1*py);
IkReal x3028=((0.14203)*sj2);
IkReal x3029=(px*sj1);
IkReal x3030=(cj1*px);
IkReal x3031=(py*sj1);
IkReal x3032=((1.0)*x3026);
evalcond[0]=((((-1.0)*x3025*x3031))+(((-1.0)*x3029*x3032))+(((0.11430032722332)*sj1))+(((-1.0)*x3027*x3032))+((x3025*x3030)));
evalcond[1]=((((0.14203)*cj2*cj3))+((x3026*x3030))+x3028+(((-1.0)*sj3*x3028))+(((2.0e-7)*cj3*sj2))+((x3025*x3029))+((x3025*x3027))+(((-0.11430032722332)*cj1))+(((-1.0)*x3031*x3032))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3033=(cj0*cj1);
IkReal x3034=(cj0*sj1);
IkReal x3035=(sj0*sj1);
IkReal x3036=((1.0)*cj1*sj0);
if( IKabs(((((-1.0)*r00*x3036))+((r00*x3034))+((r10*x3035))+((r10*x3033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x3036))+((r11*x3033))+((r11*x3035))+((r01*x3034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x3036))+((r00*x3034))+((r10*x3035))+((r10*x3033))))+IKsqr(((((-1.0)*r01*x3036))+((r11*x3033))+((r11*x3035))+((r01*x3034))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r00*x3036))+((r00*x3034))+((r10*x3035))+((r10*x3033))), ((((-1.0)*r01*x3036))+((r11*x3033))+((r11*x3035))+((r01*x3034))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x3037=IKsin(j5);
IkReal x3038=IKcos(j5);
IkReal x3039=((1.0)*cj2);
IkReal x3040=(sj0*sj1);
IkReal x3041=((1.0)*r11);
IkReal x3042=(cj1*sj0);
IkReal x3043=(cj0*cj1);
IkReal x3044=((1.0)*cj0);
IkReal x3045=(cj0*sj1);
IkReal x3046=(r01*x3038);
IkReal x3047=(r11*x3037);
IkReal x3048=(r10*x3044);
IkReal x3049=(cj1*x3037);
IkReal x3050=(r00*x3038);
IkReal x3051=(sj1*x3038);
IkReal x3052=((1.0)*x3037);
IkReal x3053=(r00*x3037);
IkReal x3054=(r10*x3038);
IkReal x3055=(x3037*x3042);
evalcond[0]=(((x3043*x3046))+(((-1.0)*x3038*x3041*x3045))+((r11*x3038*x3042))+((x3040*x3046))+((x3043*x3053))+((r10*x3055))+(((-1.0)*sj1*x3037*x3048))+((x3040*x3053)));
evalcond[1]=(((x3043*x3047))+(((-1.0)*x3040*x3054))+((r01*x3037*x3045))+(((-1.0)*sj1*x3044*x3050))+(((-1.0)*x3043*x3054))+((x3040*x3047))+(((-1.0)*r01*x3042*x3052))+((x3042*x3050)));
evalcond[2]=((1.0)+(((-1.0)*r10*x3040*x3052))+(((-1.0)*x3038*x3041*x3043))+((x3042*x3046))+(((-1.0)*r10*x3043*x3052))+(((-1.0)*x3038*x3040*x3041))+(((-1.0)*sj1*x3044*x3053))+((x3042*x3053))+(((-1.0)*sj1*x3044*x3046)));
evalcond[3]=((((-1.0)*x3041*x3055))+(((-1.0)*cj4*sj3*x3039))+(((-1.0)*x3048*x3051))+(((-1.0)*r01*x3043*x3052))+((x3043*x3050))+((sj2*sj3*sj4))+((x3042*x3054))+(((-1.0)*r01*x3040*x3052))+((x3045*x3047))+(((-1.0)*cj3*sj4*x3039))+(((-1.0)*cj3*cj4*sj2))+((x3040*x3050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3056=cj1*cj1;
IkReal x3057=(cj1*sj3);
IkReal x3058=(cj1*cj3);
IkReal x3059=((2.0e-7)*sj2);
IkReal x3060=((0.14203)*r12);
IkReal x3061=(sj1*sj3);
IkReal x3062=((0.14203)*r02);
IkReal x3063=(r12*sj1);
IkReal x3064=((0.04825)*cj2);
IkReal x3065=(r02*sj1);
IkReal x3066=((0.11430032722332)*cj1);
IkReal x3067=(sj2*x3062);
IkReal x3068=((0.11430032722332)*x3056);
IkReal x3069=(cj2*cj3*sj1);
IkReal x3070=((2.0e-7)*cj2*r02);
IkReal x3071=((2.0e-7)*cj2*r12);
CheckValue<IkReal> x3072 = IKatan2WithCheck(IkReal(((((-1.0)*x3057*x3071))+(((-1.0)*cj2*x3058*x3060))+(((-1.0)*x3061*x3070))+((x3065*x3066))+(((-1.0)*x3062*x3069))+((sj2*x3057*x3060))+(((-1.0)*cj3*x3059*x3065))+(((-1.0)*cj1*r12*x3064))+(((-1.0)*cj1*sj2*x3060))+(((-1.0)*sj1*x3067))+((r12*x3068))+(((-1.0)*r12*x3058*x3059))+((x3061*x3067))+(((-1.0)*x3064*x3065)))),IkReal(((((-1.0)*x3057*x3070))+(((-1.0)*cj2*x3058*x3062))+(((-1.0)*r02*x3058*x3059))+(((-1.0)*sj2*x3060*x3061))+(((-1.0)*cj1*r02*x3064))+((cj3*x3059*x3063))+(((-1.0)*x3063*x3066))+((sj1*sj2*x3060))+(((-1.0)*cj1*x3067))+((x3057*x3067))+((x3061*x3071))+((r02*x3068))+((x3060*x3069))+((x3063*x3064)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3072.valid){
continue;
}
CheckValue<IkReal> x3073=IKPowWithIntegerCheck(IKsign(((((-1.0)*pz*r22))+npz)),-1);
if(!x3073.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3072.value)+(((1.5707963267949)*(x3073.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3074=IKcos(j0);
IkReal x3075=IKsin(j0);
IkReal x3076=(px*sj1);
IkReal x3077=(cj1*py);
IkReal x3078=((0.14203)*sj2);
IkReal x3079=((1.0)*x3074);
IkReal x3080=(cj1*x3075);
IkReal x3081=((1.0)*sj1*x3075);
evalcond[0]=((((-1.0)*cj1*r12*x3079))+(((-1.0)*r02*sj1*x3079))+((r02*x3080))+(((-1.0)*r12*x3081)));
evalcond[1]=(((px*x3080))+(((-1.0)*py*x3081))+(((0.11430032722332)*sj1))+(((-1.0)*x3076*x3079))+(((-1.0)*x3077*x3079)));
evalcond[2]=((((0.14203)*cj2*cj3))+x3078+((x3075*x3077))+((x3075*x3076))+((cj1*px*x3074))+(((2.0e-7)*cj3*sj2))+(((-0.11430032722332)*cj1))+(((-1.0)*py*sj1*x3079))+(((2.0e-7)*cj2*sj3))+(((-1.0)*sj3*x3078))+(((0.04825)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3082=(cj2*sj3);
IkReal x3083=(cj3*sj2);
IkReal x3084=(sj2*sj3);
IkReal x3085=(cj2*cj3);
IkReal x3086=(cj0*r12*sj1);
IkReal x3087=(cj1*r12*sj0);
IkReal x3088=(cj0*cj1*r02);
IkReal x3089=(r02*sj0*sj1);
if( IKabs((((x3083*x3089))+((x3083*x3088))+((x3083*x3087))+((x3082*x3089))+((x3082*x3087))+((x3082*x3088))+(((-1.0)*r22*x3084))+(((-1.0)*x3083*x3086))+((r22*x3085))+(((-1.0)*x3082*x3086)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3085*x3089))+(((-1.0)*x3085*x3087))+(((-1.0)*x3085*x3088))+(((-1.0)*x3084*x3086))+((x3085*x3086))+((x3084*x3089))+((x3084*x3087))+((x3084*x3088))+((r22*x3083))+((r22*x3082)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3083*x3089))+((x3083*x3088))+((x3083*x3087))+((x3082*x3089))+((x3082*x3087))+((x3082*x3088))+(((-1.0)*r22*x3084))+(((-1.0)*x3083*x3086))+((r22*x3085))+(((-1.0)*x3082*x3086))))+IKsqr(((((-1.0)*x3085*x3089))+(((-1.0)*x3085*x3087))+(((-1.0)*x3085*x3088))+(((-1.0)*x3084*x3086))+((x3085*x3086))+((x3084*x3089))+((x3084*x3087))+((x3084*x3088))+((r22*x3083))+((r22*x3082))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x3083*x3089))+((x3083*x3088))+((x3083*x3087))+((x3082*x3089))+((x3082*x3087))+((x3082*x3088))+(((-1.0)*r22*x3084))+(((-1.0)*x3083*x3086))+((r22*x3085))+(((-1.0)*x3082*x3086))), ((((-1.0)*x3085*x3089))+(((-1.0)*x3085*x3087))+(((-1.0)*x3085*x3088))+(((-1.0)*x3084*x3086))+((x3085*x3086))+((x3084*x3089))+((x3084*x3087))+((x3084*x3088))+((r22*x3083))+((r22*x3082))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3090=IKcos(j4);
IkReal x3091=IKsin(j4);
IkReal x3092=((1.0)*sj3);
IkReal x3093=(cj2*x3090);
IkReal x3094=(sj2*x3090);
IkReal x3095=(cj2*x3091);
IkReal x3096=(sj2*x3091);
evalcond[0]=(((sj3*x3093))+(((-1.0)*x3092*x3096))+(((-1.0)*r22))+((cj3*x3094))+((cj3*x3095)));
evalcond[1]=(((r02*sj0*sj1))+((cj0*cj1*r02))+(((-1.0)*x3092*x3095))+(((-1.0)*x3092*x3094))+((cj1*r12*sj0))+((cj3*x3093))+(((-1.0)*cj0*r12*sj1))+(((-1.0)*cj3*x3096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x3097=(((r02*sj0*sj1))+((cj0*cj1*r02))+((cj1*r12*sj0))+(((-1.0)*cj0*r12*sj1)));
j5eval[0]=x3097;
j5eval[1]=((IKabs(r21))+(IKabs(r20)));
j5eval[2]=IKsign(x3097);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x3098=((1.0)*cj2);
IkReal x3099=(r21*sj4);
IkReal x3100=(cj3*r20);
IkReal x3101=((1.0)*sj2);
IkReal x3102=(cj4*sj3);
IkReal x3103=((-1.0)+(r22*r22));
j5eval[0]=x3103;
j5eval[1]=((IKabs((((cj2*r20*sj3*sj4))+((r20*sj2*x3102))+((sj2*sj4*x3100))+(((-1.0)*cj4*x3098*x3100)))))+(IKabs(((((-1.0)*sj3*x3098*x3099))+((cj2*cj3*cj4*r21))+(((-1.0)*cj3*x3099*x3101))+(((-1.0)*r21*x3101*x3102))))));
j5eval[2]=IKsign(x3103);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x3104=(((r02*sj0*sj1))+((cj0*cj1*r02))+((cj1*r12*sj0))+(((-1.0)*cj0*r12*sj1)));
j5eval[0]=x3104;
j5eval[1]=IKsign(x3104);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3105=(cj0*cj1);
IkReal x3106=(cj0*sj1);
IkReal x3107=(sj0*sj1);
IkReal x3108=((1.0)*cj1*sj0);
if( IKabs((((r10*x3107))+((r10*x3105))+(((-1.0)*r00*x3108))+((r00*x3106)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3105))+((r11*x3107))+(((-1.0)*r01*x3108))+((r01*x3106)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3107))+((r10*x3105))+(((-1.0)*r00*x3108))+((r00*x3106))))+IKsqr((((r11*x3105))+((r11*x3107))+(((-1.0)*r01*x3108))+((r01*x3106))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r10*x3107))+((r10*x3105))+(((-1.0)*r00*x3108))+((r00*x3106))), (((r11*x3105))+((r11*x3107))+(((-1.0)*r01*x3108))+((r01*x3106))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x3109=IKsin(j5);
IkReal x3110=IKcos(j5);
IkReal x3111=((1.0)*cj2);
IkReal x3112=(sj0*sj1);
IkReal x3113=((1.0)*r11);
IkReal x3114=(cj1*sj0);
IkReal x3115=(cj0*cj1);
IkReal x3116=((1.0)*cj0);
IkReal x3117=(cj0*sj1);
IkReal x3118=(r01*x3110);
IkReal x3119=(r11*x3109);
IkReal x3120=(r10*x3116);
IkReal x3121=(cj1*x3109);
IkReal x3122=(r00*x3110);
IkReal x3123=(sj1*x3110);
IkReal x3124=((1.0)*x3109);
IkReal x3125=(r00*x3109);
IkReal x3126=(r10*x3110);
IkReal x3127=(x3109*x3114);
evalcond[0]=(((x3115*x3125))+(((-1.0)*x3110*x3113*x3117))+((x3112*x3118))+(((-1.0)*sj1*x3109*x3120))+((r10*x3127))+((r11*x3110*x3114))+((x3112*x3125))+((x3115*x3118)));
evalcond[1]=((((-1.0)*x3112*x3126))+(((-1.0)*r01*x3114*x3124))+((r01*x3109*x3117))+((x3112*x3119))+(((-1.0)*sj1*x3116*x3122))+((x3114*x3122))+(((-1.0)*x3115*x3126))+((x3115*x3119)));
evalcond[2]=((1.0)+(((-1.0)*r10*x3112*x3124))+(((-1.0)*x3110*x3113*x3115))+(((-1.0)*sj1*x3116*x3125))+(((-1.0)*x3110*x3112*x3113))+((x3114*x3118))+(((-1.0)*sj1*x3116*x3118))+((x3114*x3125))+(((-1.0)*r10*x3115*x3124)));
evalcond[3]=(((x3115*x3122))+(((-1.0)*x3113*x3127))+(((-1.0)*r01*x3112*x3124))+((sj2*sj3*sj4))+((x3114*x3126))+(((-1.0)*x3120*x3123))+(((-1.0)*cj4*sj3*x3111))+(((-1.0)*cj3*sj4*x3111))+((x3112*x3122))+(((-1.0)*cj3*cj4*sj2))+(((-1.0)*r01*x3115*x3124))+((x3117*x3119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3128=(cj0*cj1);
IkReal x3129=(cj0*sj1);
IkReal x3130=(sj0*sj1);
IkReal x3131=((1.0)*cj1*sj0);
if( IKabs((((r00*x3129))+((r10*x3128))+((r10*x3130))+(((-1.0)*r00*x3131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x3129))+((r11*x3130))+((r11*x3128))+(((-1.0)*r01*x3131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x3129))+((r10*x3128))+((r10*x3130))+(((-1.0)*r00*x3131))))+IKsqr((((r01*x3129))+((r11*x3130))+((r11*x3128))+(((-1.0)*r01*x3131))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r00*x3129))+((r10*x3128))+((r10*x3130))+(((-1.0)*r00*x3131))), (((r01*x3129))+((r11*x3130))+((r11*x3128))+(((-1.0)*r01*x3131))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x3132=IKsin(j5);
IkReal x3133=IKcos(j5);
IkReal x3134=((1.0)*cj2);
IkReal x3135=(sj0*sj1);
IkReal x3136=((1.0)*r11);
IkReal x3137=(cj1*sj0);
IkReal x3138=(cj0*cj1);
IkReal x3139=((1.0)*cj0);
IkReal x3140=(cj0*sj1);
IkReal x3141=(r01*x3133);
IkReal x3142=(r11*x3132);
IkReal x3143=(r10*x3139);
IkReal x3144=(cj1*x3132);
IkReal x3145=(r00*x3133);
IkReal x3146=(sj1*x3133);
IkReal x3147=((1.0)*x3132);
IkReal x3148=(r00*x3132);
IkReal x3149=(r10*x3133);
IkReal x3150=(x3132*x3137);
evalcond[0]=(((r10*x3150))+((r11*x3133*x3137))+((x3135*x3148))+((x3135*x3141))+(((-1.0)*x3133*x3136*x3140))+((x3138*x3141))+((x3138*x3148))+(((-1.0)*sj1*x3132*x3143)));
evalcond[1]=((((-1.0)*r01*x3137*x3147))+((x3135*x3142))+(((-1.0)*x3138*x3149))+((r01*x3132*x3140))+(((-1.0)*x3135*x3149))+((x3137*x3145))+((x3138*x3142))+(((-1.0)*sj1*x3139*x3145)));
evalcond[2]=((1.0)+(((-1.0)*r10*x3135*x3147))+(((-1.0)*r10*x3138*x3147))+(((-1.0)*x3133*x3136*x3138))+((x3137*x3148))+((x3137*x3141))+(((-1.0)*x3133*x3135*x3136))+(((-1.0)*sj1*x3139*x3148))+(((-1.0)*sj1*x3139*x3141)));
evalcond[3]=((((-1.0)*x3143*x3146))+((x3135*x3145))+(((-1.0)*x3136*x3150))+(((-1.0)*cj3*sj4*x3134))+((sj2*sj3*sj4))+(((-1.0)*r01*x3135*x3147))+((x3140*x3142))+((x3137*x3149))+(((-1.0)*cj3*cj4*sj2))+(((-1.0)*r01*x3138*x3147))+((x3138*x3145))+(((-1.0)*cj4*sj3*x3134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3151=(cj0*sj4);
IkReal x3152=(sj1*sj3);
IkReal x3153=(cj2*r00);
IkReal x3154=(r10*sj2);
IkReal x3155=(cj1*cj3);
IkReal x3156=(sj0*sj1);
IkReal x3157=(cj4*sj0);
IkReal x3158=(cj2*r11);
IkReal x3159=(cj1*sj3);
IkReal x3160=(cj3*sj4);
IkReal x3161=(cj2*r10);
IkReal x3162=(cj2*r01);
IkReal x3163=(r11*sj2);
IkReal x3164=(cj0*cj4);
IkReal x3165=(cj0*sj1);
IkReal x3166=(sj0*sj4);
IkReal x3167=(r00*sj2);
IkReal x3168=(cj3*sj1);
IkReal x3169=(r01*sj2);
IkReal x3170=((1.0)*cj3*cj4);
IkReal x3171=((1.0)*sj2*x3166);
CheckValue<IkReal> x3172 = IKatan2WithCheck(IkReal((((x3152*x3154*x3157))+((x3152*x3161*x3166))+(((-1.0)*x3155*x3166*x3167))+(((-1.0)*x3153*x3164*x3168))+((x3151*x3167*x3168))+((x3154*x3156*x3160))+(((-1.0)*x3153*x3159*x3166))+((x3154*x3159*x3164))+(((-1.0)*x3156*x3161*x3170))+((x3152*x3164*x3167))+(((-1.0)*x3157*x3159*x3167))+((x3151*x3152*x3153))+((x3151*x3154*x3155))+(((-1.0)*x3155*x3161*x3164))+((x3153*x3155*x3157))+((x3151*x3159*x3161)))),IkReal((((x3151*x3155*x3163))+((x3151*x3158*x3159))+(((-1.0)*x3155*x3158*x3164))+(((-1.0)*x3162*x3164*x3168))+(((-1.0)*x3155*x3166*x3169))+((x3151*x3168*x3169))+((x3152*x3164*x3169))+((x3155*x3157*x3162))+((x3159*x3163*x3164))+((x3152*x3157*x3163))+((x3156*x3160*x3163))+(((-1.0)*x3156*x3158*x3170))+(((-1.0)*x3157*x3159*x3169))+((x3151*x3152*x3162))+((x3152*x3158*x3166))+(((-1.0)*x3159*x3162*x3166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
CheckValue<IkReal> x3173=IKPowWithIntegerCheck(IKsign((((r12*(((((-1.0)*x3165))+((cj1*sj0))))))+((r02*((x3156+((cj0*cj1)))))))),-1);
if(!x3173.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x3172.value)+(((1.5707963267949)*(x3173.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3174=IKsin(j5);
IkReal x3175=IKcos(j5);
IkReal x3176=((1.0)*cj0);
IkReal x3177=(cj1*sj0);
IkReal x3178=(sj0*sj1);
IkReal x3179=(cj0*cj1);
IkReal x3180=(sj2*sj4);
IkReal x3181=(cj2*cj3);
IkReal x3182=(cj0*sj1);
IkReal x3183=((1.0)*cj3);
IkReal x3184=(cj4*sj2);
IkReal x3185=(r01*x3175);
IkReal x3186=((1.0)*cj2*sj3);
IkReal x3187=(r10*x3174);
IkReal x3188=(r11*x3174);
IkReal x3189=((1.0)*x3175);
IkReal x3190=(r00*x3175);
IkReal x3191=(sj1*x3175);
IkReal x3192=(r10*x3175);
IkReal x3193=(r01*x3174);
IkReal x3194=(r00*x3174);
IkReal x3195=(r11*x3175);
evalcond[0]=((((-1.0)*r21*x3189))+(((-1.0)*r20*x3174)));
evalcond[1]=((((-1.0)*x3180*x3183))+(((-1.0)*sj4*x3186))+(((-1.0)*r20*x3189))+((cj4*x3181))+((r21*x3174))+(((-1.0)*sj3*x3184)));
evalcond[2]=((((-1.0)*r11*x3176*x3191))+((x3178*x3185))+((x3178*x3194))+((x3177*x3195))+((x3177*x3187))+((x3179*x3194))+((x3179*x3185))+(((-1.0)*sj1*x3176*x3187)));
evalcond[3]=((((-1.0)*sj1*x3176*x3190))+(((-1.0)*r10*x3178*x3189))+((x3178*x3188))+((x3177*x3190))+(((-1.0)*x3177*x3193))+((x3182*x3193))+((x3179*x3188))+(((-1.0)*cj1*x3176*x3192)));
evalcond[4]=((1.0)+(((-1.0)*sj1*x3176*x3194))+(((-1.0)*r11*x3178*x3189))+((x3177*x3194))+((x3177*x3185))+(((-1.0)*x3178*x3187))+(((-1.0)*cj1*x3176*x3187))+(((-1.0)*sj1*x3176*x3185))+(((-1.0)*cj1*x3176*x3195)));
evalcond[5]=((((-1.0)*x3183*x3184))+((x3182*x3188))+((x3178*x3190))+(((-1.0)*r10*x3176*x3191))+(((-1.0)*x3177*x3188))+((x3177*x3192))+(((-1.0)*x3178*x3193))+(((-1.0)*sj4*x3181))+((x3179*x3190))+(((-1.0)*cj4*x3186))+(((-1.0)*cj1*x3176*x3193))+((sj3*x3180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3196=((1.0)*r21);
IkReal x3197=(cj3*r20);
IkReal x3198=(cj2*cj4);
IkReal x3199=(sj2*sj4);
IkReal x3200=(cj2*sj3*sj4);
IkReal x3201=(cj4*sj2*sj3);
CheckValue<IkReal> x3202=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x3202.valid){
continue;
}
CheckValue<IkReal> x3203 = IKatan2WithCheck(IkReal(((((-1.0)*x3196*x3201))+(((-1.0)*x3196*x3200))+(((-1.0)*cj3*x3196*x3199))+((cj3*r21*x3198)))),IkReal(((((-1.0)*x3197*x3198))+((r20*x3200))+((r20*x3201))+((x3197*x3199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3203.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3202.value)))+(x3203.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3204=IKsin(j5);
IkReal x3205=IKcos(j5);
IkReal x3206=((1.0)*cj0);
IkReal x3207=(cj1*sj0);
IkReal x3208=(sj0*sj1);
IkReal x3209=(cj0*cj1);
IkReal x3210=(sj2*sj4);
IkReal x3211=(cj2*cj3);
IkReal x3212=(cj0*sj1);
IkReal x3213=((1.0)*cj3);
IkReal x3214=(cj4*sj2);
IkReal x3215=(r01*x3205);
IkReal x3216=((1.0)*cj2*sj3);
IkReal x3217=(r10*x3204);
IkReal x3218=(r11*x3204);
IkReal x3219=((1.0)*x3205);
IkReal x3220=(r00*x3205);
IkReal x3221=(sj1*x3205);
IkReal x3222=(r10*x3205);
IkReal x3223=(r01*x3204);
IkReal x3224=(r00*x3204);
IkReal x3225=(r11*x3205);
evalcond[0]=((((-1.0)*r21*x3219))+(((-1.0)*r20*x3204)));
evalcond[1]=(((cj4*x3211))+(((-1.0)*sj3*x3214))+(((-1.0)*x3210*x3213))+(((-1.0)*r20*x3219))+(((-1.0)*sj4*x3216))+((r21*x3204)));
evalcond[2]=(((x3208*x3224))+((x3209*x3224))+((x3207*x3225))+((x3208*x3215))+((x3209*x3215))+((x3207*x3217))+(((-1.0)*sj1*x3206*x3217))+(((-1.0)*r11*x3206*x3221)));
evalcond[3]=(((x3207*x3220))+(((-1.0)*sj1*x3206*x3220))+((x3208*x3218))+(((-1.0)*x3207*x3223))+((x3209*x3218))+((x3212*x3223))+(((-1.0)*cj1*x3206*x3222))+(((-1.0)*r10*x3208*x3219)));
evalcond[4]=((1.0)+(((-1.0)*cj1*x3206*x3217))+((x3207*x3224))+(((-1.0)*x3208*x3217))+(((-1.0)*sj1*x3206*x3224))+(((-1.0)*cj1*x3206*x3225))+((x3207*x3215))+(((-1.0)*r11*x3208*x3219))+(((-1.0)*sj1*x3206*x3215)));
evalcond[5]=(((x3208*x3220))+(((-1.0)*x3207*x3218))+((x3212*x3218))+((x3209*x3220))+(((-1.0)*r10*x3206*x3221))+((x3207*x3222))+(((-1.0)*cj1*x3206*x3223))+((sj3*x3210))+(((-1.0)*cj4*x3216))+(((-1.0)*x3213*x3214))+(((-1.0)*x3208*x3223))+(((-1.0)*sj4*x3211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3226=IKPowWithIntegerCheck(IKsign((((r02*((((cj0*cj1))+((sj0*sj1))))))+((r12*((((cj1*sj0))+(((-1.0)*cj0*sj1)))))))),-1);
if(!x3226.valid){
continue;
}
CheckValue<IkReal> x3227 = IKatan2WithCheck(IkReal(r21),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3227.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3226.value)))+(x3227.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3228=IKsin(j5);
IkReal x3229=IKcos(j5);
IkReal x3230=((1.0)*cj0);
IkReal x3231=(cj1*sj0);
IkReal x3232=(sj0*sj1);
IkReal x3233=(cj0*cj1);
IkReal x3234=(sj2*sj4);
IkReal x3235=(cj2*cj3);
IkReal x3236=(cj0*sj1);
IkReal x3237=((1.0)*cj3);
IkReal x3238=(cj4*sj2);
IkReal x3239=(r01*x3229);
IkReal x3240=((1.0)*cj2*sj3);
IkReal x3241=(r10*x3228);
IkReal x3242=(r11*x3228);
IkReal x3243=((1.0)*x3229);
IkReal x3244=(r00*x3229);
IkReal x3245=(sj1*x3229);
IkReal x3246=(r10*x3229);
IkReal x3247=(r01*x3228);
IkReal x3248=(r00*x3228);
IkReal x3249=(r11*x3229);
evalcond[0]=((((-1.0)*r21*x3243))+(((-1.0)*r20*x3228)));
evalcond[1]=((((-1.0)*r20*x3243))+((r21*x3228))+(((-1.0)*sj4*x3240))+(((-1.0)*sj3*x3238))+(((-1.0)*x3234*x3237))+((cj4*x3235)));
evalcond[2]=(((x3232*x3239))+((x3231*x3241))+((x3231*x3249))+(((-1.0)*sj1*x3230*x3241))+((x3232*x3248))+((x3233*x3248))+(((-1.0)*r11*x3230*x3245))+((x3233*x3239)));
evalcond[3]=((((-1.0)*x3231*x3247))+(((-1.0)*r10*x3232*x3243))+((x3231*x3244))+((x3236*x3247))+(((-1.0)*sj1*x3230*x3244))+((x3232*x3242))+(((-1.0)*cj1*x3230*x3246))+((x3233*x3242)));
evalcond[4]=((1.0)+(((-1.0)*x3232*x3241))+((x3231*x3248))+(((-1.0)*sj1*x3230*x3248))+(((-1.0)*cj1*x3230*x3241))+(((-1.0)*cj1*x3230*x3249))+((x3231*x3239))+(((-1.0)*sj1*x3230*x3239))+(((-1.0)*r11*x3232*x3243)));
evalcond[5]=((((-1.0)*x3232*x3247))+(((-1.0)*x3231*x3242))+(((-1.0)*cj4*x3240))+((x3231*x3246))+((x3236*x3242))+((x3232*x3244))+(((-1.0)*x3237*x3238))+(((-1.0)*cj1*x3230*x3247))+((x3233*x3244))+((sj3*x3234))+(((-1.0)*sj4*x3235))+(((-1.0)*r10*x3230*x3245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3250=((87.4888134)*sj2);
IkReal x3251=(cj1*px);
IkReal x3252=((62130180.83601)*sj2);
IkReal x3253=(px*sj1);
IkReal x3254=((21106676.23275)*cj2);
IkReal x3255=((62130180.83601)*cj2);
IkReal x3256=(cj1*py);
IkReal x3257=(py*sj1);
IkReal x3258=(cj3*x3257);
IkReal x3259=((87.4888134)*cj2*sj3);
CheckValue<IkReal> x3260=IKPowWithIntegerCheck(IKsign(((((-437444067.0)*pp))+(((437444067.0)*(pz*pz))))),-1);
if(!x3260.valid){
continue;
}
CheckValue<IkReal> x3261 = IKatan2WithCheck(IkReal(((((-1.0)*sj3*x3252*x3253))+(((-1.0)*sj3*x3252*x3256))+((cj3*x3250*x3256))+((cj3*x3250*x3253))+((x3252*x3256))+((x3252*x3253))+((x3256*x3259))+(((-50000000.0)*py))+((cj3*x3253*x3255))+((x3254*x3256))+((x3253*x3254))+((x3253*x3259))+((cj3*x3255*x3256)))),IkReal(((((-1.0)*sj3*x3251*x3252))+(((-1.0)*x3254*x3257))+((cj3*x3250*x3251))+((cj3*x3251*x3255))+(((-1.0)*x3257*x3259))+((x3251*x3254))+((x3251*x3252))+((x3251*x3259))+(((-50000000.0)*px))+(((-1.0)*x3250*x3258))+(((-1.0)*x3252*x3257))+(((-1.0)*x3255*x3258))+((sj3*x3252*x3257)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3261.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3260.value)))+(x3261.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3262=IKcos(j0);
IkReal x3263=IKsin(j0);
IkReal x3264=(px*sj1);
IkReal x3265=(cj1*py);
IkReal x3266=((0.14203)*sj2);
IkReal x3267=((1.0)*x3262);
IkReal x3268=(cj1*x3263);
IkReal x3269=((1.0)*sj1*x3263);
evalcond[0]=((((-1.0)*r12*x3269))+(((-1.0)*cj1*r12*x3267))+(((-1.0)*r02*sj1*x3267))+((r02*x3268)));
evalcond[1]=(((px*x3268))+(((0.11430032722332)*sj1))+(((-1.0)*x3264*x3267))+(((-1.0)*x3265*x3267))+(((-1.0)*py*x3269)));
evalcond[2]=(((cj1*px*x3262))+(((0.14203)*cj2*cj3))+((x3263*x3264))+((x3263*x3265))+(((-1.0)*py*sj1*x3267))+x3266+(((-1.0)*sj3*x3266))+(((2.0e-7)*cj3*sj2))+(((-0.11430032722332)*cj1))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3270=(cj2*sj3);
IkReal x3271=(cj3*sj2);
IkReal x3272=(sj2*sj3);
IkReal x3273=(cj2*cj3);
IkReal x3274=(cj0*r12*sj1);
IkReal x3275=(cj1*r12*sj0);
IkReal x3276=(cj0*cj1*r02);
IkReal x3277=(r02*sj0*sj1);
if( IKabs(((((-1.0)*r22*x3272))+(((-1.0)*x3271*x3274))+((r22*x3273))+((x3270*x3275))+((x3270*x3276))+((x3270*x3277))+((x3271*x3276))+((x3271*x3277))+((x3271*x3275))+(((-1.0)*x3270*x3274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3272*x3274))+((x3272*x3276))+((x3272*x3277))+((x3272*x3275))+((x3273*x3274))+((r22*x3270))+((r22*x3271))+(((-1.0)*x3273*x3275))+(((-1.0)*x3273*x3276))+(((-1.0)*x3273*x3277)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3272))+(((-1.0)*x3271*x3274))+((r22*x3273))+((x3270*x3275))+((x3270*x3276))+((x3270*x3277))+((x3271*x3276))+((x3271*x3277))+((x3271*x3275))+(((-1.0)*x3270*x3274))))+IKsqr(((((-1.0)*x3272*x3274))+((x3272*x3276))+((x3272*x3277))+((x3272*x3275))+((x3273*x3274))+((r22*x3270))+((r22*x3271))+(((-1.0)*x3273*x3275))+(((-1.0)*x3273*x3276))+(((-1.0)*x3273*x3277))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r22*x3272))+(((-1.0)*x3271*x3274))+((r22*x3273))+((x3270*x3275))+((x3270*x3276))+((x3270*x3277))+((x3271*x3276))+((x3271*x3277))+((x3271*x3275))+(((-1.0)*x3270*x3274))), ((((-1.0)*x3272*x3274))+((x3272*x3276))+((x3272*x3277))+((x3272*x3275))+((x3273*x3274))+((r22*x3270))+((r22*x3271))+(((-1.0)*x3273*x3275))+(((-1.0)*x3273*x3276))+(((-1.0)*x3273*x3277))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3278=IKcos(j4);
IkReal x3279=IKsin(j4);
IkReal x3280=((1.0)*sj3);
IkReal x3281=(cj2*x3278);
IkReal x3282=(sj2*x3278);
IkReal x3283=(cj2*x3279);
IkReal x3284=(sj2*x3279);
evalcond[0]=(((cj3*x3282))+((cj3*x3283))+((sj3*x3281))+(((-1.0)*x3280*x3284))+(((-1.0)*r22)));
evalcond[1]=(((cj3*x3281))+((r02*sj0*sj1))+(((-1.0)*x3280*x3282))+(((-1.0)*x3280*x3283))+((cj0*cj1*r02))+((cj1*r12*sj0))+(((-1.0)*cj0*r12*sj1))+(((-1.0)*cj3*x3284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x3285=(((r02*sj0*sj1))+((cj0*cj1*r02))+((cj1*r12*sj0))+(((-1.0)*cj0*r12*sj1)));
j5eval[0]=x3285;
j5eval[1]=((IKabs(r21))+(IKabs(r20)));
j5eval[2]=IKsign(x3285);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x3286=((1.0)*cj2);
IkReal x3287=(r21*sj4);
IkReal x3288=(cj3*r20);
IkReal x3289=((1.0)*sj2);
IkReal x3290=(cj4*sj3);
IkReal x3291=((-1.0)+(r22*r22));
j5eval[0]=x3291;
j5eval[1]=((IKabs((((cj2*r20*sj3*sj4))+(((-1.0)*cj4*x3286*x3288))+((r20*sj2*x3290))+((sj2*sj4*x3288)))))+(IKabs((((cj2*cj3*cj4*r21))+(((-1.0)*cj3*x3287*x3289))+(((-1.0)*sj3*x3286*x3287))+(((-1.0)*r21*x3289*x3290))))));
j5eval[2]=IKsign(x3291);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x3292=(((r02*sj0*sj1))+((cj0*cj1*r02))+((cj1*r12*sj0))+(((-1.0)*cj0*r12*sj1)));
j5eval[0]=x3292;
j5eval[1]=IKsign(x3292);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3293=(cj0*cj1);
IkReal x3294=(cj0*sj1);
IkReal x3295=(sj0*sj1);
IkReal x3296=((1.0)*cj1*sj0);
if( IKabs((((r00*x3294))+((r10*x3293))+((r10*x3295))+(((-1.0)*r00*x3296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x3294))+(((-1.0)*r01*x3296))+((r11*x3293))+((r11*x3295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x3294))+((r10*x3293))+((r10*x3295))+(((-1.0)*r00*x3296))))+IKsqr((((r01*x3294))+(((-1.0)*r01*x3296))+((r11*x3293))+((r11*x3295))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r00*x3294))+((r10*x3293))+((r10*x3295))+(((-1.0)*r00*x3296))), (((r01*x3294))+(((-1.0)*r01*x3296))+((r11*x3293))+((r11*x3295))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x3297=IKsin(j5);
IkReal x3298=IKcos(j5);
IkReal x3299=((1.0)*cj2);
IkReal x3300=(sj0*sj1);
IkReal x3301=((1.0)*r11);
IkReal x3302=(cj1*sj0);
IkReal x3303=(cj0*cj1);
IkReal x3304=((1.0)*cj0);
IkReal x3305=(cj0*sj1);
IkReal x3306=(r01*x3298);
IkReal x3307=(r11*x3297);
IkReal x3308=(r10*x3304);
IkReal x3309=(cj1*x3297);
IkReal x3310=(r00*x3298);
IkReal x3311=(sj1*x3298);
IkReal x3312=((1.0)*x3297);
IkReal x3313=(r00*x3297);
IkReal x3314=(r10*x3298);
IkReal x3315=(x3297*x3302);
evalcond[0]=(((x3303*x3306))+((x3300*x3306))+((r11*x3298*x3302))+((r10*x3315))+(((-1.0)*sj1*x3297*x3308))+(((-1.0)*x3298*x3301*x3305))+((x3303*x3313))+((x3300*x3313)));
evalcond[1]=(((x3303*x3307))+((x3300*x3307))+((x3302*x3310))+((r01*x3297*x3305))+(((-1.0)*r01*x3302*x3312))+(((-1.0)*sj1*x3304*x3310))+(((-1.0)*x3300*x3314))+(((-1.0)*x3303*x3314)));
evalcond[2]=((1.0)+((x3302*x3313))+(((-1.0)*x3298*x3300*x3301))+(((-1.0)*r10*x3300*x3312))+(((-1.0)*sj1*x3304*x3306))+(((-1.0)*sj1*x3304*x3313))+(((-1.0)*x3298*x3301*x3303))+(((-1.0)*r10*x3303*x3312))+((x3302*x3306)));
evalcond[3]=(((x3302*x3314))+(((-1.0)*r01*x3300*x3312))+(((-1.0)*cj4*sj3*x3299))+(((-1.0)*r01*x3303*x3312))+(((-1.0)*cj3*sj4*x3299))+((sj2*sj3*sj4))+(((-1.0)*x3308*x3311))+(((-1.0)*cj3*cj4*sj2))+(((-1.0)*x3301*x3315))+((x3305*x3307))+((x3303*x3310))+((x3300*x3310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3316=(cj0*cj1);
IkReal x3317=(cj0*sj1);
IkReal x3318=(sj0*sj1);
IkReal x3319=((1.0)*cj1*sj0);
if( IKabs((((r10*x3316))+((r10*x3318))+(((-1.0)*r00*x3319))+((r00*x3317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x3316))+((r11*x3318))+(((-1.0)*r01*x3319))+((r01*x3317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3316))+((r10*x3318))+(((-1.0)*r00*x3319))+((r00*x3317))))+IKsqr((((r11*x3316))+((r11*x3318))+(((-1.0)*r01*x3319))+((r01*x3317))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r10*x3316))+((r10*x3318))+(((-1.0)*r00*x3319))+((r00*x3317))), (((r11*x3316))+((r11*x3318))+(((-1.0)*r01*x3319))+((r01*x3317))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x3320=IKsin(j5);
IkReal x3321=IKcos(j5);
IkReal x3322=((1.0)*cj2);
IkReal x3323=(sj0*sj1);
IkReal x3324=((1.0)*r11);
IkReal x3325=(cj1*sj0);
IkReal x3326=(cj0*cj1);
IkReal x3327=((1.0)*cj0);
IkReal x3328=(cj0*sj1);
IkReal x3329=(r01*x3321);
IkReal x3330=(r11*x3320);
IkReal x3331=(r10*x3327);
IkReal x3332=(cj1*x3320);
IkReal x3333=(r00*x3321);
IkReal x3334=(sj1*x3321);
IkReal x3335=((1.0)*x3320);
IkReal x3336=(r00*x3320);
IkReal x3337=(r10*x3321);
IkReal x3338=(x3320*x3325);
evalcond[0]=(((x3323*x3336))+((r10*x3338))+((x3326*x3329))+(((-1.0)*sj1*x3320*x3331))+(((-1.0)*x3321*x3324*x3328))+((x3326*x3336))+((x3323*x3329))+((r11*x3321*x3325)));
evalcond[1]=((((-1.0)*x3323*x3337))+((r01*x3320*x3328))+(((-1.0)*x3326*x3337))+(((-1.0)*r01*x3325*x3335))+((x3323*x3330))+(((-1.0)*sj1*x3327*x3333))+((x3326*x3330))+((x3325*x3333)));
evalcond[2]=((1.0)+(((-1.0)*r10*x3323*x3335))+((x3325*x3329))+(((-1.0)*x3321*x3324*x3326))+(((-1.0)*sj1*x3327*x3336))+(((-1.0)*sj1*x3327*x3329))+((x3325*x3336))+(((-1.0)*r10*x3326*x3335))+(((-1.0)*x3321*x3323*x3324)));
evalcond[3]=((((-1.0)*x3331*x3334))+((x3323*x3333))+((x3328*x3330))+(((-1.0)*r01*x3326*x3335))+(((-1.0)*cj4*sj3*x3322))+((sj2*sj3*sj4))+(((-1.0)*x3324*x3338))+((x3326*x3333))+(((-1.0)*cj3*sj4*x3322))+(((-1.0)*cj3*cj4*sj2))+((x3325*x3337))+(((-1.0)*r01*x3323*x3335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3339=(cj0*sj4);
IkReal x3340=(sj1*sj3);
IkReal x3341=(cj2*r00);
IkReal x3342=(r10*sj2);
IkReal x3343=(cj1*cj3);
IkReal x3344=(sj0*sj1);
IkReal x3345=(cj4*sj0);
IkReal x3346=(cj2*r11);
IkReal x3347=(cj1*sj3);
IkReal x3348=(cj3*sj4);
IkReal x3349=(cj2*r10);
IkReal x3350=(cj2*r01);
IkReal x3351=(r11*sj2);
IkReal x3352=(cj0*cj4);
IkReal x3353=(cj0*sj1);
IkReal x3354=(sj0*sj4);
IkReal x3355=(r00*sj2);
IkReal x3356=(cj3*sj1);
IkReal x3357=(r01*sj2);
IkReal x3358=((1.0)*cj3*cj4);
IkReal x3359=((1.0)*sj2*x3354);
CheckValue<IkReal> x3360=IKPowWithIntegerCheck(IKsign((((r12*((((cj1*sj0))+(((-1.0)*x3353))))))+((r02*((x3344+((cj0*cj1)))))))),-1);
if(!x3360.valid){
continue;
}
CheckValue<IkReal> x3361 = IKatan2WithCheck(IkReal((((x3339*x3347*x3349))+(((-1.0)*x3341*x3352*x3356))+((x3342*x3344*x3348))+((x3340*x3352*x3355))+((x3341*x3343*x3345))+((x3339*x3355*x3356))+((x3340*x3349*x3354))+(((-1.0)*x3343*x3349*x3352))+((x3339*x3342*x3343))+(((-1.0)*x3344*x3349*x3358))+((x3342*x3347*x3352))+(((-1.0)*x3341*x3347*x3354))+((x3340*x3342*x3345))+((x3339*x3340*x3341))+(((-1.0)*x3343*x3354*x3355))+(((-1.0)*x3345*x3347*x3355)))),IkReal((((x3340*x3345*x3351))+(((-1.0)*x3350*x3352*x3356))+((x3343*x3345*x3350))+((x3339*x3343*x3351))+((x3340*x3352*x3357))+((x3347*x3351*x3352))+((x3344*x3348*x3351))+((x3339*x3346*x3347))+(((-1.0)*x3343*x3354*x3357))+(((-1.0)*x3343*x3346*x3352))+(((-1.0)*x3347*x3350*x3354))+((x3339*x3356*x3357))+((x3339*x3340*x3350))+(((-1.0)*x3344*x3346*x3358))+((x3340*x3346*x3354))+(((-1.0)*x3345*x3347*x3357)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3361.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3360.value)))+(x3361.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3362=IKsin(j5);
IkReal x3363=IKcos(j5);
IkReal x3364=((1.0)*cj0);
IkReal x3365=(cj1*sj0);
IkReal x3366=(sj0*sj1);
IkReal x3367=(cj0*cj1);
IkReal x3368=(sj2*sj4);
IkReal x3369=(cj2*cj3);
IkReal x3370=(cj0*sj1);
IkReal x3371=((1.0)*cj3);
IkReal x3372=(cj4*sj2);
IkReal x3373=(r01*x3363);
IkReal x3374=((1.0)*cj2*sj3);
IkReal x3375=(r10*x3362);
IkReal x3376=(r11*x3362);
IkReal x3377=((1.0)*x3363);
IkReal x3378=(r00*x3363);
IkReal x3379=(sj1*x3363);
IkReal x3380=(r10*x3363);
IkReal x3381=(r01*x3362);
IkReal x3382=(r00*x3362);
IkReal x3383=(r11*x3363);
evalcond[0]=((((-1.0)*r21*x3377))+(((-1.0)*r20*x3362)));
evalcond[1]=(((r21*x3362))+(((-1.0)*r20*x3377))+(((-1.0)*sj4*x3374))+((cj4*x3369))+(((-1.0)*x3368*x3371))+(((-1.0)*sj3*x3372)));
evalcond[2]=((((-1.0)*r11*x3364*x3379))+(((-1.0)*sj1*x3364*x3375))+((x3367*x3373))+((x3365*x3375))+((x3366*x3373))+((x3365*x3383))+((x3366*x3382))+((x3367*x3382)));
evalcond[3]=((((-1.0)*sj1*x3364*x3378))+((x3367*x3376))+(((-1.0)*r10*x3366*x3377))+(((-1.0)*x3365*x3381))+(((-1.0)*cj1*x3364*x3380))+((x3365*x3378))+((x3366*x3376))+((x3370*x3381)));
evalcond[4]=((1.0)+(((-1.0)*x3366*x3375))+(((-1.0)*sj1*x3364*x3382))+(((-1.0)*sj1*x3364*x3373))+(((-1.0)*cj1*x3364*x3383))+((x3365*x3373))+(((-1.0)*r11*x3366*x3377))+(((-1.0)*cj1*x3364*x3375))+((x3365*x3382)));
evalcond[5]=((((-1.0)*r10*x3364*x3379))+((sj3*x3368))+(((-1.0)*x3366*x3381))+((x3367*x3378))+((x3370*x3376))+(((-1.0)*x3371*x3372))+(((-1.0)*cj1*x3364*x3381))+(((-1.0)*cj4*x3374))+((x3366*x3378))+(((-1.0)*x3365*x3376))+((x3365*x3380))+(((-1.0)*sj4*x3369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3384=((1.0)*r21);
IkReal x3385=(cj3*r20);
IkReal x3386=(cj2*cj4);
IkReal x3387=(sj2*sj4);
IkReal x3388=(cj2*sj3*sj4);
IkReal x3389=(cj4*sj2*sj3);
CheckValue<IkReal> x3390=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x3390.valid){
continue;
}
CheckValue<IkReal> x3391 = IKatan2WithCheck(IkReal(((((-1.0)*x3384*x3388))+(((-1.0)*x3384*x3389))+(((-1.0)*cj3*x3384*x3387))+((cj3*r21*x3386)))),IkReal((((r20*x3388))+((r20*x3389))+(((-1.0)*x3385*x3386))+((x3385*x3387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3391.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3390.value)))+(x3391.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3392=IKsin(j5);
IkReal x3393=IKcos(j5);
IkReal x3394=((1.0)*cj0);
IkReal x3395=(cj1*sj0);
IkReal x3396=(sj0*sj1);
IkReal x3397=(cj0*cj1);
IkReal x3398=(sj2*sj4);
IkReal x3399=(cj2*cj3);
IkReal x3400=(cj0*sj1);
IkReal x3401=((1.0)*cj3);
IkReal x3402=(cj4*sj2);
IkReal x3403=(r01*x3393);
IkReal x3404=((1.0)*cj2*sj3);
IkReal x3405=(r10*x3392);
IkReal x3406=(r11*x3392);
IkReal x3407=((1.0)*x3393);
IkReal x3408=(r00*x3393);
IkReal x3409=(sj1*x3393);
IkReal x3410=(r10*x3393);
IkReal x3411=(r01*x3392);
IkReal x3412=(r00*x3392);
IkReal x3413=(r11*x3393);
evalcond[0]=((((-1.0)*r21*x3407))+(((-1.0)*r20*x3392)));
evalcond[1]=((((-1.0)*r20*x3407))+(((-1.0)*x3398*x3401))+((r21*x3392))+(((-1.0)*sj3*x3402))+(((-1.0)*sj4*x3404))+((cj4*x3399)));
evalcond[2]=((((-1.0)*r11*x3394*x3409))+(((-1.0)*sj1*x3394*x3405))+((x3395*x3405))+((x3395*x3413))+((x3397*x3403))+((x3396*x3403))+((x3396*x3412))+((x3397*x3412)));
evalcond[3]=((((-1.0)*r10*x3396*x3407))+(((-1.0)*sj1*x3394*x3408))+((x3400*x3411))+((x3395*x3408))+(((-1.0)*x3395*x3411))+((x3397*x3406))+((x3396*x3406))+(((-1.0)*cj1*x3394*x3410)));
evalcond[4]=((1.0)+(((-1.0)*x3396*x3405))+(((-1.0)*r11*x3396*x3407))+(((-1.0)*sj1*x3394*x3403))+((x3395*x3403))+((x3395*x3412))+(((-1.0)*sj1*x3394*x3412))+(((-1.0)*cj1*x3394*x3405))+(((-1.0)*cj1*x3394*x3413)));
evalcond[5]=((((-1.0)*cj4*x3404))+(((-1.0)*x3401*x3402))+(((-1.0)*x3395*x3406))+(((-1.0)*x3396*x3411))+((x3395*x3410))+((x3397*x3408))+((x3396*x3408))+((x3400*x3406))+(((-1.0)*sj4*x3399))+(((-1.0)*r10*x3394*x3409))+((sj3*x3398))+(((-1.0)*cj1*x3394*x3411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3414=IKPowWithIntegerCheck(IKsign((((r02*((((cj0*cj1))+((sj0*sj1))))))+((r12*((((cj1*sj0))+(((-1.0)*cj0*sj1)))))))),-1);
if(!x3414.valid){
continue;
}
CheckValue<IkReal> x3415 = IKatan2WithCheck(IkReal(r21),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3415.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3414.value)))+(x3415.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3416=IKsin(j5);
IkReal x3417=IKcos(j5);
IkReal x3418=((1.0)*cj0);
IkReal x3419=(cj1*sj0);
IkReal x3420=(sj0*sj1);
IkReal x3421=(cj0*cj1);
IkReal x3422=(sj2*sj4);
IkReal x3423=(cj2*cj3);
IkReal x3424=(cj0*sj1);
IkReal x3425=((1.0)*cj3);
IkReal x3426=(cj4*sj2);
IkReal x3427=(r01*x3417);
IkReal x3428=((1.0)*cj2*sj3);
IkReal x3429=(r10*x3416);
IkReal x3430=(r11*x3416);
IkReal x3431=((1.0)*x3417);
IkReal x3432=(r00*x3417);
IkReal x3433=(sj1*x3417);
IkReal x3434=(r10*x3417);
IkReal x3435=(r01*x3416);
IkReal x3436=(r00*x3416);
IkReal x3437=(r11*x3417);
evalcond[0]=((((-1.0)*r20*x3416))+(((-1.0)*r21*x3431)));
evalcond[1]=((((-1.0)*sj3*x3426))+((r21*x3416))+(((-1.0)*sj4*x3428))+((cj4*x3423))+(((-1.0)*x3422*x3425))+(((-1.0)*r20*x3431)));
evalcond[2]=(((x3420*x3436))+((x3420*x3427))+(((-1.0)*r11*x3418*x3433))+((x3421*x3427))+((x3421*x3436))+((x3419*x3437))+(((-1.0)*sj1*x3418*x3429))+((x3419*x3429)));
evalcond[3]=((((-1.0)*r10*x3420*x3431))+(((-1.0)*x3419*x3435))+((x3424*x3435))+((x3420*x3430))+(((-1.0)*cj1*x3418*x3434))+((x3421*x3430))+((x3419*x3432))+(((-1.0)*sj1*x3418*x3432)));
evalcond[4]=((1.0)+(((-1.0)*x3420*x3429))+(((-1.0)*cj1*x3418*x3437))+(((-1.0)*cj1*x3418*x3429))+(((-1.0)*r11*x3420*x3431))+((x3419*x3436))+(((-1.0)*sj1*x3418*x3427))+((x3419*x3427))+(((-1.0)*sj1*x3418*x3436)));
evalcond[5]=((((-1.0)*x3420*x3435))+(((-1.0)*x3419*x3430))+((x3424*x3430))+((x3420*x3432))+((sj3*x3422))+(((-1.0)*r10*x3418*x3433))+(((-1.0)*cj1*x3418*x3435))+(((-1.0)*x3425*x3426))+((x3421*x3432))+(((-1.0)*cj4*x3428))+(((-1.0)*sj4*x3423))+((x3419*x3434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3438=cj1*cj1;
IkReal x3439=((50000000.0)*r02);
IkReal x3440=((50000000.0)*r12);
IkReal x3441=(cj1*sj1);
CheckValue<IkReal> x3442 = IKatan2WithCheck(IkReal(((((-1.0)*x3439))+((x3438*x3439))+(((-1.0)*x3440*x3441)))),IkReal(((((-1.0)*x3438*x3440))+(((-1.0)*x3439*x3441))+x3440)),IKFAST_ATAN2_MAGTHRESH);
if(!x3442.valid){
continue;
}
CheckValue<IkReal> x3443=IKPowWithIntegerCheck(IKsign(rxp2_2),-1);
if(!x3443.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x3442.value)+(((-1.5707963267949)*(x3443.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[3];
IkReal x3444=IKcos(j0);
IkReal x3445=IKsin(j0);
IkReal x3446=(px*sj1);
IkReal x3447=(cj1*py);
IkReal x3448=((0.14203)*sj2);
IkReal x3449=((1.0)*x3444);
IkReal x3450=(cj1*x3445);
IkReal x3451=((1.0)*sj1*x3445);
evalcond[0]=((((-1.0)*cj1*r12*x3449))+((r02*x3450))+(((-1.0)*r02*sj1*x3449))+(((-1.0)*r12*x3451)));
evalcond[1]=((((-1.0)*x3447*x3449))+(((0.11430032722332)*sj1))+(((-1.0)*x3446*x3449))+((px*x3450))+(((-1.0)*py*x3451)));
evalcond[2]=((((0.14203)*cj2*cj3))+((cj1*px*x3444))+(((-1.0)*sj3*x3448))+x3448+(((2.0e-7)*cj3*sj2))+((x3445*x3447))+((x3445*x3446))+(((-1.0)*py*sj1*x3449))+(((-0.11430032722332)*cj1))+(((2.0e-7)*cj2*sj3))+(((0.04825)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3452=(cj2*sj3);
IkReal x3453=(cj3*sj2);
IkReal x3454=(sj2*sj3);
IkReal x3455=(cj2*cj3);
IkReal x3456=(cj0*r12*sj1);
IkReal x3457=(cj1*r12*sj0);
IkReal x3458=(cj0*cj1*r02);
IkReal x3459=(r02*sj0*sj1);
if( IKabs(((((-1.0)*r22*x3454))+(((-1.0)*x3452*x3456))+((x3453*x3457))+((x3453*x3458))+((x3453*x3459))+((r22*x3455))+(((-1.0)*x3453*x3456))+((x3452*x3457))+((x3452*x3458))+((x3452*x3459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3455*x3457))+(((-1.0)*x3455*x3459))+(((-1.0)*x3455*x3458))+((r22*x3452))+((r22*x3453))+((x3455*x3456))+(((-1.0)*x3454*x3456))+((x3454*x3457))+((x3454*x3458))+((x3454*x3459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x3454))+(((-1.0)*x3452*x3456))+((x3453*x3457))+((x3453*x3458))+((x3453*x3459))+((r22*x3455))+(((-1.0)*x3453*x3456))+((x3452*x3457))+((x3452*x3458))+((x3452*x3459))))+IKsqr(((((-1.0)*x3455*x3457))+(((-1.0)*x3455*x3459))+(((-1.0)*x3455*x3458))+((r22*x3452))+((r22*x3453))+((x3455*x3456))+(((-1.0)*x3454*x3456))+((x3454*x3457))+((x3454*x3458))+((x3454*x3459))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r22*x3454))+(((-1.0)*x3452*x3456))+((x3453*x3457))+((x3453*x3458))+((x3453*x3459))+((r22*x3455))+(((-1.0)*x3453*x3456))+((x3452*x3457))+((x3452*x3458))+((x3452*x3459))), ((((-1.0)*x3455*x3457))+(((-1.0)*x3455*x3459))+(((-1.0)*x3455*x3458))+((r22*x3452))+((r22*x3453))+((x3455*x3456))+(((-1.0)*x3454*x3456))+((x3454*x3457))+((x3454*x3458))+((x3454*x3459))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x3460=IKcos(j4);
IkReal x3461=IKsin(j4);
IkReal x3462=((1.0)*sj3);
IkReal x3463=(cj2*x3460);
IkReal x3464=(sj2*x3460);
IkReal x3465=(cj2*x3461);
IkReal x3466=(sj2*x3461);
evalcond[0]=((((-1.0)*x3462*x3466))+((sj3*x3463))+(((-1.0)*r22))+((cj3*x3465))+((cj3*x3464)));
evalcond[1]=(((r02*sj0*sj1))+(((-1.0)*x3462*x3465))+(((-1.0)*x3462*x3464))+((cj0*cj1*r02))+(((-1.0)*cj3*x3466))+((cj1*r12*sj0))+((cj3*x3463))+(((-1.0)*cj0*r12*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[3];
IkReal x3467=(((r02*sj0*sj1))+((cj0*cj1*r02))+((cj1*r12*sj0))+(((-1.0)*cj0*r12*sj1)));
j5eval[0]=x3467;
j5eval[1]=((IKabs(r21))+(IKabs(r20)));
j5eval[2]=IKsign(x3467);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x3468=((1.0)*cj2);
IkReal x3469=(r21*sj4);
IkReal x3470=(cj3*r20);
IkReal x3471=((1.0)*sj2);
IkReal x3472=(cj4*sj3);
IkReal x3473=((-1.0)+(r22*r22));
j5eval[0]=x3473;
j5eval[1]=((IKabs(((((-1.0)*cj3*x3469*x3471))+(((-1.0)*r21*x3471*x3472))+((cj2*cj3*cj4*r21))+(((-1.0)*sj3*x3468*x3469)))))+(IKabs((((sj2*sj4*x3470))+((cj2*r20*sj3*sj4))+(((-1.0)*cj4*x3468*x3470))+((r20*sj2*x3472))))));
j5eval[2]=IKsign(x3473);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x3474=(((r02*sj0*sj1))+((cj0*cj1*r02))+((cj1*r12*sj0))+(((-1.0)*cj0*r12*sj1)));
j5eval[0]=x3474;
j5eval[1]=IKsign(x3474);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r02))+(IKabs(r12)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3475=(cj0*cj1);
IkReal x3476=(cj0*sj1);
IkReal x3477=(sj0*sj1);
IkReal x3478=((1.0)*cj1*sj0);
if( IKabs(((((-1.0)*r00*x3478))+((r00*x3476))+((r10*x3477))+((r10*x3475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x3476))+((r11*x3475))+((r11*x3477))+(((-1.0)*r01*x3478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x3478))+((r00*x3476))+((r10*x3477))+((r10*x3475))))+IKsqr((((r01*x3476))+((r11*x3475))+((r11*x3477))+(((-1.0)*r01*x3478))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*r00*x3478))+((r00*x3476))+((r10*x3477))+((r10*x3475))), (((r01*x3476))+((r11*x3475))+((r11*x3477))+(((-1.0)*r01*x3478))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x3479=IKsin(j5);
IkReal x3480=IKcos(j5);
IkReal x3481=((1.0)*cj2);
IkReal x3482=(sj0*sj1);
IkReal x3483=((1.0)*r11);
IkReal x3484=(cj1*sj0);
IkReal x3485=(cj0*cj1);
IkReal x3486=((1.0)*cj0);
IkReal x3487=(cj0*sj1);
IkReal x3488=(r01*x3480);
IkReal x3489=(r11*x3479);
IkReal x3490=(r10*x3486);
IkReal x3491=(cj1*x3479);
IkReal x3492=(r00*x3480);
IkReal x3493=(sj1*x3480);
IkReal x3494=((1.0)*x3479);
IkReal x3495=(r00*x3479);
IkReal x3496=(r10*x3480);
IkReal x3497=(x3479*x3484);
evalcond[0]=(((r10*x3497))+((x3485*x3495))+((x3482*x3495))+((x3482*x3488))+((r11*x3480*x3484))+((x3485*x3488))+(((-1.0)*sj1*x3479*x3490))+(((-1.0)*x3480*x3483*x3487)));
evalcond[1]=((((-1.0)*r01*x3484*x3494))+(((-1.0)*sj1*x3486*x3492))+((x3482*x3489))+((x3485*x3489))+(((-1.0)*x3485*x3496))+(((-1.0)*x3482*x3496))+((x3484*x3492))+((r01*x3479*x3487)));
evalcond[2]=((1.0)+((x3484*x3488))+(((-1.0)*sj1*x3486*x3488))+(((-1.0)*r10*x3482*x3494))+(((-1.0)*r10*x3485*x3494))+(((-1.0)*sj1*x3486*x3495))+(((-1.0)*x3480*x3483*x3485))+((x3484*x3495))+(((-1.0)*x3480*x3482*x3483)));
evalcond[3]=((((-1.0)*x3483*x3497))+((x3487*x3489))+((x3485*x3492))+(((-1.0)*r01*x3485*x3494))+(((-1.0)*r01*x3482*x3494))+(((-1.0)*cj4*sj3*x3481))+((x3482*x3492))+(((-1.0)*x3490*x3493))+((sj2*sj3*sj4))+(((-1.0)*cj3*cj4*sj2))+((x3484*x3496))+(((-1.0)*cj3*sj4*x3481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3498=(cj0*cj1);
IkReal x3499=(cj0*sj1);
IkReal x3500=(sj0*sj1);
IkReal x3501=((1.0)*cj1*sj0);
if( IKabs((((r10*x3500))+((r00*x3499))+((r10*x3498))+(((-1.0)*r00*x3501)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x3499))+(((-1.0)*r01*x3501))+((r11*x3500))+((r11*x3498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3500))+((r00*x3499))+((r10*x3498))+(((-1.0)*r00*x3501))))+IKsqr((((r01*x3499))+(((-1.0)*r01*x3501))+((r11*x3500))+((r11*x3498))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((r10*x3500))+((r00*x3499))+((r10*x3498))+(((-1.0)*r00*x3501))), (((r01*x3499))+(((-1.0)*r01*x3501))+((r11*x3500))+((r11*x3498))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x3502=IKsin(j5);
IkReal x3503=IKcos(j5);
IkReal x3504=((1.0)*cj2);
IkReal x3505=(sj0*sj1);
IkReal x3506=((1.0)*r11);
IkReal x3507=(cj1*sj0);
IkReal x3508=(cj0*cj1);
IkReal x3509=((1.0)*cj0);
IkReal x3510=(cj0*sj1);
IkReal x3511=(r01*x3503);
IkReal x3512=(r11*x3502);
IkReal x3513=(r10*x3509);
IkReal x3514=(cj1*x3502);
IkReal x3515=(r00*x3503);
IkReal x3516=(sj1*x3503);
IkReal x3517=((1.0)*x3502);
IkReal x3518=(r00*x3502);
IkReal x3519=(r10*x3503);
IkReal x3520=(x3502*x3507);
evalcond[0]=((((-1.0)*sj1*x3502*x3513))+((r10*x3520))+((x3508*x3518))+((x3508*x3511))+(((-1.0)*x3503*x3506*x3510))+((x3505*x3511))+((x3505*x3518))+((r11*x3503*x3507)));
evalcond[1]=(((x3507*x3515))+(((-1.0)*sj1*x3509*x3515))+(((-1.0)*r01*x3507*x3517))+((x3508*x3512))+(((-1.0)*x3508*x3519))+(((-1.0)*x3505*x3519))+((r01*x3502*x3510))+((x3505*x3512)));
evalcond[2]=((1.0)+((x3507*x3518))+((x3507*x3511))+(((-1.0)*r10*x3508*x3517))+(((-1.0)*r10*x3505*x3517))+(((-1.0)*sj1*x3509*x3511))+(((-1.0)*sj1*x3509*x3518))+(((-1.0)*x3503*x3505*x3506))+(((-1.0)*x3503*x3506*x3508)));
evalcond[3]=((((-1.0)*x3506*x3520))+((x3507*x3519))+((x3510*x3512))+(((-1.0)*x3513*x3516))+(((-1.0)*r01*x3505*x3517))+((x3508*x3515))+((sj2*sj3*sj4))+(((-1.0)*cj4*sj3*x3504))+(((-1.0)*r01*x3508*x3517))+(((-1.0)*cj3*sj4*x3504))+(((-1.0)*cj3*cj4*sj2))+((x3505*x3515)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3521=(cj0*sj4);
IkReal x3522=(sj1*sj3);
IkReal x3523=(cj2*r00);
IkReal x3524=(r10*sj2);
IkReal x3525=(cj1*cj3);
IkReal x3526=(sj0*sj1);
IkReal x3527=(cj4*sj0);
IkReal x3528=(cj2*r11);
IkReal x3529=(cj1*sj3);
IkReal x3530=(cj3*sj4);
IkReal x3531=(cj2*r10);
IkReal x3532=(cj2*r01);
IkReal x3533=(r11*sj2);
IkReal x3534=(cj0*cj4);
IkReal x3535=(cj0*sj1);
IkReal x3536=(sj0*sj4);
IkReal x3537=(r00*sj2);
IkReal x3538=(cj3*sj1);
IkReal x3539=(r01*sj2);
IkReal x3540=((1.0)*cj3*cj4);
IkReal x3541=((1.0)*sj2*x3536);
CheckValue<IkReal> x3542=IKPowWithIntegerCheck(IKsign((((r02*((((cj0*cj1))+x3526))))+((r12*((((cj1*sj0))+(((-1.0)*x3535)))))))),-1);
if(!x3542.valid){
continue;
}
CheckValue<IkReal> x3543 = IKatan2WithCheck(IkReal((((x3521*x3537*x3538))+((x3524*x3526*x3530))+(((-1.0)*x3527*x3529*x3537))+((x3521*x3524*x3525))+((x3522*x3531*x3536))+(((-1.0)*x3526*x3531*x3540))+((x3524*x3529*x3534))+(((-1.0)*x3523*x3529*x3536))+((x3522*x3524*x3527))+(((-1.0)*x3523*x3534*x3538))+(((-1.0)*x3525*x3531*x3534))+((x3522*x3534*x3537))+(((-1.0)*x3525*x3536*x3537))+((x3521*x3529*x3531))+((x3523*x3525*x3527))+((x3521*x3522*x3523)))),IkReal((((x3521*x3525*x3533))+(((-1.0)*x3527*x3529*x3539))+((x3529*x3533*x3534))+((x3521*x3522*x3532))+((x3525*x3527*x3532))+(((-1.0)*x3529*x3532*x3536))+((x3521*x3538*x3539))+((x3526*x3530*x3533))+((x3521*x3528*x3529))+(((-1.0)*x3525*x3528*x3534))+(((-1.0)*x3526*x3528*x3540))+((x3522*x3534*x3539))+(((-1.0)*x3525*x3536*x3539))+((x3522*x3527*x3533))+(((-1.0)*x3532*x3534*x3538))+((x3522*x3528*x3536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3543.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3542.value)))+(x3543.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3544=IKsin(j5);
IkReal x3545=IKcos(j5);
IkReal x3546=((1.0)*cj0);
IkReal x3547=(cj1*sj0);
IkReal x3548=(sj0*sj1);
IkReal x3549=(cj0*cj1);
IkReal x3550=(sj2*sj4);
IkReal x3551=(cj2*cj3);
IkReal x3552=(cj0*sj1);
IkReal x3553=((1.0)*cj3);
IkReal x3554=(cj4*sj2);
IkReal x3555=(r01*x3545);
IkReal x3556=((1.0)*cj2*sj3);
IkReal x3557=(r10*x3544);
IkReal x3558=(r11*x3544);
IkReal x3559=((1.0)*x3545);
IkReal x3560=(r00*x3545);
IkReal x3561=(sj1*x3545);
IkReal x3562=(r10*x3545);
IkReal x3563=(r01*x3544);
IkReal x3564=(r00*x3544);
IkReal x3565=(r11*x3545);
evalcond[0]=((((-1.0)*r21*x3559))+(((-1.0)*r20*x3544)));
evalcond[1]=((((-1.0)*sj4*x3556))+(((-1.0)*r20*x3559))+((r21*x3544))+((cj4*x3551))+(((-1.0)*x3550*x3553))+(((-1.0)*sj3*x3554)));
evalcond[2]=(((x3548*x3564))+((x3547*x3557))+((x3548*x3555))+((x3547*x3565))+(((-1.0)*sj1*x3546*x3557))+(((-1.0)*r11*x3546*x3561))+((x3549*x3564))+((x3549*x3555)));
evalcond[3]=((((-1.0)*r10*x3548*x3559))+(((-1.0)*sj1*x3546*x3560))+((x3548*x3558))+(((-1.0)*cj1*x3546*x3562))+((x3547*x3560))+((x3552*x3563))+((x3549*x3558))+(((-1.0)*x3547*x3563)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3548*x3559))+(((-1.0)*sj1*x3546*x3564))+((x3547*x3555))+(((-1.0)*cj1*x3546*x3565))+((x3547*x3564))+(((-1.0)*sj1*x3546*x3555))+(((-1.0)*cj1*x3546*x3557))+(((-1.0)*x3548*x3557)));
evalcond[5]=((((-1.0)*x3547*x3558))+((sj3*x3550))+((x3548*x3560))+(((-1.0)*cj1*x3546*x3563))+((x3552*x3558))+(((-1.0)*x3553*x3554))+((x3547*x3562))+(((-1.0)*x3548*x3563))+((x3549*x3560))+(((-1.0)*sj4*x3551))+(((-1.0)*r10*x3546*x3561))+(((-1.0)*cj4*x3556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x3566=((1.0)*r21);
IkReal x3567=(cj3*r20);
IkReal x3568=(cj2*cj4);
IkReal x3569=(sj2*sj4);
IkReal x3570=(cj2*sj3*sj4);
IkReal x3571=(cj4*sj2*sj3);
CheckValue<IkReal> x3572=IKPowWithIntegerCheck(IKsign(((-1.0)+(r22*r22))),-1);
if(!x3572.valid){
continue;
}
CheckValue<IkReal> x3573 = IKatan2WithCheck(IkReal(((((-1.0)*cj3*x3566*x3569))+(((-1.0)*x3566*x3570))+(((-1.0)*x3566*x3571))+((cj3*r21*x3568)))),IkReal((((r20*x3571))+((r20*x3570))+(((-1.0)*x3567*x3568))+((x3567*x3569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3573.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3572.value)))+(x3573.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3574=IKsin(j5);
IkReal x3575=IKcos(j5);
IkReal x3576=((1.0)*cj0);
IkReal x3577=(cj1*sj0);
IkReal x3578=(sj0*sj1);
IkReal x3579=(cj0*cj1);
IkReal x3580=(sj2*sj4);
IkReal x3581=(cj2*cj3);
IkReal x3582=(cj0*sj1);
IkReal x3583=((1.0)*cj3);
IkReal x3584=(cj4*sj2);
IkReal x3585=(r01*x3575);
IkReal x3586=((1.0)*cj2*sj3);
IkReal x3587=(r10*x3574);
IkReal x3588=(r11*x3574);
IkReal x3589=((1.0)*x3575);
IkReal x3590=(r00*x3575);
IkReal x3591=(sj1*x3575);
IkReal x3592=(r10*x3575);
IkReal x3593=(r01*x3574);
IkReal x3594=(r00*x3574);
IkReal x3595=(r11*x3575);
evalcond[0]=((((-1.0)*r20*x3574))+(((-1.0)*r21*x3589)));
evalcond[1]=(((r21*x3574))+((cj4*x3581))+(((-1.0)*sj4*x3586))+(((-1.0)*r20*x3589))+(((-1.0)*x3580*x3583))+(((-1.0)*sj3*x3584)));
evalcond[2]=((((-1.0)*sj1*x3576*x3587))+((x3579*x3594))+((x3579*x3585))+((x3578*x3585))+((x3578*x3594))+(((-1.0)*r11*x3576*x3591))+((x3577*x3587))+((x3577*x3595)));
evalcond[3]=((((-1.0)*sj1*x3576*x3590))+(((-1.0)*r10*x3578*x3589))+((x3579*x3588))+(((-1.0)*x3577*x3593))+(((-1.0)*cj1*x3576*x3592))+((x3578*x3588))+((x3582*x3593))+((x3577*x3590)));
evalcond[4]=((1.0)+(((-1.0)*sj1*x3576*x3585))+(((-1.0)*sj1*x3576*x3594))+(((-1.0)*cj1*x3576*x3595))+(((-1.0)*r11*x3578*x3589))+(((-1.0)*cj1*x3576*x3587))+((x3577*x3585))+(((-1.0)*x3578*x3587))+((x3577*x3594)));
evalcond[5]=(((x3579*x3590))+((sj3*x3580))+(((-1.0)*r10*x3576*x3591))+(((-1.0)*cj1*x3576*x3593))+(((-1.0)*sj4*x3581))+((x3578*x3590))+(((-1.0)*x3583*x3584))+(((-1.0)*x3577*x3588))+(((-1.0)*cj4*x3586))+((x3582*x3588))+(((-1.0)*x3578*x3593))+((x3577*x3592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x3596=IKPowWithIntegerCheck(IKsign((((r02*((((cj0*cj1))+((sj0*sj1))))))+((r12*((((cj1*sj0))+(((-1.0)*cj0*sj1)))))))),-1);
if(!x3596.valid){
continue;
}
CheckValue<IkReal> x3597 = IKatan2WithCheck(IkReal(r21),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3597.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3596.value)))+(x3597.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x3598=IKsin(j5);
IkReal x3599=IKcos(j5);
IkReal x3600=((1.0)*cj0);
IkReal x3601=(cj1*sj0);
IkReal x3602=(sj0*sj1);
IkReal x3603=(cj0*cj1);
IkReal x3604=(sj2*sj4);
IkReal x3605=(cj2*cj3);
IkReal x3606=(cj0*sj1);
IkReal x3607=((1.0)*cj3);
IkReal x3608=(cj4*sj2);
IkReal x3609=(r01*x3599);
IkReal x3610=((1.0)*cj2*sj3);
IkReal x3611=(r10*x3598);
IkReal x3612=(r11*x3598);
IkReal x3613=((1.0)*x3599);
IkReal x3614=(r00*x3599);
IkReal x3615=(sj1*x3599);
IkReal x3616=(r10*x3599);
IkReal x3617=(r01*x3598);
IkReal x3618=(r00*x3598);
IkReal x3619=(r11*x3599);
evalcond[0]=((((-1.0)*r21*x3613))+(((-1.0)*r20*x3598)));
evalcond[1]=(((cj4*x3605))+(((-1.0)*sj4*x3610))+((r21*x3598))+(((-1.0)*r20*x3613))+(((-1.0)*sj3*x3608))+(((-1.0)*x3604*x3607)));
evalcond[2]=((((-1.0)*sj1*x3600*x3611))+(((-1.0)*r11*x3600*x3615))+((x3602*x3609))+((x3603*x3618))+((x3602*x3618))+((x3601*x3611))+((x3601*x3619))+((x3603*x3609)));
evalcond[3]=((((-1.0)*sj1*x3600*x3614))+(((-1.0)*x3601*x3617))+(((-1.0)*cj1*x3600*x3616))+((x3603*x3612))+((x3602*x3612))+((x3601*x3614))+(((-1.0)*r10*x3602*x3613))+((x3606*x3617)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3602*x3613))+(((-1.0)*sj1*x3600*x3609))+(((-1.0)*x3602*x3611))+(((-1.0)*sj1*x3600*x3618))+(((-1.0)*cj1*x3600*x3619))+(((-1.0)*cj1*x3600*x3611))+((x3601*x3609))+((x3601*x3618)));
evalcond[5]=(((sj3*x3604))+(((-1.0)*x3602*x3617))+(((-1.0)*x3601*x3612))+(((-1.0)*r10*x3600*x3615))+(((-1.0)*x3607*x3608))+(((-1.0)*sj4*x3605))+(((-1.0)*cj1*x3600*x3617))+((x3603*x3614))+((x3602*x3614))+((x3601*x3616))+(((-1.0)*cj4*x3610))+((x3606*x3612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - jenga_robot (5a8acfaf7c56264b5ea66c54d9ee344f)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
